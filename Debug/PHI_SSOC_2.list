
PHI_SSOC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb4  0800abb4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abbc  0800abbc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abc0  0800abc0  0001abc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800abc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000060  0800ac24  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  0800ac24  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020396  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004533  00000000  00000000  00040463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e18  00000000  00000000  00044998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000170c  00000000  00000000  000467b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211bb  00000000  00000000  00047ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec36  00000000  00000000  00069077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c40ce  00000000  00000000  00087cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082a4  00000000  00000000  0014bd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00154020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a824 	.word	0x0800a824

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800a824 	.word	0x0800a824

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <myDebug>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void myDebug(const char *fmt, ...) {
 800051c:	b40f      	push	{r0, r1, r2, r3}
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	2164      	movs	r1, #100	; 0x64
 8000530:	480a      	ldr	r0, [pc, #40]	; (800055c <myDebug+0x40>)
 8000532:	f009 fce7 	bl	8009f04 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <myDebug+0x40>)
 8000538:	f000 f814 	bl	8000564 <bufferSize>
 800053c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	b29a      	uxth	r2, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	4905      	ldr	r1, [pc, #20]	; (800055c <myDebug+0x40>)
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <myDebug+0x44>)
 800054a:	f004 faa5 	bl	8004a98 <HAL_UART_Transmit>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000558:	b004      	add	sp, #16
 800055a:	4770      	bx	lr
 800055c:	2000007c 	.word	0x2000007c
 8000560:	20000208 	.word	0x20000208

08000564 <bufferSize>:

int bufferSize(char *buffer) {
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000570:	e002      	b.n	8000578 <bufferSize+0x14>
		i++;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	607a      	str	r2, [r7, #4]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f6      	bne.n	8000572 <bufferSize+0xe>
	return i;
 8000584:	68fb      	ldr	r3, [r7, #12]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <delay_us>:

void delay_us(uint16_t ms) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	uint8_t delay_counter_disp = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <delay_us+0x38>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 80005a6:	e002      	b.n	80005ae <delay_us+0x1e>
		delay_counter_disp++;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
	while (__HAL_TIM_GET_COUNTER(&htim1) < ms) {
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <delay_us+0x38>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3f6      	bcc.n	80005a8 <delay_us+0x18>
		// wait for the counter to reach the us input in the parameter
	}
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000428 	.word	0x20000428

080005cc <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800060a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000620:	68fb      	ldr	r3, [r7, #12]
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	; 0x38
 8000630:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000632:	f000 ff41 	bl	80014b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000636:	f000 f88f 	bl	8000758 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800063a:	f000 fa61 	bl	8000b00 <MX_GPIO_Init>
	MX_DMA_Init();
 800063e:	f000 fa35 	bl	8000aac <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000642:	f000 f981 	bl	8000948 <MX_USART2_UART_Init>
	MX_SubGHz_Phy_Init();
 8000646:	f009 f8c0 	bl	80097ca <MX_SubGHz_Phy_Init>
	MX_USART1_UART_Init();
 800064a:	f000 f931 	bl	80008b0 <MX_USART1_UART_Init>
	MX_LPUART1_UART_Init();
 800064e:	f000 f8e3 	bl	8000818 <MX_LPUART1_UART_Init>
	MX_TIM1_Init();
 8000652:	f000 f9d7 	bl	8000a04 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000656:	483a      	ldr	r0, [pc, #232]	; (8000740 <main+0x114>)
 8000658:	f003 fde0 	bl	800421c <HAL_TIM_Base_Start>

	while (HANDSHAKE_SUCCESS == 0) {
 800065c:	e001      	b.n	8000662 <main+0x36>
		WAIT_FOR_HANDSHAKE();
 800065e:	f000 faf1 	bl	8000c44 <WAIT_FOR_HANDSHAKE>
	while (HANDSHAKE_SUCCESS == 0) {
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <main+0x118>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <main+0x32>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800066a:	f009 f8b6 	bl	80097da <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		if (HANDSHAKE_SUCCESS == 1) {
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <main+0x118>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d1f9      	bne.n	800066a <main+0x3e>
			PacketParams_t pkt_params;
			pkt_params.PacketType = PACKET_TYPE_LORA;
 8000676:	2301      	movs	r3, #1
 8000678:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			pkt_params.Params.LoRa.PayloadLength = PayLoadLength;
 800067c:	2320      	movs	r3, #32
 800067e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			pkt_params.Params.LoRa.PreambleLength = 8;
 8000682:	2308      	movs	r3, #8
 8000684:	867b      	strh	r3, [r7, #50]	; 0x32
			pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 8000686:	2301      	movs	r3, #1
 8000688:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			ModulationParams_t mod_params;
			mod_params.PacketType = PACKET_TYPE_LORA;
 8000698:	2301      	movs	r3, #1
 800069a:	723b      	strb	r3, [r7, #8]
			mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 800069c:	2302      	movs	r3, #2
 800069e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	f887 3020 	strb.w	r3, [r7, #32]
			mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 80006a8:	2304      	movs	r3, #4
 80006aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			mod_params.Params.LoRa.LowDatarateOptimize = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

			SUBGRF_Init(DioIrqHndlr);
 80006b4:	4824      	ldr	r0, [pc, #144]	; (8000748 <main+0x11c>)
 80006b6:	f007 fe3f 	bl	8008338 <SUBGRF_Init>
			SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	f008 fca7 	bl	8009010 <SUBGRF_SetBufferBaseAddress>
			SUBGRF_SetPayload(rxData, PayLoadLength);
 80006c2:	2120      	movs	r1, #32
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <main+0x120>)
 80006c6:	f007 fe89 	bl	80083dc <SUBGRF_SetPayload>
			SUBGRF_SetPacketParams(&pkt_params);
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f008 fc00 	bl	8008ed4 <SUBGRF_SetPacketParams>
			SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00,
 80006d4:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <main+0x124>)
 80006d6:	463b      	mov	r3, r7
 80006d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80006e0:	463b      	mov	r3, r7
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 febf 	bl	8008466 <SUBGRF_SetSyncWord>
							0x00, 0x00, 0x00 });
			SUBGRF_SetWhiteningSeed(0x01FF);
 80006e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80006ec:	f007 ff0a 	bl	8008504 <SUBGRF_SetWhiteningSeed>
			SUBGRF_SetRfFrequency(FREQ_433_MHZ);
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <main+0x128>)
 80006f2:	f008 f9e3 	bl	8008abc <SUBGRF_SetRfFrequency>
			SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80006f6:	2301      	movs	r3, #1
 80006f8:	2200      	movs	r2, #0
 80006fa:	2107      	movs	r1, #7
 80006fc:	2004      	movs	r0, #4
 80006fe:	f008 f95f 	bl	80089c0 <SUBGRF_SetPaConfig>
			SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 8000702:	2206      	movs	r2, #6
 8000704:	2116      	movs	r1, #22
 8000706:	2002      	movs	r0, #2
 8000708:	f008 fa44 	bl	8008b94 <SUBGRF_SetTxParams>
			SUBGRF_SetModulationParams(&mod_params);
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f008 fb0d 	bl	8008d30 <SUBGRF_SetModulationParams>
			SUBGRF_SetDioIrqParams(
 8000716:	2300      	movs	r3, #0
 8000718:	2200      	movs	r2, #0
 800071a:	f240 210f 	movw	r1, #527	; 0x20f
 800071e:	f240 200f 	movw	r0, #527	; 0x20f
 8000722:	f008 f96f 	bl	8008a04 <SUBGRF_SetDioIrqParams>
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
							| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
					IRQ_RADIO_NONE, IRQ_RADIO_NONE);

			SUBGRF_SetRfFrequency(FREQ_433_MHZ);
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <main+0x128>)
 8000728:	f008 f9c8 	bl	8008abc <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_HP, RFSWITCH_RX); /*Set RF switch*/
 800072c:	2100      	movs	r1, #0
 800072e:	2002      	movs	r0, #2
 8000730:	f008 fe0c 	bl	800934c <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8000734:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000738:	f007 ffec 	bl	8008714 <SUBGRF_SetRxBoosted>
		MX_SubGHz_Phy_Process();
 800073c:	e795      	b.n	800066a <main+0x3e>
 800073e:	bf00      	nop
 8000740:	20000428 	.word	0x20000428
 8000744:	20000495 	.word	0x20000495
 8000748:	08000bb5 	.word	0x08000bb5
 800074c:	20000474 	.word	0x20000474
 8000750:	0800a83c 	.word	0x0800a83c
 8000754:	19cf0e40 	.word	0x19cf0e40

08000758 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b09a      	sub	sp, #104	; 0x68
 800075c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2248      	movs	r2, #72	; 0x48
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f009 fbda 	bl	8009f20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xbc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <SystemClock_Config+0xbc>)
 8000788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800078c:	6013      	str	r3, [r2, #0]
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <SystemClock_Config+0xbc>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800079e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ac:	2303      	movs	r3, #3
 80007ae:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007b0:	2310      	movs	r3, #16
 80007b2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 80007b4:	2306      	movs	r3, #6
 80007b6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c2:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007c8:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 ffb6 	bl	8002740 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x86>
		Error_Handler();
 80007da:	f000 fa2d 	bl	8000c38 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 80007de:	234f      	movs	r3, #79	; 0x4f
 80007e0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fb22 	bl	8002e44 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xb2>
		Error_Handler();
 8000806:	f000 fa17 	bl	8000c38 <Error_Handler>
	}
}
 800080a:	bf00      	nop
 800080c:	3768      	adds	r7, #104	; 0x68
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58000400 	.word	0x58000400

08000818 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MX_LPUART1_UART_Init+0x94>)
 8000820:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000862:	f004 f8c9 	bl	80049f8 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 800086c:	f000 f9e4 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000874:	f005 fcfa 	bl	800626c <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800087e:	f000 f9db 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000886:	f005 fd2f 	bl	80062e8 <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000890:	f000 f9d2 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_LPUART1_UART_Init+0x90>)
 8000896:	f005 fcb1 	bl	80061fc <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 80008a0:	f000 f9ca 	bl	8000c38 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000e0 	.word	0x200000e0
 80008ac:	40008000 	.word	0x40008000

080008b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <MX_USART1_UART_Init+0x94>)
 80008b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x90>)
 80008fa:	f004 f87d 	bl	80049f8 <HAL_UART_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000904:	f000 f998 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000908:	2100      	movs	r1, #0
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_USART1_UART_Init+0x90>)
 800090c:	f005 fcae 	bl	800626c <HAL_UARTEx_SetTxFifoThreshold>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000916:	f000 f98f 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800091a:	2100      	movs	r1, #0
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <MX_USART1_UART_Init+0x90>)
 800091e:	f005 fce3 	bl	80062e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000928:	f000 f986 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_USART1_UART_Init+0x90>)
 800092e:	f005 fc65 	bl	80061fc <HAL_UARTEx_DisableFifoMode>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000938:	f000 f97e 	bl	8000c38 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000174 	.word	0x20000174
 8000944:	40013800 	.word	0x40013800

08000948 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART2_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 8000992:	f004 f831 	bl	80049f8 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 800099c:	f000 f94c 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 80009a4:	f005 fc62 	bl	800626c <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80009ae:	f000 f943 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 80009b6:	f005 fc97 	bl	80062e8 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80009c0:	f000 f93a 	bl	8000c38 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART2_UART_Init+0x90>)
 80009c6:	f005 fc19 	bl	80061fc <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80009d0:	f000 f932 	bl	8000c38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000208 	.word	0x20000208
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SUBGHZ_Init+0x20>)
 80009e6:	2210      	movs	r2, #16
 80009e8:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SUBGHZ_Init+0x20>)
 80009ec:	f002 ff9e 	bl	800392c <HAL_SUBGHZ_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 80009f6:	f000 f91f 	bl	8000c38 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000041c 	.word	0x2000041c

08000a04 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <MX_TIM1_Init+0xa4>)
 8000a26:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a2a:	222f      	movs	r2, #47	; 0x2f
 8000a2c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a4e:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a50:	f003 fb8c 	bl	800416c <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000a5a:	f000 f8ed 	bl	8000c38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a6c:	f003 fd39 	bl	80044e2 <HAL_TIM_ConfigClockSource>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x76>
		Error_Handler();
 8000a76:	f000 f8df 	bl	8000c38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_TIM1_Init+0xa0>)
 8000a8c:	f003 ff1a 	bl	80048c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000a96:	f000 f8cf 	bl	8000c38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000428 	.word	0x20000428
 8000aa8:	40012c00 	.word	0x40012c00

08000aac <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f7ff fd8b 	bl	80005cc <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff fd88 	bl	80005cc <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f000 fe3c 	bl	800173e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac6:	200b      	movs	r0, #11
 8000ac8:	f000 fe53 	bl	8001772 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	200c      	movs	r0, #12
 8000ad2:	f000 fe34 	bl	800173e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ad6:	200c      	movs	r0, #12
 8000ad8:	f000 fe4b 	bl	8001772 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	200d      	movs	r0, #13
 8000ae2:	f000 fe2c 	bl	800173e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ae6:	200d      	movs	r0, #13
 8000ae8:	f000 fe43 	bl	8001772 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	200e      	movs	r0, #14
 8000af2:	f000 fe24 	bl	800173e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000af6:	200e      	movs	r0, #14
 8000af8:	f000 fe3b 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff fd71 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff fd6e 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	2004      	movs	r0, #4
 8000b22:	f7ff fd6b 	bl	80005fc <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000b2c:	481f      	ldr	r0, [pc, #124]	; (8000bac <MX_GPIO_Init+0xac>)
 8000b2e:	f001 fb1d 	bl	800216c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000b32:	2200      	movs	r2, #0
 8000b34:	2138      	movs	r1, #56	; 0x38
 8000b36:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <MX_GPIO_Init+0xb0>)
 8000b38:	f001 fb18 	bl	800216c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000b3c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000b40:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4816      	ldr	r0, [pc, #88]	; (8000bac <MX_GPIO_Init+0xac>)
 8000b54:	f001 f9aa 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000b58:	2338      	movs	r3, #56	; 0x38
 8000b5a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <MX_GPIO_Init+0xb0>)
 8000b6e:	f001 f99d 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000b72:	2303      	movs	r3, #3
 8000b74:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f001 f990 	bl	8001eac <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000b8c:	2340      	movs	r3, #64	; 0x40
 8000b8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b94:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_GPIO_Init+0xb0>)
 8000ba0:	f001 f984 	bl	8001eac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]

	if (radioIrq == IRQ_RX_DONE) {
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d126      	bne.n	8000c12 <DioIrqHndlr+0x5e>
		SUBGRF_GetPayload(rxData, &plen, PayLoadLength);
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	4915      	ldr	r1, [pc, #84]	; (8000c1c <DioIrqHndlr+0x68>)
 8000bc8:	4815      	ldr	r0, [pc, #84]	; (8000c20 <DioIrqHndlr+0x6c>)
 8000bca:	f007 fc17 	bl	80083fc <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8000bce:	f008 fa36 	bl	800903e <SUBGRF_GetRssiInst>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <DioIrqHndlr+0x70>)
 8000bd8:	701a      	strb	r2, [r3, #0]
		myDebug("\n\r LoRa Received Successful from SSOC_1:  \r");
 8000bda:	4813      	ldr	r0, [pc, #76]	; (8000c28 <DioIrqHndlr+0x74>)
 8000bdc:	f7ff fc9e 	bl	800051c <myDebug>
		for (int i = 0; i < 32; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e00a      	b.n	8000bfc <DioIrqHndlr+0x48>
			myDebug(" %02x", rxData[i]);
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <DioIrqHndlr+0x6c>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <DioIrqHndlr+0x78>)
 8000bf2:	f7ff fc93 	bl	800051c <myDebug>
		for (int i = 0; i < 32; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	ddf1      	ble.n	8000be6 <DioIrqHndlr+0x32>
		}
		myDebug("\n\n");
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <DioIrqHndlr+0x7c>)
 8000c04:	f7ff fc8a 	bl	800051c <myDebug>

		HAL_UART_Receive_DMA(&hlpuart1, rxData, PayLoadLength);
 8000c08:	2220      	movs	r2, #32
 8000c0a:	4905      	ldr	r1, [pc, #20]	; (8000c20 <DioIrqHndlr+0x6c>)
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <DioIrqHndlr+0x80>)
 8000c0e:	f004 f88d 	bl	8004d2c <HAL_UART_Receive_DMA>

	}
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000474 	.word	0x20000474
 8000c24:	20000494 	.word	0x20000494
 8000c28:	0800a844 	.word	0x0800a844
 8000c2c:	0800a870 	.word	0x0800a870
 8000c30:	0800a878 	.word	0x0800a878
 8000c34:	200000e0 	.word	0x200000e0

08000c38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <WAIT_FOR_HANDSHAKE>:
#include "main.h"
#include "com_debug.h"

uint8_t HANDSHAKE_SUCCESS = 0;

void WAIT_FOR_HANDSHAKE() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
	uint8_t MainCMDHs[5];
	if (HAL_UART_Receive(&hlpuart1, MainCMDHs, 5, 7000) == HAL_OK) {
 8000c4a:	1d39      	adds	r1, r7, #4
 8000c4c:	f641 3358 	movw	r3, #7000	; 0x1b58
 8000c50:	2205      	movs	r2, #5
 8000c52:	482b      	ldr	r0, [pc, #172]	; (8000d00 <WAIT_FOR_HANDSHAKE+0xbc>)
 8000c54:	f003 ffa6 	bl	8004ba4 <HAL_UART_Receive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d142      	bne.n	8000ce4 <WAIT_FOR_HANDSHAKE+0xa0>
		myDebug("--> HandShake command received: 0x");
 8000c5e:	4829      	ldr	r0, [pc, #164]	; (8000d04 <WAIT_FOR_HANDSHAKE+0xc0>)
 8000c60:	f7ff fc5c 	bl	800051c <myDebug>
		for (int i = 0; i < 5; i++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e00a      	b.n	8000c80 <WAIT_FOR_HANDSHAKE+0x3c>
			myDebug("%x", MainCMDHs[i]);
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <WAIT_FOR_HANDSHAKE+0xc4>)
 8000c76:	f7ff fc51 	bl	800051c <myDebug>
		for (int i = 0; i < 5; i++) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	ddf1      	ble.n	8000c6a <WAIT_FOR_HANDSHAKE+0x26>
		}
		myDebug("\n");
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <WAIT_FOR_HANDSHAKE+0xc8>)
 8000c88:	f7ff fc48 	bl	800051c <myDebug>
		delay_us(1);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fc7f 	bl	8000590 <delay_us>
		if (MainCMDHs[0] == 0x04 && MainCMDHs[4] == 0xFE) {
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d119      	bne.n	8000ccc <WAIT_FOR_HANDSHAKE+0x88>
 8000c98:	7a3b      	ldrb	r3, [r7, #8]
 8000c9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c9c:	d116      	bne.n	8000ccc <WAIT_FOR_HANDSHAKE+0x88>
			myDebug("--> Command Acknowledged!\n");
 8000c9e:	481c      	ldr	r0, [pc, #112]	; (8000d10 <WAIT_FOR_HANDSHAKE+0xcc>)
 8000ca0:	f7ff fc3c 	bl	800051c <myDebug>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 2000) == HAL_OK) {
 8000ca4:	1d39      	adds	r1, r7, #4
 8000ca6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000caa:	2205      	movs	r2, #5
 8000cac:	4814      	ldr	r0, [pc, #80]	; (8000d00 <WAIT_FOR_HANDSHAKE+0xbc>)
 8000cae:	f003 fef3 	bl	8004a98 <HAL_UART_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d11e      	bne.n	8000cf6 <WAIT_FOR_HANDSHAKE+0xb2>
				myDebug("--> HandShake ACK sent to MAIN\n");
 8000cb8:	4816      	ldr	r0, [pc, #88]	; (8000d14 <WAIT_FOR_HANDSHAKE+0xd0>)
 8000cba:	f7ff fc2f 	bl	800051c <myDebug>
				HANDSHAKE_SUCCESS = 1;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <WAIT_FOR_HANDSHAKE+0xd4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
				delay_us(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fc63 	bl	8000590 <delay_us>
			if (HAL_UART_Transmit(&hlpuart1, MainCMDHs, 5, 2000) == HAL_OK) {
 8000cca:	e014      	b.n	8000cf6 <WAIT_FOR_HANDSHAKE+0xb2>
			}
		} else {
			myDebug("*** Unknown handshake command received\n");
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <WAIT_FOR_HANDSHAKE+0xd8>)
 8000cce:	f7ff fc25 	bl	800051c <myDebug>
			HANDSHAKE_SUCCESS = 0;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <WAIT_FOR_HANDSHAKE+0xd4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
			delay_us(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fc59 	bl	8000590 <delay_us>
			WAIT_FOR_HANDSHAKE();
 8000cde:	f7ff ffb1 	bl	8000c44 <WAIT_FOR_HANDSHAKE>
	} else {
		delay_us(1);
		HANDSHAKE_SUCCESS = 0;
		WAIT_FOR_HANDSHAKE();
	}
}
 8000ce2:	e008      	b.n	8000cf6 <WAIT_FOR_HANDSHAKE+0xb2>
		delay_us(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fc53 	bl	8000590 <delay_us>
		HANDSHAKE_SUCCESS = 0;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <WAIT_FOR_HANDSHAKE+0xd4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
		WAIT_FOR_HANDSHAKE();
 8000cf0:	f7ff ffa8 	bl	8000c44 <WAIT_FOR_HANDSHAKE>
}
 8000cf4:	e7ff      	b.n	8000cf6 <WAIT_FOR_HANDSHAKE+0xb2>
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000e0 	.word	0x200000e0
 8000d04:	0800a87c 	.word	0x0800a87c
 8000d08:	0800a8a0 	.word	0x0800a8a0
 8000d0c:	0800a8a4 	.word	0x0800a8a4
 8000d10:	0800a8a8 	.word	0x0800a8a8
 8000d14:	0800a8c4 	.word	0x0800a8c4
 8000d18:	20000495 	.word	0x20000495
 8000d1c:	0800a8e4 	.word	0x0800a8e4

08000d20 <LL_AHB2_GRP1_EnableClock>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d44:	68fb      	ldr	r3, [r7, #12]
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e04:	68fb      	ldr	r3, [r7, #12]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b096      	sub	sp, #88	; 0x58
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 f86f 	bl	8009f20 <memset>
  if(huart->Instance==LPUART1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a66      	ldr	r2, [pc, #408]	; (8000fe0 <HAL_UART_MspInit+0x1c4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d12c      	bne.n	8000ea6 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 fbb3 	bl	80035c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f7ff fee8 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff ff89 	bl	8000d80 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff ff56 	bl	8000d20 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000e74:	2303      	movs	r3, #3
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e84:	2308      	movs	r3, #8
 8000e86:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4855      	ldr	r0, [pc, #340]	; (8000fe4 <HAL_UART_MspInit+0x1c8>)
 8000e90:	f001 f80c 	bl	8001eac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2026      	movs	r0, #38	; 0x26
 8000e9a:	f000 fc50 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e9e:	2026      	movs	r0, #38	; 0x26
 8000ea0:	f000 fc67 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea4:	e144      	b.n	8001130 <HAL_UART_MspInit+0x314>
  else if(huart->Instance==USART1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_UART_MspInit+0x1cc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	f040 80a5 	bne.w	8000ffc <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eb6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000eba:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fb7f 	bl	80035c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0xb4>
      Error_Handler();
 8000ecc:	f7ff feb4 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed4:	f7ff ff6c 	bl	8000db0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff21 	bl	8000d20 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ede:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 ffd5 	bl	8001eac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f04:	4a3a      	ldr	r2, [pc, #232]	; (8000ff0 <HAL_UART_MspInit+0x1d4>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f0a:	2212      	movs	r2, #18
 8000f0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0e:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f10:	2210      	movs	r2, #16
 8000f12:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4b35      	ldr	r3, [pc, #212]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4b34      	ldr	r3, [pc, #208]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f38:	482c      	ldr	r0, [pc, #176]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f3a:	f000 fc35 	bl	80017a8 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000f44:	f7ff fe78 	bl	8000c38 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4828      	ldr	r0, [pc, #160]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f4c:	f000 fed6 	bl	8001cfc <HAL_DMA_ConfigChannelAttributes>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8000f56:	f7ff fe6f 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f5e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_UART_MspInit+0x1d0>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f68:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <HAL_UART_MspInit+0x1dc>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f6e:	2211      	movs	r2, #17
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f9c:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000f9e:	f000 fc03 	bl	80017a8 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000fa8:	f7ff fe46 	bl	8000c38 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000fac:	2110      	movs	r1, #16
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000fb0:	f000 fea4 	bl	8001cfc <HAL_DMA_ConfigChannelAttributes>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8000fba:	f7ff fe3d 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_UART_MspInit+0x1d8>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2024      	movs	r0, #36	; 0x24
 8000fd2:	f000 fbb4 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd6:	2024      	movs	r0, #36	; 0x24
 8000fd8:	f000 fbcb 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 8000fdc:	e0a8      	b.n	8001130 <HAL_UART_MspInit+0x314>
 8000fde:	bf00      	nop
 8000fe0:	40008000 	.word	0x40008000
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	2000029c 	.word	0x2000029c
 8000ff0:	40020008 	.word	0x40020008
 8000ff4:	200002fc 	.word	0x200002fc
 8000ff8:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a4d      	ldr	r2, [pc, #308]	; (8001138 <HAL_UART_MspInit+0x31c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	f040 8094 	bne.w	8001130 <HAL_UART_MspInit+0x314>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001008:	2302      	movs	r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800100c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001010:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fad4 	bl	80035c4 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8001022:	f7ff fe09 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800102a:	f7ff fe91 	bl	8000d50 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2001      	movs	r0, #1
 8001030:	f7ff fe76 	bl	8000d20 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001034:	230c      	movs	r3, #12
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f000 ff2b 	bl	8001eac <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <HAL_UART_MspInit+0x320>)
 8001058:	4a39      	ldr	r2, [pc, #228]	; (8001140 <HAL_UART_MspInit+0x324>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_UART_MspInit+0x320>)
 800105e:	2214      	movs	r2, #20
 8001060:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_UART_MspInit+0x320>)
 8001064:	2210      	movs	r2, #16
 8001066:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <HAL_UART_MspInit+0x320>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <HAL_UART_MspInit+0x320>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <HAL_UART_MspInit+0x320>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_UART_MspInit+0x320>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_UART_MspInit+0x320>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_UART_MspInit+0x320>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800108c:	482b      	ldr	r0, [pc, #172]	; (800113c <HAL_UART_MspInit+0x320>)
 800108e:	f000 fb8b 	bl	80017a8 <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x280>
      Error_Handler();
 8001098:	f7ff fdce 	bl	8000c38 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800109c:	2110      	movs	r1, #16
 800109e:	4827      	ldr	r0, [pc, #156]	; (800113c <HAL_UART_MspInit+0x320>)
 80010a0:	f000 fe2c 	bl	8001cfc <HAL_DMA_ConfigChannelAttributes>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x292>
      Error_Handler();
 80010aa:	f7ff fdc5 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_UART_MspInit+0x320>)
 80010b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <HAL_UART_MspInit+0x320>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel4;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <HAL_UART_MspInit+0x32c>)
 80010be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010c2:	2213      	movs	r2, #19
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x328>)
 80010f2:	f000 fb59 	bl	80017a8 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 80010fc:	f7ff fd9c 	bl	8000c38 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001100:	2110      	movs	r1, #16
 8001102:	4810      	ldr	r0, [pc, #64]	; (8001144 <HAL_UART_MspInit+0x328>)
 8001104:	f000 fdfa 	bl	8001cfc <HAL_DMA_ConfigChannelAttributes>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800110e:	f7ff fd93 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_UART_MspInit+0x328>)
 8001116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_UART_MspInit+0x328>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2025      	movs	r0, #37	; 0x25
 8001126:	f000 fb0a 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800112a:	2025      	movs	r0, #37	; 0x25
 800112c:	f000 fb21 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 8001130:	bf00      	nop
 8001132:	3758      	adds	r7, #88	; 0x58
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	2000035c 	.word	0x2000035c
 8001140:	40020030 	.word	0x40020030
 8001144:	200003bc 	.word	0x200003bc
 8001148:	40020044 	.word	0x40020044

0800114c <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fe43 	bl	8000de0 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f000 faed 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001164:	2032      	movs	r0, #50	; 0x32
 8001166:	f000 fb04 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x34>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10b      	bne.n	800119e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001186:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800118a:	f7ff fe11 	bl	8000db0 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2018      	movs	r0, #24
 8001194:	f000 fad3 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001198:	2018      	movs	r0, #24
 800119a:	f000 faea 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40012c00 	.word	0x40012c00

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f9bb 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA1_Channel1_IRQHandler+0x10>)
 8001202:	f000 fcb5 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000029c 	.word	0x2000029c

08001210 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <DMA1_Channel2_IRQHandler+0x10>)
 8001216:	f000 fcab 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002fc 	.word	0x200002fc

08001224 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <DMA1_Channel3_IRQHandler+0x10>)
 800122a:	f000 fca1 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000035c 	.word	0x2000035c

08001238 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <DMA1_Channel4_IRQHandler+0x10>)
 800123e:	f000 fc97 	bl	8001b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200003bc 	.word	0x200003bc

0800124c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM1_UP_IRQHandler+0x10>)
 8001252:	f003 f827 	bl	80042a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000428 	.word	0x20000428

08001260 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USART1_IRQHandler+0x10>)
 8001266:	f003 fdad 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000174 	.word	0x20000174

08001274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USART2_IRQHandler+0x10>)
 800127a:	f003 fda3 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000208 	.word	0x20000208

08001288 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <LPUART1_IRQHandler+0x10>)
 800128e:	f003 fd99 	bl	8004dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000e0 	.word	0x200000e0

0800129c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <SUBGHZ_Radio_IRQHandler+0x10>)
 80012a2:	f002 fdc5 	bl	8003e30 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000041c 	.word	0x2000041c

080012b0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_GetTick+0x24>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80012ce:	f000 f892 	bl	80013f6 <TIMER_IF_GetTimerValue>
 80012d2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80012d4:	687b      	ldr	r3, [r7, #4]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000496 	.word	0x20000496

080012e4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f8af 	bl	8001452 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f008 fe00 	bl	8009f30 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20010000 	.word	0x20010000
 800135c:	00000400 	.word	0x00000400
 8001360:	20000498 	.word	0x20000498
 8001364:	200007b0 	.word	0x200007b0

08001368 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800137e:	79fb      	ldrb	r3, [r7, #7]
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <TIMER_IF_SetTimerContext+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	2000049c 	.word	0x2000049c

080013cc <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <TIMER_IF_GetTimerContext+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	2000049c 	.word	0x2000049c

080013e0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001416:	687b      	ldr	r3, [r7, #4]
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001466:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001468:	f7ff ff7e 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001492:	f008 fd53 	bl	8009f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff f8c9 	bl	800062c <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   r0, =_estack
 800149c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014a8:	0800abc4 	.word	0x0800abc4
  ldr r2, =_sbss
 80014ac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014b0:	200007ac 	.word	0x200007ac

080014b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 f930 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014c8:	f001 fe9e 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_Init+0x3c>)
 80014d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f810 	bl	80014f8 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	e001      	b.n	80014e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e4:	f7ff fc94 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_InitTick+0x6c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d024      	beq.n	8001556 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800150c:	f001 fe7c 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8001510:	4602      	mov	r2, r0
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_InitTick+0x6c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001520:	fbb2 f3f3 	udiv	r3, r2, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f932 	bl	800178e <HAL_SYSTICK_Config>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d809      	bhi.n	800154a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001536:	2200      	movs	r2, #0
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153e:	f000 f8fe 	bl	800173e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_InitTick+0x70>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e007      	b.n	800155a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e004      	b.n	800155a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e001      	b.n	800155a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000008 	.word	0x20000008

0800156c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_IncTick+0x1c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x20>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x20>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	2000000c 	.word	0x2000000c
 800158c:	200004a0 	.word	0x200004a0

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <__NVIC_EnableIRQ+0x34>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff2d 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff44 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff92 	bl	8001680 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff61 	bl	800162c <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff37 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa4 	bl	80016e4 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e08e      	b.n	80018d8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_DMA_Init+0x138>)
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d80f      	bhi.n	80017e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <HAL_DMA_Init+0x13c>)
 80017ce:	4413      	add	r3, r2
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_DMA_Init+0x140>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	009a      	lsls	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a42      	ldr	r2, [pc, #264]	; (80018ec <HAL_DMA_Init+0x144>)
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
 80017e4:	e00e      	b.n	8001804 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b40      	ldr	r3, [pc, #256]	; (80018f0 <HAL_DMA_Init+0x148>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <HAL_DMA_Init+0x140>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	009a      	lsls	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_DMA_Init+0x14c>)
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800181a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fabc 	bl	8001dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001864:	d102      	bne.n	800186c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001874:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001878:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001882:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d010      	beq.n	80018ae <HAL_DMA_Init+0x106>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d80c      	bhi.n	80018ae <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fae5 	bl	8001e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	e008      	b.n	80018c0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020407 	.word	0x40020407
 80018e4:	bffdfff8 	.word	0xbffdfff8
 80018e8:	cccccccd 	.word	0xcccccccd
 80018ec:	40020000 	.word	0x40020000
 80018f0:	bffdfbf8 	.word	0xbffdfbf8
 80018f4:	40020400 	.word	0x40020400

080018f8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Start_IT+0x20>
 8001914:	2302      	movs	r3, #2
 8001916:	e069      	b.n	80019ec <HAL_DMA_Start_IT+0xf4>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d155      	bne.n	80019d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 fa02 	bl	8001d5a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 020e 	orr.w	r2, r2, #14
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e00f      	b.n	8001990 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0204 	bic.w	r2, r2, #4
 800197e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 020a 	orr.w	r2, r2, #10
 800198e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e008      	b.n	80019ea <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e04f      	b.n	8001aa6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d008      	beq.n	8001a24 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e040      	b.n	8001aa6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 020e 	bic.w	r2, r2, #14
 8001a32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f003 021c 	and.w	r2, r3, #28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00c      	beq.n	8001a94 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e047      	b.n	8001b64 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020e 	bic.w	r2, r2, #14
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f003 021c 	and.w	r2, r3, #28
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
    }
  }
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	f003 031c 	and.w	r3, r3, #28
 8001b90:	2204      	movs	r2, #4
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d027      	beq.n	8001bec <HAL_DMA_IRQHandler+0x7c>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d022      	beq.n	8001bec <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0204 	bic.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f003 021c 	and.w	r2, r3, #28
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8081 	beq.w	8001ce4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001bea:	e07b      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f003 031c 	and.w	r3, r3, #28
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d03d      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x10c>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d038      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020a 	bic.w	r2, r2, #10
 8001c26:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_DMA_IRQHandler+0x180>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d909      	bls.n	8001c50 <HAL_DMA_IRQHandler+0xe0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f003 031c 	and.w	r3, r3, #28
 8001c44:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_DMA_IRQHandler+0x184>)
 8001c46:	2102      	movs	r1, #2
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	6053      	str	r3, [r2, #4]
 8001c4e:	e008      	b.n	8001c62 <HAL_DMA_IRQHandler+0xf2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f003 031c 	and.w	r3, r3, #28
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_DMA_IRQHandler+0x188>)
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d038      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c7a:	e033      	b.n	8001ce4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 031c 	and.w	r3, r3, #28
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d02a      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x176>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d025      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020e 	bic.w	r2, r2, #14
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f003 021c 	and.w	r2, r3, #28
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
}
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40020080 	.word	0x40020080
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	72fb      	strb	r3, [r7, #11]
    return status;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	e01b      	b.n	8001d50 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e003      	b.n	8001d46 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d44:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	601a      	str	r2, [r3, #0]

  return status;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d70:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d82:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f003 021c 	and.w	r2, r3, #28
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d108      	bne.n	8001dba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001db8:	e007      	b.n	8001dca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	60da      	str	r2, [r3, #12]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d813      	bhi.n	8001e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001df4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	3b08      	subs	r3, #8
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	e011      	b.n	8001e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	009a      	lsls	r2, r3, #2
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3b08      	subs	r3, #8
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	3307      	adds	r3, #7
 8001e32:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001e38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2201      	movs	r2, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40020407 	.word	0x40020407
 8001e58:	cccccccd 	.word	0xcccccccd
 8001e5c:	4002081c 	.word	0x4002081c
 8001e60:	40020880 	.word	0x40020880

08001e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e74:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	461a      	mov	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	1000823f 	.word	0x1000823f
 8001ea8:	40020940 	.word	0x40020940

08001eac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	e140      	b.n	800213e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8132 	beq.w	8002138 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d005      	beq.n	8001eec <HAL_GPIO_Init+0x40>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d017      	beq.n	8001f8a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d123      	bne.n	8001fde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	6939      	ldr	r1, [r7, #16]
 8001fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0203 	and.w	r2, r3, #3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 808c 	beq.w	8002138 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002020:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_GPIO_Init+0x2b0>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1bc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a44      	ldr	r2, [pc, #272]	; (8002160 <HAL_GPIO_Init+0x2b4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1b8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_GPIO_Init+0x2b8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1b4>
 800205c:	2302      	movs	r3, #2
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1be>
 8002060:	2307      	movs	r3, #7
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1be>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1be>
 8002068:	2300      	movs	r3, #0
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207a:	4938      	ldr	r1, [pc, #224]	; (800215c <HAL_GPIO_Init+0x2b0>)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d6:	4a24      	ldr	r2, [pc, #144]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 80020de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 800210c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002110:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_GPIO_Init+0x2bc>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f aeb7 	bne.w	8001ebc <HAL_GPIO_Init+0x10>
  }
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	58000800 	.word	0x58000800

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002188:	e002      	b.n	8002190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	58000400 	.word	0x58000400

080021b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_PWREx_GetVoltageRange+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	58000400 	.word	0x58000400

080021d0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e0:	d101      	bne.n	80021e6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	58000400 	.word	0x58000400

080021f4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800223e:	d101      	bne.n	8002244 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002298:	d101      	bne.n	800229e <LL_RCC_HSE_IsReady+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_RCC_HSE_IsReady+0x1a>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_HSI_IsReady+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_HSI_IsReady+0x1a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800230a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b02      	cmp	r3, #2
 800233c:	d101      	bne.n	8002342 <LL_RCC_LSE_IsReady+0x18>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <LL_RCC_LSE_IsReady+0x1a>
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d101      	bne.n	80023a4 <LL_RCC_LSI_IsReady+0x18>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <LL_RCC_LSI_IsReady+0x1a>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6013      	str	r3, [r2, #0]
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6013      	str	r3, [r2, #0]
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d101      	bne.n	80023fc <LL_RCC_MSI_IsReady+0x16>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_RCC_MSI_IsReady+0x18>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d101      	bne.n	800241c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800242a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002518:	f023 020f 	bic.w	r2, r3, #15
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4313      	orrs	r3, r2
 800254e:	608b      	str	r3, [r1, #8]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800256c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002626:	d101      	bne.n	800262c <LL_RCC_PLL_IsReady+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_RCC_PLL_IsReady+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0303 	and.w	r3, r3, #3
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d101      	bne.n	80026a8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026c6:	d101      	bne.n	80026cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ea:	d101      	bne.n	80026f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800270c:	d101      	bne.n	8002712 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800272e:	d101      	bne.n	8002734 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
	...

08002740 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e36f      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002752:	f7ff fea6 	bl	80024a2 <LL_RCC_GetSysClkSource>
 8002756:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002758:	f7ff ff8f 	bl	800267a <LL_RCC_PLL_GetMainSource>
 800275c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 80c4 	beq.w	80028f4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x3e>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d176      	bne.n	8002866 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d173      	bne.n	8002866 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e353      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x68>
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a6:	e006      	b.n	80027b6 <HAL_RCC_OscConfig+0x76>
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d222      	bcs.n	8002800 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fd5a 	bl	8003278 <RCC_SetFlashLatencyFromMSIRange>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e331      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fe2b 	bl	8002454 <LL_RCC_MSI_SetCalibTrimming>
 80027fe:	e021      	b.n	8002844 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fe12 	bl	8002454 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd1f 	bl	8003278 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e2f6      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002844:	f000 fce0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8002848:	4603      	mov	r3, r0
 800284a:	4aa7      	ldr	r2, [pc, #668]	; (8002ae8 <HAL_RCC_OscConfig+0x3a8>)
 800284c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800284e:	4ba7      	ldr	r3, [pc, #668]	; (8002aec <HAL_RCC_OscConfig+0x3ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fe50 	bl	80014f8 <HAL_InitTick>
 8002858:	4603      	mov	r3, r0
 800285a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d047      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	e2e5      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d02c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800286e:	f7ff fd9e 	bl	80023ae <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002872:	f7fe fd23 	bl	80012bc <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800287a:	f7fe fd1f 	bl	80012bc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e2d2      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800288c:	f7ff fdab 	bl	80023e6 <LL_RCC_MSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f1      	beq.n	800287a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fdc7 	bl	8002454 <LL_RCC_MSI_SetCalibTrimming>
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028c8:	f7ff fd7f 	bl	80023ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fcf6 	bl	80012bc <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d4:	f7fe fcf2 	bl	80012bc <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e2a5      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80028e6:	f7ff fd7e 	bl	80023e6 <LL_RCC_MSI_IsReady>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f1      	bne.n	80028d4 <HAL_RCC_OscConfig+0x194>
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028f2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d058      	beq.n	80029b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x1d2>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d108      	bne.n	800291e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d105      	bne.n	800291e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d14b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e289      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x204>
 800293e:	f7ff fc86 	bl	800224e <LL_RCC_HSE_Enable>
 8002942:	e00d      	b.n	8002960 <HAL_RCC_OscConfig+0x220>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800294c:	d104      	bne.n	8002958 <HAL_RCC_OscConfig+0x218>
 800294e:	f7ff fc51 	bl	80021f4 <LL_RCC_HSE_EnableTcxo>
 8002952:	f7ff fc7c 	bl	800224e <LL_RCC_HSE_Enable>
 8002956:	e003      	b.n	8002960 <HAL_RCC_OscConfig+0x220>
 8002958:	f7ff fc87 	bl	800226a <LL_RCC_HSE_Disable>
 800295c:	f7ff fc58 	bl	8002210 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe fca8 	bl	80012bc <HAL_GetTick>
 800296c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fca4 	bl	80012bc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e257      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002982:	f7ff fc80 	bl	8002286 <LL_RCC_HSE_IsReady>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f1      	beq.n	8002970 <HAL_RCC_OscConfig+0x230>
 800298c:	e011      	b.n	80029b2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fc95 	bl	80012bc <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002996:	f7fe fc91 	bl	80012bc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e244      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80029a8:	f7ff fc6d 	bl	8002286 <LL_RCC_HSE_IsReady>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f1      	bne.n	8002996 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d046      	beq.n	8002a4c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x290>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d10e      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e22a      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fc8e 	bl	8002302 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029e6:	e031      	b.n	8002a4c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d019      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	f7ff fc5a 	bl	80022a8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc62 	bl	80012bc <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fc5e 	bl	80012bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e211      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a0e:	f7ff fc67 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f1      	beq.n	80029fc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fc70 	bl	8002302 <LL_RCC_HSI_SetCalibTrimming>
 8002a22:	e013      	b.n	8002a4c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a24:	f7ff fc4e 	bl	80022c4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fc48 	bl	80012bc <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a30:	f7fe fc44 	bl	80012bc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1f7      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a42:	f7ff fc4d 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f1      	bne.n	8002a30 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d06e      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d056      	beq.n	8002b0e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a68:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d031      	beq.n	8002adc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e1d0      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d013      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a9a:	f7ff fc67 	bl	800236c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9e:	f7fe fc0d 	bl	80012bc <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fc09 	bl	80012bc <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1bc      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ab8:	f7ff fc68 	bl	800238c <LL_RCC_LSI_IsReady>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f1      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aca:	f023 0210 	bic.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002adc:	f7ff fc36 	bl	800234c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fbec 	bl	80012bc <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ae6:	e00c      	b.n	8002b02 <HAL_RCC_OscConfig+0x3c2>
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fbe4 	bl	80012bc <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e197      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002b02:	f7ff fc43 	bl	800238c <LL_RCC_LSI_IsReady>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f1      	beq.n	8002af0 <HAL_RCC_OscConfig+0x3b0>
 8002b0c:	e013      	b.n	8002b36 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0e:	f7ff fc2d 	bl	800236c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b12:	f7fe fbd3 	bl	80012bc <HAL_GetTick>
 8002b16:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fbcf 	bl	80012bc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b11      	cmp	r3, #17
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e182      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002b2c:	f7ff fc2e 	bl	800238c <LL_RCC_LSI_IsReady>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f1      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80d8 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b44:	f7ff fb44 	bl	80021d0 <LL_PWR_IsEnabledBkUpAccess>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d113      	bne.n	8002b76 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b4e:	f7ff fb25 	bl	800219c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fbb3 	bl	80012bc <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5a:	f7fe fbaf 	bl	80012bc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e162      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b6c:	f7ff fb30 	bl	80021d0 <LL_PWR_IsEnabledBkUpAccess>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f1      	beq.n	8002b5a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d07b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b85      	cmp	r3, #133	; 0x85
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fb8b 	bl	80012bc <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fb7d 	bl	80012bc <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e12e      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002bd4:	f7ff fba9 	bl	800232a <LL_RCC_LSE_IsReady>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ef      	beq.n	8002bbe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b81      	cmp	r3, #129	; 0x81
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b85      	cmp	r3, #133	; 0x85
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fb65 	bl	80012bc <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe fb57 	bl	80012bc <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e108      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ec      	beq.n	8002c0a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002c30:	e060      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe fb43 	bl	80012bc <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe fb35 	bl	80012bc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0e6      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ec      	bne.n	8002c4e <HAL_RCC_OscConfig+0x50e>
 8002c74:	e03e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fb21 	bl	80012bc <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fb13 	bl	80012bc <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0c4      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ec      	bne.n	8002c92 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fb00 	bl	80012bc <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd4:	f7fe faf2 	bl	80012bc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0a3      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cea:	f7ff fb1e 	bl	800232a <LL_RCC_LSE_IsReady>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8099 	beq.w	8002e30 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d06c      	beq.n	8002dde <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d14b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	f7ff fc74 	bl	80025f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fad4 	bl	80012bc <HAL_GetTick>
 8002d14:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fe fad0 	bl	80012bc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b0a      	cmp	r3, #10
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e083      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d2a:	f7ff fc73 	bl	8002614 <LL_RCC_PLL_IsReady>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f1      	bne.n	8002d18 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x6fc>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d4c:	0212      	lsls	r2, r2, #8
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d60:	430a      	orrs	r2, r1
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6a:	f7ff fc37 	bl	80025dc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fa9d 	bl	80012bc <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fa99 	bl	80012bc <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b0a      	cmp	r3, #10
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e04c      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d98:	f7ff fc3c 	bl	8002614 <LL_RCC_PLL_IsReady>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f1      	beq.n	8002d86 <HAL_RCC_OscConfig+0x646>
 8002da2:	e045      	b.n	8002e30 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	f7ff fc28 	bl	80025f8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa88 	bl	80012bc <HAL_GetTick>
 8002dac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fa84 	bl	80012bc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e037      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002dc2:	f7ff fc27 	bl	8002614 <LL_RCC_PLL_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f1      	bne.n	8002db0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCC_OscConfig+0x700>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
 8002ddc:	e028      	b.n	8002e30 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e023      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d115      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d10e      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	11c1808c 	.word	0x11c1808c
 8002e40:	eefefffc 	.word	0xeefefffc

08002e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e12c      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b98      	ldr	r3, [pc, #608]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d91b      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b95      	ldr	r3, [pc, #596]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	4993      	ldr	r1, [pc, #588]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fa21 	bl	80012bc <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e7e:	f7fe fa1d 	bl	80012bc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e110      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b8a      	ldr	r3, [pc, #552]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d1ef      	bne.n	8002e7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fb02 	bl	80024b8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fa02 	bl	80012bc <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ebc:	f7fe f9fe 	bl	80012bc <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e0f1      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002ece:	f7ff fbdf 	bl	8002690 <LL_RCC_IsActiveFlag_HPRE>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f1      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff faf8 	bl	80024de <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eee:	f7fe f9e5 	bl	80012bc <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ef6:	f7fe f9e1 	bl	80012bc <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0d4      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f08:	f7ff fbd3 	bl	80026b2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f1      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff faf0 	bl	8002508 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f9c8 	bl	80012bc <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f30:	f7fe f9c4 	bl	80012bc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e0b7      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f42:	f7ff fbc8 	bl	80026d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f1      	beq.n	8002f30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fae9 	bl	8002534 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f62:	f7fe f9ab 	bl	80012bc <HAL_GetTick>
 8002f66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f6a:	f7fe f9a7 	bl	80012bc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e09a      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002f7c:	f7ff fbbd 	bl	80026fa <LL_RCC_IsActiveFlag_PPRE1>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f1      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fade 	bl	800255a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f9e:	f7fe f98d 	bl	80012bc <HAL_GetTick>
 8002fa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fa6:	f7fe f989 	bl	80012bc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e07c      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002fb8:	f7ff fbb0 	bl	800271c <LL_RCC_IsActiveFlag_PPRE2>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f1      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d043      	beq.n	8003056 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002fd6:	f7ff f956 	bl	8002286 <LL_RCC_HSE_IsReady>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11e      	bne.n	800301e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e066      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002fec:	f7ff fb12 	bl	8002614 <LL_RCC_PLL_IsReady>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d113      	bne.n	800301e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e05b      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003002:	f7ff f9f0 	bl	80023e6 <LL_RCC_MSI_IsReady>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d108      	bne.n	800301e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e050      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003010:	f7ff f966 	bl	80022e0 <LL_RCC_HSI_IsReady>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e049      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fa2a 	bl	800247c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7fe f948 	bl	80012bc <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fe f944 	bl	80012bc <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e035      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	f7ff fa2c 	bl	80024a2 <LL_RCC_GetSysClkSource>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	429a      	cmp	r2, r3
 8003054:	d1ec      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d21b      	bcs.n	800309c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 0207 	bic.w	r2, r3, #7
 800306c:	4913      	ldr	r1, [pc, #76]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe f922 	bl	80012bc <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307a:	e008      	b.n	800308e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800307c:	f7fe f91e 	bl	80012bc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e011      	b.n	80030b2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x278>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d1ef      	bne.n	800307c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800309c:	f000 f8b4 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_RCC_ClockConfig+0x27c>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCC_ClockConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fa24 	bl	80014f8 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	58004000 	.word	0x58004000
 80030c0:	20000004 	.word	0x20000004
 80030c4:	20000008 	.word	0x20000008

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d6:	f7ff f9e4 	bl	80024a2 <LL_RCC_GetSysClkSource>
 80030da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030dc:	f7ff facd 	bl	800267a <LL_RCC_PLL_GetMainSource>
 80030e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d139      	bne.n	8003162 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d136      	bne.n	8003162 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80030f4:	f7ff f987 	bl	8002406 <LL_RCC_MSI_IsEnabledRangeSelect>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d115      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x62>
 80030fe:	f7ff f982 	bl	8002406 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d106      	bne.n	8003116 <HAL_RCC_GetSysClockFreq+0x4e>
 8003108:	f7ff f98d 	bl	8002426 <LL_RCC_MSI_GetRange>
 800310c:	4603      	mov	r3, r0
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	e005      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x5a>
 8003116:	f7ff f991 	bl	800243c <LL_RCC_MSI_GetRangeAfterStandby>
 800311a:	4603      	mov	r3, r0
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a36      	ldr	r2, [pc, #216]	; (80031fc <HAL_RCC_GetSysClockFreq+0x134>)
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	e014      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x8c>
 800312a:	f7ff f96c 	bl	8002406 <LL_RCC_MSI_IsEnabledRangeSelect>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_GetSysClockFreq+0x7a>
 8003134:	f7ff f977 	bl	8002426 <LL_RCC_MSI_GetRange>
 8003138:	4603      	mov	r3, r0
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	e005      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x86>
 8003142:	f7ff f97b 	bl	800243c <LL_RCC_MSI_GetRangeAfterStandby>
 8003146:	4603      	mov	r3, r0
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <HAL_RCC_GetSysClockFreq+0x134>)
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d115      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003160:	e012      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d102      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e00c      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b08      	cmp	r3, #8
 8003172:	d109      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003174:	f7ff f85a 	bl	800222c <LL_RCC_HSE_IsEnabledDiv2>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e001      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003186:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003188:	f7ff f98b 	bl	80024a2 <LL_RCC_GetSysClkSource>
 800318c:	4603      	mov	r3, r0
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d12f      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003192:	f7ff fa72 	bl	800267a <LL_RCC_PLL_GetMainSource>
 8003196:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0xde>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d003      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0xe4>
 80031a4:	e00d      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 80031a8:	60fb      	str	r3, [r7, #12]
        break;
 80031aa:	e00d      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80031ac:	f7ff f83e 	bl	800222c <LL_RCC_HSE_IsEnabledDiv2>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_GetSysClockFreq+0x138>)
 80031b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031be:	60fb      	str	r3, [r7, #12]
        break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	60fb      	str	r3, [r7, #12]
        break;
 80031c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80031c8:	f7ff fa35 	bl	8002636 <LL_RCC_PLL_GetN>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	fb03 f402 	mul.w	r4, r3, r2
 80031d4:	f7ff fa46 	bl	8002664 <LL_RCC_PLL_GetDivider>
 80031d8:	4603      	mov	r3, r0
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	3301      	adds	r3, #1
 80031de:	fbb4 f4f3 	udiv	r4, r4, r3
 80031e2:	f7ff fa34 	bl	800264e <LL_RCC_PLL_GetR>
 80031e6:	4603      	mov	r3, r0
 80031e8:	0f5b      	lsrs	r3, r3, #29
 80031ea:	3301      	adds	r3, #1
 80031ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80031f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80031f2:	697b      	ldr	r3, [r7, #20]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	0800a9ac 	.word	0x0800a9ac
 8003200:	00f42400 	.word	0x00f42400
 8003204:	01e84800 	.word	0x01e84800

08003208 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b598      	push	{r3, r4, r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800320c:	f7ff ff5c 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003210:	4604      	mov	r4, r0
 8003212:	f7ff f9b5 	bl	8002580 <LL_RCC_GetAHBPrescaler>
 8003216:	4603      	mov	r3, r0
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	4a03      	ldr	r2, [pc, #12]	; (800322c <HAL_RCC_GetHCLKFreq+0x24>)
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003224:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd98      	pop	{r3, r4, r7, pc}
 800322c:	0800a94c 	.word	0x0800a94c

08003230 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003230:	b598      	push	{r3, r4, r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003234:	f7ff ffe8 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003238:	4604      	mov	r4, r0
 800323a:	f7ff f9b9 	bl	80025b0 <LL_RCC_GetAPB1Prescaler>
 800323e:	4603      	mov	r3, r0
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	4a03      	ldr	r2, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	fa24 f303 	lsr.w	r3, r4, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd98      	pop	{r3, r4, r7, pc}
 8003250:	0800a98c 	.word	0x0800a98c

08003254 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b598      	push	{r3, r4, r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003258:	f7ff ffd6 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 800325c:	4604      	mov	r4, r0
 800325e:	f7ff f9b2 	bl	80025c6 <LL_RCC_GetAPB2Prescaler>
 8003262:	4603      	mov	r3, r0
 8003264:	0adb      	lsrs	r3, r3, #11
 8003266:	4a03      	ldr	r2, [pc, #12]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd98      	pop	{r3, r4, r7, pc}
 8003274:	0800a98c 	.word	0x0800a98c

08003278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003290:	f7ff f981 	bl	8002596 <LL_RCC_GetAHB3Prescaler>
 8003294:	4603      	mov	r3, r0
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0c9c      	lsrs	r4, r3, #18
 80032b4:	f7fe ff80 	bl	80021b8 <HAL_PWREx_GetVoltageRange>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4619      	mov	r1, r3
 80032bc:	4620      	mov	r0, r4
 80032be:	f000 f80b 	bl	80032d8 <RCC_SetFlashLatency>
 80032c2:	4603      	mov	r3, r0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	0800a9ac 	.word	0x0800a9ac
 80032d0:	0800a94c 	.word	0x0800a94c
 80032d4:	431bde83 	.word	0x431bde83

080032d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80032e2:	4a3a      	ldr	r2, [pc, #232]	; (80033cc <RCC_SetFlashLatency+0xf4>)
 80032e4:	f107 0320 	add.w	r3, r7, #32
 80032e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ec:	6018      	str	r0, [r3, #0]
 80032ee:	3304      	adds	r3, #4
 80032f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80032f2:	4a37      	ldr	r2, [pc, #220]	; (80033d0 <RCC_SetFlashLatency+0xf8>)
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032fc:	6018      	str	r0, [r3, #0]
 80032fe:	3304      	adds	r3, #4
 8003300:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003302:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <RCC_SetFlashLatency+0xfc>)
 8003304:	f107 030c 	add.w	r3, r7, #12
 8003308:	ca07      	ldmia	r2, {r0, r1, r2}
 800330a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	d11b      	bne.n	8003352 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800331a:	2300      	movs	r3, #0
 800331c:	633b      	str	r3, [r7, #48]	; 0x30
 800331e:	e014      	b.n	800334a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	3338      	adds	r3, #56	; 0x38
 8003326:	443b      	add	r3, r7
 8003328:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	3338      	adds	r3, #56	; 0x38
 800333a:	443b      	add	r3, r7
 800333c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003342:	e021      	b.n	8003388 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	3301      	adds	r3, #1
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b02      	cmp	r3, #2
 800334e:	d9e7      	bls.n	8003320 <RCC_SetFlashLatency+0x48>
 8003350:	e01a      	b.n	8003388 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003352:	2300      	movs	r3, #0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	e014      	b.n	8003382 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	3338      	adds	r3, #56	; 0x38
 800335e:	443b      	add	r3, r7
 8003360:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4293      	cmp	r3, r2
 800336a:	d807      	bhi.n	800337c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	3338      	adds	r3, #56	; 0x38
 8003372:	443b      	add	r3, r7
 8003374:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800337a:	e005      	b.n	8003388 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	3301      	adds	r3, #1
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b02      	cmp	r3, #2
 8003386:	d9e7      	bls.n	8003358 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <RCC_SetFlashLatency+0x100>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 0207 	bic.w	r2, r3, #7
 8003390:	4911      	ldr	r1, [pc, #68]	; (80033d8 <RCC_SetFlashLatency+0x100>)
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003398:	f7fd ff90 	bl	80012bc <HAL_GetTick>
 800339c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800339e:	e008      	b.n	80033b2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033a0:	f7fd ff8c 	bl	80012bc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e007      	b.n	80033c2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <RCC_SetFlashLatency+0x100>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1ef      	bne.n	80033a0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3738      	adds	r7, #56	; 0x38
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	0800a90c 	.word	0x0800a90c
 80033d0:	0800a914 	.word	0x0800a914
 80033d4:	0800a91c 	.word	0x0800a91c
 80033d8:	58004000 	.word	0x58004000

080033dc <LL_RCC_LSE_IsReady>:
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d101      	bne.n	80033f4 <LL_RCC_LSE_IsReady+0x18>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <LL_RCC_LSE_IsReady+0x1a>
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <LL_RCC_SetUSARTClockSource>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <LL_RCC_SetI2SClockSource>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <LL_RCC_SetLPUARTClockSource>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <LL_RCC_SetI2CClockSource>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800349a:	43db      	mvns	r3, r3
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <LL_RCC_SetLPTIMClockSource>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <LL_RCC_SetRNGClockSource>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <LL_RCC_SetADCClockSource>:
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <LL_RCC_SetRTCClockSource>:
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <LL_RCC_GetRTCClockSource>:
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <LL_RCC_ForceBackupDomainReset>:
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80035d0:	2300      	movs	r3, #0
 80035d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80035d4:	2300      	movs	r3, #0
 80035d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d058      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80035e4:	f7fe fdda 	bl	800219c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e8:	f7fd fe68 	bl	80012bc <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80035ee:	e009      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fe64 	bl	80012bc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	74fb      	strb	r3, [r7, #19]
        break;
 8003602:	e006      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003604:	4b7b      	ldr	r3, [pc, #492]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d1ee      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d13c      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003618:	f7ff ffa7 	bl	800356a <LL_RCC_GetRTCClockSource>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003622:	429a      	cmp	r2, r3
 8003624:	d00f      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003634:	f7ff ffa5 	bl	8003582 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003638:	f7ff ffb3 	bl	80035a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800363c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d014      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fe34 	bl	80012bc <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003656:	e00b      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fd fe30 	bl	80012bc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d902      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	74fb      	strb	r3, [r7, #19]
            break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003670:	f7ff feb4 	bl	80033dc <LL_RCC_LSE_IsReady>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d1ee      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff5b 	bl	8003540 <LL_RCC_SetRTCClockSource>
 800368a:	e004      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
 8003690:	e001      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d004      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fea9 	bl	80033fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fe9e 	bl	80033fe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fec0 	bl	8003458 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fee6 	bl	80034ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fedb 	bl	80034ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fed0 	bl	80034ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fea9 	bl	8003482 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe9e 	bl	8003482 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fe93 	bl	8003482 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d011      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fe5e 	bl	800342e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377a:	d107      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800377c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fea5 	bl	80034ec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d011      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fea3 	bl	8003516 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d8:	d107      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80037ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	58000400 	.word	0x58000400

080037f8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003808:	4904      	ldr	r1, [pc, #16]	; (800381c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	58000400 	.word	0x58000400

08003820 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800382c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	58000400 	.word	0x58000400

08003840 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800384c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	58000400 	.word	0x58000400

08003860 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386a:	619a      	str	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	58000400 	.word	0x58000400

08003878 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d101      	bne.n	800388c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	58000400 	.word	0x58000400

0800389c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d101      	bne.n	80038b0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	58000400 	.word	0x58000400

080038c0 <LL_RCC_RF_DisableReset>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <LL_RCC_IsRFUnderReset>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80038e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f4:	d101      	bne.n	80038fa <LL_RCC_IsRFUnderReset+0x1a>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <LL_RCC_IsRFUnderReset+0x1c>
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <LL_EXTI_EnableIT_32_63+0x24>)
 800390e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003912:	4905      	ldr	r1, [pc, #20]	; (8003928 <LL_EXTI_EnableIT_32_63+0x24>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	58000800 	.word	0x58000800

0800392c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
    return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	e052      	b.n	80039e8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	799b      	ldrb	r3, [r3, #6]
 800394a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SUBGHZ_Init+0x2c>
 8003952:	7bbb      	ldrb	r3, [r7, #14]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d109      	bne.n	800396c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fbf4 	bl	800114c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003964:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003968:	f7ff ffcc 	bl	8003904 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800396c:	7bbb      	ldrb	r3, [r7, #14]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d126      	bne.n	80039c0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003978:	f7ff ffa2 	bl	80038c0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800397c:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_SUBGHZ_Init+0xc4>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	0cdb      	lsrs	r3, r3, #19
 800398a:	2264      	movs	r2, #100	; 0x64
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	609a      	str	r2, [r3, #8]
        break;
 80039a2:	e007      	b.n	80039b4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80039aa:	f7ff ff99 	bl	80038e0 <LL_RCC_IsRFUnderReset>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039b4:	f7ff ff34 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80039b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039bc:	f7ff ff1c 	bl	80037f8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80039c0:	f7ff ff4e 	bl	8003860 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 faac 	bl	8003f2c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	719a      	strb	r2, [r3, #6]

  return status;
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000004 	.word	0x20000004

080039f4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	461a      	mov	r2, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	817b      	strh	r3, [r7, #10]
 8003a04:	4613      	mov	r3, r2
 8003a06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	799b      	ldrb	r3, [r3, #6]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d14a      	bne.n	8003aa8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	795b      	ldrb	r3, [r3, #5]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e045      	b.n	8003aaa <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2202      	movs	r2, #2
 8003a28:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fb4c 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a30:	f7ff ff06 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003a34:	210d      	movs	r1, #13
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fa98 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003a3c:	897b      	ldrh	r3, [r7, #10]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa90 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa8a 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	82bb      	strh	r3, [r7, #20]
 8003a5c:	e00a      	b.n	8003a74 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a5e:	8abb      	ldrh	r3, [r7, #20]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fa7f 	bl	8003f6c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003a6e:	8abb      	ldrh	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	82bb      	strh	r3, [r7, #20]
 8003a74:	8aba      	ldrh	r2, [r7, #20]
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3f0      	bcc.n	8003a5e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a7c:	f7ff fed0 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 fb45 	bl	8004110 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
 8003a92:	e001      	b.n	8003a98 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	715a      	strb	r2, [r3, #5]

    return status;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	e000      	b.n	8003aaa <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	461a      	mov	r2, r3
 8003abe:	460b      	mov	r3, r1
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d14a      	bne.n	8003b6a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	795b      	ldrb	r3, [r3, #5]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e045      	b.n	8003b6c <HAL_SUBGHZ_ReadRegisters+0xba>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 faee 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003aec:	f7ff fea8 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003af0:	211d      	movs	r1, #29
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fa3a 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003af8:	897b      	ldrh	r3, [r7, #10]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa32 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa2c 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003b14:	2100      	movs	r1, #0
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa28 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	82fb      	strh	r3, [r7, #22]
 8003b20:	e009      	b.n	8003b36 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fa77 	bl	8004018 <SUBGHZSPI_Receive>
      pData++;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b30:	8afb      	ldrh	r3, [r7, #22]
 8003b32:	3301      	adds	r3, #1
 8003b34:	82fb      	strh	r3, [r7, #22]
 8003b36:	8afa      	ldrh	r2, [r7, #22]
 8003b38:	893b      	ldrh	r3, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3f1      	bcc.n	8003b22 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b3e:	f7ff fe6f 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fae4 	bl	8004110 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e001      	b.n	8003b5a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	715a      	strb	r2, [r3, #5]

    return status;
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
 8003b68:	e000      	b.n	8003b6c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	460b      	mov	r3, r1
 8003b82:	72fb      	strb	r3, [r7, #11]
 8003b84:	4613      	mov	r3, r2
 8003b86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	799b      	ldrb	r3, [r3, #6]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d14a      	bne.n	8003c28 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	795b      	ldrb	r3, [r3, #5]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e045      	b.n	8003c2a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa8f 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	2b84      	cmp	r3, #132	; 0x84
 8003bae:	d002      	beq.n	8003bb6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	2b94      	cmp	r3, #148	; 0x94
 8003bb4:	d103      	bne.n	8003bbe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	711a      	strb	r2, [r3, #4]
 8003bbc:	e002      	b.n	8003bc4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003bc4:	f7ff fe3c 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f9cd 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	82bb      	strh	r3, [r7, #20]
 8003bd6:	e00a      	b.n	8003bee <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003bd8:	8abb      	ldrh	r3, [r7, #20]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f9c2 	bl	8003f6c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003be8:	8abb      	ldrh	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	82bb      	strh	r3, [r7, #20]
 8003bee:	8aba      	ldrh	r2, [r7, #20]
 8003bf0:	893b      	ldrh	r3, [r7, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3f0      	bcc.n	8003bd8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bf6:	f7ff fe13 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	2b84      	cmp	r3, #132	; 0x84
 8003bfe:	d002      	beq.n	8003c06 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fa85 	bl	8004110 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
 8003c12:	e001      	b.n	8003c18 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	715a      	strb	r2, [r3, #5]

    return status;
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	e000      	b.n	8003c2a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	460b      	mov	r3, r1
 8003c40:	72fb      	strb	r3, [r7, #11]
 8003c42:	4613      	mov	r3, r2
 8003c44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	799b      	ldrb	r3, [r3, #6]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d13d      	bne.n	8003cd0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	795b      	ldrb	r3, [r3, #5]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e038      	b.n	8003cd2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa2e 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c6c:	f7ff fde8 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	4619      	mov	r1, r3
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f979 	bl	8003f6c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f975 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	82fb      	strh	r3, [r7, #22]
 8003c86:	e009      	b.n	8003c9c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f9c4 	bl	8004018 <SUBGHZSPI_Receive>
      pData++;
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	3301      	adds	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003c96:	8afb      	ldrh	r3, [r7, #22]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	82fb      	strh	r3, [r7, #22]
 8003c9c:	8afa      	ldrh	r2, [r7, #22]
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3f1      	bcc.n	8003c88 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ca4:	f7ff fdbc 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fa31 	bl	8004110 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e001      	b.n	8003cc0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	715a      	strb	r2, [r3, #5]

    return status;
 8003ccc:	7ffb      	ldrb	r3, [r7, #31]
 8003cce:	e000      	b.n	8003cd2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	72fb      	strb	r3, [r7, #11]
 8003cea:	4613      	mov	r3, r2
 8003cec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	799b      	ldrb	r3, [r3, #6]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d13e      	bne.n	8003d76 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	795b      	ldrb	r3, [r3, #5]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e039      	b.n	8003d78 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f9dc 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d10:	f7ff fd96 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003d14:	210e      	movs	r1, #14
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f928 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003d1c:	7afb      	ldrb	r3, [r7, #11]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f923 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	82bb      	strh	r3, [r7, #20]
 8003d2a:	e00a      	b.n	8003d42 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d2c:	8abb      	ldrh	r3, [r7, #20]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f918 	bl	8003f6c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d3c:	8abb      	ldrh	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	82bb      	strh	r3, [r7, #20]
 8003d42:	8aba      	ldrh	r2, [r7, #20]
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d3f0      	bcc.n	8003d2c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d4a:	f7ff fd69 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9de 	bl	8004110 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
 8003d60:	e001      	b.n	8003d66 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	715a      	strb	r2, [r3, #5]

    return status;
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	e000      	b.n	8003d78 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	72fb      	strb	r3, [r7, #11]
 8003d90:	4613      	mov	r3, r2
 8003d92:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	799b      	ldrb	r3, [r3, #6]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d141      	bne.n	8003e26 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	795b      	ldrb	r3, [r3, #5]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d101      	bne.n	8003dae <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e03c      	b.n	8003e28 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f987 	bl	80040c8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003dba:	f7ff fd41 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003dbe:	211e      	movs	r1, #30
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f8d3 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f8ce 	bl	8003f6c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f8ca 	bl	8003f6c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	82fb      	strh	r3, [r7, #22]
 8003ddc:	e009      	b.n	8003df2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f919 	bl	8004018 <SUBGHZSPI_Receive>
      pData++;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003dec:	8afb      	ldrh	r3, [r7, #22]
 8003dee:	3301      	adds	r3, #1
 8003df0:	82fb      	strh	r3, [r7, #22]
 8003df2:	8afa      	ldrh	r2, [r7, #22]
 8003df4:	893b      	ldrh	r3, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3f1      	bcc.n	8003dde <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003dfa:	f7ff fd11 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f986 	bl	8004110 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e001      	b.n	8003e16 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	715a      	strb	r2, [r3, #5]

    return status;
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	e000      	b.n	8003e28 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003e38:	2300      	movs	r3, #0
 8003e3a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003e3c:	f107 020c 	add.w	r2, r7, #12
 8003e40:	2302      	movs	r3, #2
 8003e42:	2112      	movs	r1, #18
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fef4 	bl	8003c32 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003e4a:	7b3b      	ldrb	r3, [r7, #12]
 8003e4c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	7b7b      	ldrb	r3, [r7, #13]
 8003e56:	b21b      	sxth	r3, r3
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	b21b      	sxth	r3, r3
 8003e5c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003e5e:	f107 020c 	add.w	r2, r7, #12
 8003e62:	2302      	movs	r3, #2
 8003e64:	2102      	movs	r1, #2
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fe84 	bl	8003b74 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003e6c:	89fb      	ldrh	r3, [r7, #14]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f005 facc 	bl	8009414 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f005 fad2 	bl	8009430 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f005 fb22 	bl	80094e0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f005 fb28 	bl	80094fc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003eac:	89fb      	ldrh	r3, [r7, #14]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f005 fb2e 	bl	8009518 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003ebc:	89fb      	ldrh	r3, [r7, #14]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fafc 	bl	80094c4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f005 fab8 	bl	800944c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f005 fab8 	bl	8009468 <HAL_SUBGHZ_CADStatusCallback>
 8003ef8:	e003      	b.n	8003f02 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003efa:	2100      	movs	r1, #0
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f005 fab3 	bl	8009468 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f005 fac9 	bl	80094a4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f005 fb09 	bl	8009534 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f3e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003f48:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f4c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003f50:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <SUBGHZSPI_Init+0x3c>)
 8003f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	58010000 	.word	0x58010000

08003f6c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <SUBGHZSPI_Transmit+0xa0>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	0cdb      	lsrs	r3, r3, #19
 8003f8a:	2264      	movs	r2, #100	; 0x64
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	609a      	str	r2, [r3, #8]
      break;
 8003fa2:	e008      	b.n	8003fb6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003faa:	4b19      	ldr	r3, [pc, #100]	; (8004010 <SUBGHZSPI_Transmit+0xa4>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d1ed      	bne.n	8003f92 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <SUBGHZSPI_Transmit+0xa8>)
 8003fb8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <SUBGHZSPI_Transmit+0xa0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	0cdb      	lsrs	r3, r3, #19
 8003fce:	2264      	movs	r2, #100	; 0x64
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	609a      	str	r2, [r3, #8]
      break;
 8003fe6:	e008      	b.n	8003ffa <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <SUBGHZSPI_Transmit+0xa4>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d1ed      	bne.n	8003fd6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <SUBGHZSPI_Transmit+0xa4>)
 8003ffc:	68db      	ldr	r3, [r3, #12]

  return status;
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000004 	.word	0x20000004
 8004010:	58010000 	.word	0x58010000
 8004014:	5801000c 	.word	0x5801000c

08004018 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <SUBGHZSPI_Receive+0xa4>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	0cdb      	lsrs	r3, r3, #19
 8004034:	2264      	movs	r2, #100	; 0x64
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d105      	bne.n	800404e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	609a      	str	r2, [r3, #8]
      break;
 800404c:	e008      	b.n	8004060 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b01      	subs	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <SUBGHZSPI_Receive+0xa8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d1ed      	bne.n	800403c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <SUBGHZSPI_Receive+0xac>)
 8004062:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <SUBGHZSPI_Receive+0xa4>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	0cdb      	lsrs	r3, r3, #19
 8004078:	2264      	movs	r2, #100	; 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	609a      	str	r2, [r3, #8]
      break;
 8004090:	e008      	b.n	80040a4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <SUBGHZSPI_Receive+0xa8>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d1ed      	bne.n	8004080 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <SUBGHZSPI_Receive+0xa8>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	701a      	strb	r2, [r3, #0]

  return status;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000004 	.word	0x20000004
 80040c0:	58010000 	.word	0x58010000
 80040c4:	5801000c 	.word	0x5801000c

080040c8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	791b      	ldrb	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d111      	bne.n	80040fc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <SUBGHZ_CheckDeviceReady+0x44>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80040e8:	f7ff fbaa 	bl	8003840 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f9      	bne.n	80040ec <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80040f8:	f7ff fb92 	bl	8003820 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f807 	bl	8004110 <SUBGHZ_WaitOnBusy>
 8004102:	4603      	mov	r3, r0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000004 	.word	0x20000004

08004110 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800411c:	4b12      	ldr	r3, [pc, #72]	; (8004168 <SUBGHZ_WaitOnBusy+0x58>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	0d1b      	lsrs	r3, r3, #20
 800412a:	2264      	movs	r2, #100	; 0x64
 800412c:	fb02 f303 	mul.w	r3, r2, r3
 8004130:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004132:	f7ff fbb3 	bl	800389c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004136:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e009      	b.n	800415e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004150:	f7ff fb92 	bl	8003878 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	2b01      	cmp	r3, #1
 800415c:	d0e9      	beq.n	8004132 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000004 	.word	0x20000004

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e049      	b.n	8004212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc ffee 	bl	8001174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fa90 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e02e      	b.n	8004292 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	; (800429c <HAL_TIM_Base_Start+0x80>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_Base_Start+0x34>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d115      	bne.n	800427c <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_TIM_Base_Start+0x84>)
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d015      	beq.n	800428e <HAL_TIM_Base_Start+0x72>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d011      	beq.n	800428e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	e008      	b.n	800428e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e000      	b.n	8004290 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	00010007 	.word	0x00010007

080042a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d122      	bne.n	8004300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0202 	mvn.w	r2, #2
 80042d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9d6 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9c9 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f9d8 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d122      	bne.n	8004354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d11b      	bne.n	8004354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0204 	mvn.w	r2, #4
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9ac 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f99f 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9ae 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b08      	cmp	r3, #8
 8004360:	d122      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b08      	cmp	r3, #8
 800436e:	d11b      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0208 	mvn.w	r2, #8
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f982 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f975 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f984 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d122      	bne.n	80043fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d11b      	bne.n	80043fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0210 	mvn.w	r2, #16
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2208      	movs	r2, #8
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f958 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f94b 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f95a 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10e      	bne.n	8004428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0201 	mvn.w	r2, #1
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f926 	bl	8004674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d107      	bne.n	8004454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa9f 	bl	8004992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004462:	d10e      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d107      	bne.n	8004482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800447a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fa91 	bl	80049a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d10e      	bne.n	80044ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d107      	bne.n	80044ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f907 	bl	80046bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d10e      	bne.n	80044da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0220 	mvn.w	r2, #32
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fa53 	bl	8004980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_ConfigClockSource+0x1c>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0b6      	b.n	800466c <HAL_TIM_ConfigClockSource+0x18a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800451c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004528:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d03e      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xd8>
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004540:	f200 8087 	bhi.w	8004652 <HAL_TIM_ConfigClockSource+0x170>
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	f000 8086 	beq.w	8004658 <HAL_TIM_ConfigClockSource+0x176>
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d87f      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 8004552:	2b70      	cmp	r3, #112	; 0x70
 8004554:	d01a      	beq.n	800458c <HAL_TIM_ConfigClockSource+0xaa>
 8004556:	2b70      	cmp	r3, #112	; 0x70
 8004558:	d87b      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 800455a:	2b60      	cmp	r3, #96	; 0x60
 800455c:	d050      	beq.n	8004600 <HAL_TIM_ConfigClockSource+0x11e>
 800455e:	2b60      	cmp	r3, #96	; 0x60
 8004560:	d877      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 8004562:	2b50      	cmp	r3, #80	; 0x50
 8004564:	d03c      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xfe>
 8004566:	2b50      	cmp	r3, #80	; 0x50
 8004568:	d873      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d058      	beq.n	8004620 <HAL_TIM_ConfigClockSource+0x13e>
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d86f      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 8004572:	2b30      	cmp	r3, #48	; 0x30
 8004574:	d064      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x15e>
 8004576:	2b30      	cmp	r3, #48	; 0x30
 8004578:	d86b      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d060      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x15e>
 800457e:	2b20      	cmp	r3, #32
 8004580:	d867      	bhi.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d05c      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x15e>
 8004586:	2b10      	cmp	r3, #16
 8004588:	d05a      	beq.n	8004640 <HAL_TIM_ConfigClockSource+0x15e>
 800458a:	e062      	b.n	8004652 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800459c:	f000 f973 	bl	8004886 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e04f      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ca:	f000 f95c 	bl	8004886 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e03c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ec:	461a      	mov	r2, r3
 80045ee:	f000 f8d1 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2150      	movs	r1, #80	; 0x50
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f928 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 80045fe:	e02c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800460c:	461a      	mov	r2, r3
 800460e:	f000 f8ef 	bl	80047f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2160      	movs	r1, #96	; 0x60
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f918 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 800461e:	e01c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462c:	461a      	mov	r2, r3
 800462e:	f000 f8b1 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f908 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 800463e:	e00c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 f8ff 	bl	800484e <TIM_ITRx_SetConfig>
      break;
 8004650:	e003      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      break;
 8004656:	e000      	b.n	800465a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800466a:	7bfb      	ldrb	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0x20>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d108      	bne.n	8004702 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1d      	ldr	r2, [pc, #116]	; (800478c <TIM_Base_SetConfig+0xbc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0x52>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <TIM_Base_SetConfig+0xb8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_Base_SetConfig+0xa0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <TIM_Base_SetConfig+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_Base_SetConfig+0xa0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <TIM_Base_SetConfig+0xc0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800

08004794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 030a 	bic.w	r3, r3, #10
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f023 0210 	bic.w	r2, r3, #16
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800482c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	f043 0307 	orr.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	609a      	str	r2, [r3, #8]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d8:	2302      	movs	r3, #2
 80048da:	e04a      	b.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800490c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a11      	ldr	r2, [pc, #68]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d10c      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4313      	orrs	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00

08004980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_GetUSARTClockSource>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	401a      	ands	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	4313      	orrs	r3, r2
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <LL_RCC_GetLPUARTClockSource>:
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80049e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4013      	ands	r3, r2
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e042      	b.n	8004a90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc f9fd 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2224      	movs	r2, #36	; 0x24
 8004a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fd16 	bl	800546c <UART_SetConfig>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e022      	b.n	8004a90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 ff7e 	bl	8005954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f001 f804 	bl	8005a96 <UART_CheckIdleState>
 8004a8e:	4603      	mov	r3, r0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d173      	bne.n	8004b9a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_UART_Transmit+0x26>
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06c      	b.n	8004b9c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2221      	movs	r2, #33	; 0x21
 8004ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ad2:	f7fc fbf3 	bl	80012bc <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d108      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	e003      	b.n	8004b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b0c:	e02c      	b.n	8004b68 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f001 f80a 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e039      	b.n	8004b9c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3302      	adds	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e007      	b.n	8004b56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1cc      	bne.n	8004b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2140      	movs	r1, #64	; 0x40
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 ffd7 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e006      	b.n	8004b9c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 80b1 	bne.w	8004d22 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Receive+0x28>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0a9      	b.n	8004d24 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2222      	movs	r2, #34	; 0x22
 8004bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be6:	f7fc fb69 	bl	80012bc <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d10e      	bne.n	8004c24 <HAL_UART_Receive+0x80>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_UART_Receive+0x76>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c18:	e02d      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c22:	e028      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10d      	bne.n	8004c48 <HAL_UART_Receive+0xa4>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_UART_Receive+0x9a>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	22ff      	movs	r2, #255	; 0xff
 8004c38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c3c:	e01b      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	227f      	movs	r2, #127	; 0x7f
 8004c42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c46:	e016      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c50:	d10d      	bne.n	8004c6e <HAL_UART_Receive+0xca>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <HAL_UART_Receive+0xc0>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	227f      	movs	r2, #127	; 0x7f
 8004c5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c62:	e008      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	223f      	movs	r2, #63	; 0x3f
 8004c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004c6c:	e003      	b.n	8004c76 <HAL_UART_Receive+0xd2>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c7c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d108      	bne.n	8004c9a <HAL_UART_Receive+0xf6>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e003      	b.n	8004ca2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ca2:	e032      	b.n	8004d0a <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2120      	movs	r1, #32
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 ff3f 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e032      	b.n	8004d24 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10c      	bne.n	8004cde <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	8a7b      	ldrh	r3, [r7, #18]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	3302      	adds	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	e00c      	b.n	8004cf8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	8a7b      	ldrh	r3, [r7, #18]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	4013      	ands	r3, r2
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1c6      	bne.n	8004ca4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d137      	bne.n	8004db4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_UART_Receive_DMA+0x24>
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e030      	b.n	8004db6 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_UART_Receive_DMA+0x94>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d01f      	beq.n	8004da4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d018      	beq.n	8004da4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	69f9      	ldr	r1, [r7, #28]
 8004d96:	6a3a      	ldr	r2, [r7, #32]
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004da4:	88fb      	ldrh	r3, [r7, #6]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 ff8a 	bl	8005cc4 <UART_Start_Receive_DMA>
 8004db0:	4603      	mov	r3, r0
 8004db2:	e000      	b.n	8004db6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
  }
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40008000 	.word	0x40008000

08004dc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b0ba      	sub	sp, #232	; 0xe8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dee:	f640 030f 	movw	r3, #2063	; 0x80f
 8004df2:	4013      	ands	r3, r2
 8004df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11b      	bne.n	8004e38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 82e3 	beq.w	80053f4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
      }
      return;
 8004e36:	e2dd      	b.n	80053f4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8123 	beq.w	8005088 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004e46:	4b8d      	ldr	r3, [pc, #564]	; (800507c <HAL_UART_IRQHandler+0x2b8>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e52:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_UART_IRQHandler+0x2bc>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8116 	beq.w	8005088 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d011      	beq.n	8004e8c <HAL_UART_IRQHandler+0xc8>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00b      	beq.n	8004e8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d011      	beq.n	8004ebc <HAL_UART_IRQHandler+0xf8>
 8004e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d011      	beq.n	8004eec <HAL_UART_IRQHandler+0x128>
 8004ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f043 0202 	orr.w	r2, r3, #2
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f08:	4b5c      	ldr	r3, [pc, #368]	; (800507c <HAL_UART_IRQHandler+0x2b8>)
 8004f0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00b      	beq.n	8004f28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_UART_IRQHandler+0x196>
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8249 	beq.w	80053f8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d013      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d105      	bne.n	8004f8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d054      	beq.n	8005068 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 ff66 	bl	8005e90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d146      	bne.n	8005060 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800500a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d017      	beq.n	8005058 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502e:	4a15      	ldr	r2, [pc, #84]	; (8005084 <HAL_UART_IRQHandler+0x2c0>)
 8005030:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005038:	4618      	mov	r0, r3
 800503a:	f7fc fd39 	bl	8001ab0 <HAL_DMA_Abort_IT>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005052:	4610      	mov	r0, r2
 8005054:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005056:	e00f      	b.n	8005078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f9f2 	bl	8005442 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505e:	e00b      	b.n	8005078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9ee 	bl	8005442 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005066:	e007      	b.n	8005078 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9ea 	bl	8005442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005076:	e1bf      	b.n	80053f8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	bf00      	nop
    return;
 800507a:	e1bd      	b.n	80053f8 <HAL_UART_IRQHandler+0x634>
 800507c:	10000001 	.word	0x10000001
 8005080:	04000120 	.word	0x04000120
 8005084:	08006145 	.word	0x08006145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508c:	2b01      	cmp	r3, #1
 800508e:	f040 8153 	bne.w	8005338 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 814c 	beq.w	8005338 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8145 	beq.w	8005338 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2210      	movs	r2, #16
 80050b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	f040 80bb 	bne.w	800523c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 818f 	beq.w	80053fc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050e8:	429a      	cmp	r2, r3
 80050ea:	f080 8187 	bcs.w	80053fc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 8087 	bne.w	800521a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800513a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005142:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800514e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1da      	bne.n	800510c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800517a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800517e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005182:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800518c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e1      	bne.n	8005156 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3308      	adds	r3, #8
 8005198:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e3      	bne.n	8005192 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e8:	f023 0310 	bic.w	r3, r3, #16
 80051ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80051fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e4      	bne.n	80051d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005214:	4618      	mov	r0, r3
 8005216:	f7fc fbed 	bl	80019f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800522c:	b29b      	uxth	r3, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	b29b      	uxth	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f90d 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800523a:	e0df      	b.n	80053fc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005248:	b29b      	uxth	r3, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80d1 	beq.w	8005400 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800525e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80cc 	beq.w	8005400 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800527c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e4      	bne.n	8005268 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	e853 3f00 	ldrex	r3, [r3]
 80052ac:	623b      	str	r3, [r7, #32]
   return(result);
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052c6:	633a      	str	r2, [r7, #48]	; 0x30
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e1      	bne.n	800529e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e4      	bne.n	80052ee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f88f 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005336:	e063      	b.n	8005400 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <HAL_UART_IRQHandler+0x59e>
 8005344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 ff33 	bl	80061c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005360:	e051      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800536e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800538a:	2b00      	cmp	r3, #0
 800538c:	d03a      	beq.n	8005404 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
    }
    return;
 8005396:	e035      	b.n	8005404 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d009      	beq.n	80053b8 <HAL_UART_IRQHandler+0x5f4>
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fedd 	bl	8006170 <UART_EndTransmit_IT>
    return;
 80053b6:	e026      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_UART_IRQHandler+0x614>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 ff0a 	bl	80061ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d6:	e016      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_UART_IRQHandler+0x642>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da0c      	bge.n	8005406 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fef3 	bl	80061d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053f2:	e008      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
      return;
 80053f4:	bf00      	nop
 80053f6:	e006      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
    return;
 80053f8:	bf00      	nop
 80053fa:	e004      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
      return;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
      return;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_UART_IRQHandler+0x642>
    return;
 8005404:	bf00      	nop
  }
}
 8005406:	37e8      	adds	r7, #232	; 0xe8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
	...

0800546c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b08c      	sub	sp, #48	; 0x30
 8005472:	af00      	add	r7, sp, #0
 8005474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	431a      	orrs	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	431a      	orrs	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	4313      	orrs	r3, r2
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b94      	ldr	r3, [pc, #592]	; (80056ec <UART_SetConfig+0x280>)
 800549c:	4013      	ands	r3, r2
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a89      	ldr	r2, [pc, #548]	; (80056f0 <UART_SetConfig+0x284>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f023 010f 	bic.w	r1, r3, #15
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a7a      	ldr	r2, [pc, #488]	; (80056f4 <UART_SetConfig+0x288>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d127      	bne.n	8005560 <UART_SetConfig+0xf4>
 8005510:	2003      	movs	r0, #3
 8005512:	f7ff fa50 	bl	80049b6 <LL_RCC_GetUSARTClockSource>
 8005516:	4603      	mov	r3, r0
 8005518:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800551c:	2b03      	cmp	r3, #3
 800551e:	d81b      	bhi.n	8005558 <UART_SetConfig+0xec>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0xbc>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	08005539 	.word	0x08005539
 800552c:	08005549 	.word	0x08005549
 8005530:	08005541 	.word	0x08005541
 8005534:	08005551 	.word	0x08005551
 8005538:	2301      	movs	r3, #1
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e080      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005540:	2302      	movs	r3, #2
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e07c      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e078      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e074      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e070      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a64      	ldr	r2, [pc, #400]	; (80056f8 <UART_SetConfig+0x28c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d138      	bne.n	80055dc <UART_SetConfig+0x170>
 800556a:	200c      	movs	r0, #12
 800556c:	f7ff fa23 	bl	80049b6 <LL_RCC_GetUSARTClockSource>
 8005570:	4603      	mov	r3, r0
 8005572:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d82c      	bhi.n	80055d4 <UART_SetConfig+0x168>
 800557a:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x114>)
 800557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005580:	080055b5 	.word	0x080055b5
 8005584:	080055d5 	.word	0x080055d5
 8005588:	080055d5 	.word	0x080055d5
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055d5 	.word	0x080055d5
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055bd 	.word	0x080055bd
 80055a4:	080055d5 	.word	0x080055d5
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055cd 	.word	0x080055cd
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ba:	e042      	b.n	8005642 <UART_SetConfig+0x1d6>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c2:	e03e      	b.n	8005642 <UART_SetConfig+0x1d6>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ca:	e03a      	b.n	8005642 <UART_SetConfig+0x1d6>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d2:	e036      	b.n	8005642 <UART_SetConfig+0x1d6>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055da:	e032      	b.n	8005642 <UART_SetConfig+0x1d6>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a43      	ldr	r2, [pc, #268]	; (80056f0 <UART_SetConfig+0x284>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <UART_SetConfig+0x1d0>
 80055e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80055ea:	f7ff f9f6 	bl	80049da <LL_RCC_GetLPUARTClockSource>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055f4:	d01a      	beq.n	800562c <UART_SetConfig+0x1c0>
 80055f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0x1c8>
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d00c      	beq.n	800561c <UART_SetConfig+0x1b0>
 8005602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005606:	d815      	bhi.n	8005634 <UART_SetConfig+0x1c8>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <UART_SetConfig+0x1a8>
 800560c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005610:	d008      	beq.n	8005624 <UART_SetConfig+0x1b8>
 8005612:	e00f      	b.n	8005634 <UART_SetConfig+0x1c8>
 8005614:	2300      	movs	r3, #0
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561a:	e012      	b.n	8005642 <UART_SetConfig+0x1d6>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005622:	e00e      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562a:	e00a      	b.n	8005642 <UART_SetConfig+0x1d6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005632:	e006      	b.n	8005642 <UART_SetConfig+0x1d6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563a:	e002      	b.n	8005642 <UART_SetConfig+0x1d6>
 800563c:	2310      	movs	r3, #16
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <UART_SetConfig+0x284>)
 8005648:	4293      	cmp	r3, r2
 800564a:	f040 80a4 	bne.w	8005796 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800564e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005652:	2b08      	cmp	r3, #8
 8005654:	d823      	bhi.n	800569e <UART_SetConfig+0x232>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x1f0>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005681 	.word	0x08005681
 8005660:	0800569f 	.word	0x0800569f
 8005664:	08005689 	.word	0x08005689
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800568f 	.word	0x0800568f
 8005670:	0800569f 	.word	0x0800569f
 8005674:	0800569f 	.word	0x0800569f
 8005678:	0800569f 	.word	0x0800569f
 800567c:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005680:	f7fd fdd6 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005686:	e010      	b.n	80056aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005688:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <UART_SetConfig+0x290>)
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800568c:	e00d      	b.n	80056aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568e:	f7fd fd1b 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8005692:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005694:	e009      	b.n	80056aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800569c:	e005      	b.n	80056aa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80056a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8137 	beq.w	8005920 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	4a12      	ldr	r2, [pc, #72]	; (8005700 <UART_SetConfig+0x294>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	461a      	mov	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	4413      	add	r3, r2
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d305      	bcc.n	80056e2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d910      	bls.n	8005704 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056e8:	e11a      	b.n	8005920 <UART_SetConfig+0x4b4>
 80056ea:	bf00      	nop
 80056ec:	cfff69f3 	.word	0xcfff69f3
 80056f0:	40008000 	.word	0x40008000
 80056f4:	40013800 	.word	0x40013800
 80056f8:	40004400 	.word	0x40004400
 80056fc:	00f42400 	.word	0x00f42400
 8005700:	0800aa18 	.word	0x0800aa18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2200      	movs	r2, #0
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	60fa      	str	r2, [r7, #12]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	4a8e      	ldr	r2, [pc, #568]	; (800594c <UART_SetConfig+0x4e0>)
 8005712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005716:	b29b      	uxth	r3, r3
 8005718:	2200      	movs	r2, #0
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005726:	f7fa fd7b 	bl	8000220 <__aeabi_uldivmod>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	020b      	lsls	r3, r1, #8
 800573c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005740:	0202      	lsls	r2, r0, #8
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	6849      	ldr	r1, [r1, #4]
 8005746:	0849      	lsrs	r1, r1, #1
 8005748:	2000      	movs	r0, #0
 800574a:	460c      	mov	r4, r1
 800574c:	4605      	mov	r5, r0
 800574e:	eb12 0804 	adds.w	r8, r2, r4
 8005752:	eb43 0905 	adc.w	r9, r3, r5
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	469a      	mov	sl, r3
 800575e:	4693      	mov	fp, r2
 8005760:	4652      	mov	r2, sl
 8005762:	465b      	mov	r3, fp
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fa fd5a 	bl	8000220 <__aeabi_uldivmod>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4613      	mov	r3, r2
 8005772:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800577a:	d308      	bcc.n	800578e <UART_SetConfig+0x322>
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005782:	d204      	bcs.n	800578e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	60da      	str	r2, [r3, #12]
 800578c:	e0c8      	b.n	8005920 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005794:	e0c4      	b.n	8005920 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579e:	d167      	bne.n	8005870 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80057a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d828      	bhi.n	80057fa <UART_SetConfig+0x38e>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x344>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	080057fb 	.word	0x080057fb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057fb 	.word	0x080057fb
 80057cc:	080057fb 	.word	0x080057fb
 80057d0:	080057f3 	.word	0x080057f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fd fd2c 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 80057d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057da:	e014      	b.n	8005806 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fd fd3a 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057e2:	e010      	b.n	8005806 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <UART_SetConfig+0x4e4>)
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057e8:	e00d      	b.n	8005806 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fd fc6d 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80057f0:	e009      	b.n	8005806 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80057f8:	e005      	b.n	8005806 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8089 	beq.w	8005920 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	4a4e      	ldr	r2, [pc, #312]	; (800594c <UART_SetConfig+0x4e0>)
 8005814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005818:	461a      	mov	r2, r3
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	441a      	add	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d916      	bls.n	8005868 <UART_SetConfig+0x3fc>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d212      	bcs.n	8005868 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f023 030f 	bic.w	r3, r3, #15
 800584a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	b29a      	uxth	r2, r3
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	4313      	orrs	r3, r2
 800585c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	8bfa      	ldrh	r2, [r7, #30]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e05b      	b.n	8005920 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800586e:	e057      	b.n	8005920 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005870:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005874:	2b08      	cmp	r3, #8
 8005876:	d828      	bhi.n	80058ca <UART_SetConfig+0x45e>
 8005878:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <UART_SetConfig+0x414>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fd fcc4 	bl	8003230 <HAL_RCC_GetPCLK1Freq>
 80058a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058aa:	e014      	b.n	80058d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fd fcd2 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80058b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b26      	ldr	r3, [pc, #152]	; (8005950 <UART_SetConfig+0x4e4>)
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fd fc05 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80058be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058d4:	bf00      	nop
    }

    if (pclk != 0U)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d021      	beq.n	8005920 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	4a1a      	ldr	r2, [pc, #104]	; (800594c <UART_SetConfig+0x4e0>)
 80058e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d909      	bls.n	800591a <UART_SetConfig+0x4ae>
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d205      	bcs.n	800591a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	b29a      	uxth	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	e002      	b.n	8005920 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2201      	movs	r2, #1
 8005924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2201      	movs	r2, #1
 800592c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2200      	movs	r2, #0
 8005934:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800593c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005940:	4618      	mov	r0, r3
 8005942:	3730      	adds	r7, #48	; 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594a:	bf00      	nop
 800594c:	0800aa18 	.word	0x0800aa18
 8005950:	00f42400 	.word	0x00f42400

08005954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a52:	d10a      	bne.n	8005a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af02      	add	r7, sp, #8
 8005a9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa6:	f7fb fc09 	bl	80012bc <HAL_GetTick>
 8005aaa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d10e      	bne.n	8005ad8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f832 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e028      	b.n	8005b2a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d10e      	bne.n	8005b04 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f81c 	bl	8005b32 <UART_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e012      	b.n	8005b2a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b09c      	sub	sp, #112	; 0x70
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b42:	e0a9      	b.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b4a:	f000 80a5 	beq.w	8005c98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4e:	f7fb fbb5 	bl	80012bc <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d302      	bcc.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d140      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b78:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	663b      	str	r3, [r7, #96]	; 0x60
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e069      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d051      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c02:	d149      	bne.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c60:	623a      	str	r2, [r7, #32]
 8005c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69f9      	ldr	r1, [r7, #28]
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e010      	b.n	8005cba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	f43f af46 	beq.w	8005b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3770      	adds	r7, #112	; 0x70
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b096      	sub	sp, #88	; 0x58
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2222      	movs	r2, #34	; 0x22
 8005cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d02d      	beq.n	8005d56 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d00:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <UART_Start_Receive_DMA+0x140>)
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <UART_Start_Receive_DMA+0x144>)
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d14:	4a3d      	ldr	r2, [pc, #244]	; (8005e0c <UART_Start_Receive_DMA+0x148>)
 8005d16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d1e:	2200      	movs	r2, #0
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3324      	adds	r3, #36	; 0x24
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	461a      	mov	r2, r3
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	f7fb fdde 	bl	80018f8 <HAL_DMA_Start_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2210      	movs	r2, #16
 8005d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e051      	b.n	8005dfa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d018      	beq.n	8005d90 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	657b      	str	r3, [r7, #84]	; 0x54
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e6      	bne.n	8005d5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	653b      	str	r3, [r7, #80]	; 0x50
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005db0:	637a      	str	r2, [r7, #52]	; 0x34
 8005db2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3308      	adds	r3, #8
 8005dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005de4:	623a      	str	r2, [r7, #32]
 8005de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	69f9      	ldr	r1, [r7, #28]
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3758      	adds	r7, #88	; 0x58
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08005f5b 	.word	0x08005f5b
 8005e08:	08006087 	.word	0x08006087
 8005e0c:	080060c5 	.word	0x080060c5

08005e10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b08f      	sub	sp, #60	; 0x3c
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e60:	633b      	str	r3, [r7, #48]	; 0x30
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6a:	61ba      	str	r2, [r7, #24]
 8005e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6979      	ldr	r1, [r7, #20]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	613b      	str	r3, [r7, #16]
   return(result);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005e86:	bf00      	nop
 8005e88:	373c      	adds	r7, #60	; 0x3c
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr

08005e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b095      	sub	sp, #84	; 0x54
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	e853 3f00 	ldrex	r3, [r3]
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e6      	bne.n	8005e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d118      	bne.n	8005f3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f023 0310 	bic.w	r3, r3, #16
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	613b      	str	r3, [r7, #16]
   return(result);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f50:	bf00      	nop
 8005f52:	3754      	adds	r7, #84	; 0x54
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b09c      	sub	sp, #112	; 0x70
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d171      	bne.n	800605a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005fd0:	647a      	str	r2, [r7, #68]	; 0x44
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8005ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006004:	633a      	str	r2, [r7, #48]	; 0x30
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d118      	bne.n	800605a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	60fb      	str	r3, [r7, #12]
   return(result);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f023 0310 	bic.w	r3, r3, #16
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	617b      	str	r3, [r7, #20]
   return(result);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e6      	bne.n	8006028 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800605a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605c:	2200      	movs	r2, #0
 800605e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800606e:	4619      	mov	r1, r3
 8006070:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006072:	f7ff f9ef 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006076:	e002      	b.n	800607e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006078:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800607a:	f7ff f9d0 	bl	800541e <HAL_UART_RxCpltCallback>
}
 800607e:	bf00      	nop
 8006080:	3770      	adds	r7, #112	; 0x70
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d109      	bne.n	80060b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff f9d0 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060b4:	e002      	b.n	80060bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff f9ba 	bl	8005430 <HAL_UART_RxHalfCpltCallback>
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d109      	bne.n	8006104 <UART_DMAError+0x40>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b21      	cmp	r3, #33	; 0x21
 80060f4:	d106      	bne.n	8006104 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f7ff fe86 	bl	8005e10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d109      	bne.n	8006126 <UART_DMAError+0x62>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b22      	cmp	r3, #34	; 0x22
 8006116:	d106      	bne.n	8006126 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7ff feb5 	bl	8005e90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f043 0210 	orr.w	r2, r3, #16
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	f7ff f983 	bl	8005442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff f96d 	bl	8005442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	60bb      	str	r3, [r7, #8]
   return(result);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e6      	bne.n	8006178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff f927 	bl	800540c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061be:	bf00      	nop
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UARTEx_DisableFifoMode+0x16>
 800620e:	2302      	movs	r3, #2
 8006210:	e027      	b.n	8006262 <HAL_UARTEx_DisableFifoMode+0x66>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2224      	movs	r2, #36	; 0x24
 800621e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e02d      	b.n	80062e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f84f 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e02d      	b.n	800635c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f811 	bl	8006364 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006384:	e031      	b.n	80063ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006386:	2308      	movs	r3, #8
 8006388:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800638a:	2308      	movs	r3, #8
 800638c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	0e5b      	lsrs	r3, r3, #25
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	0f5b      	lsrs	r3, r3, #29
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	7b3a      	ldrb	r2, [r7, #12]
 80063b2:	4910      	ldr	r1, [pc, #64]	; (80063f4 <UARTEx_SetNbDataToProcess+0x90>)
 80063b4:	5c8a      	ldrb	r2, [r1, r2]
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ba:	7b3a      	ldrb	r2, [r7, #12]
 80063bc:	490e      	ldr	r1, [pc, #56]	; (80063f8 <UARTEx_SetNbDataToProcess+0x94>)
 80063be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	7b7a      	ldrb	r2, [r7, #13]
 80063d0:	4908      	ldr	r1, [pc, #32]	; (80063f4 <UARTEx_SetNbDataToProcess+0x90>)
 80063d2:	5c8a      	ldrb	r2, [r1, r2]
 80063d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063d8:	7b7a      	ldrb	r2, [r7, #13]
 80063da:	4907      	ldr	r1, [pc, #28]	; (80063f8 <UARTEx_SetNbDataToProcess+0x94>)
 80063dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063de:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	0800aa30 	.word	0x0800aa30
 80063f8:	0800aa38 	.word	0x0800aa38

080063fc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006404:	4a24      	ldr	r2, [pc, #144]	; (8006498 <RadioInit+0x9c>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800640a:	4b24      	ldr	r3, [pc, #144]	; (800649c <RadioInit+0xa0>)
 800640c:	2200      	movs	r2, #0
 800640e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006410:	4b22      	ldr	r3, [pc, #136]	; (800649c <RadioInit+0xa0>)
 8006412:	2200      	movs	r2, #0
 8006414:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006416:	4b21      	ldr	r3, [pc, #132]	; (800649c <RadioInit+0xa0>)
 8006418:	2200      	movs	r2, #0
 800641a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800641c:	4b1f      	ldr	r3, [pc, #124]	; (800649c <RadioInit+0xa0>)
 800641e:	2200      	movs	r2, #0
 8006420:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8006422:	481f      	ldr	r0, [pc, #124]	; (80064a0 <RadioInit+0xa4>)
 8006424:	f001 ff88 	bl	8008338 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006428:	4b1c      	ldr	r3, [pc, #112]	; (800649c <RadioInit+0xa0>)
 800642a:	2200      	movs	r2, #0
 800642c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800642e:	4b1b      	ldr	r3, [pc, #108]	; (800649c <RadioInit+0xa0>)
 8006430:	2200      	movs	r2, #0
 8006432:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8006434:	f002 fa1c 	bl	8008870 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006438:	2100      	movs	r1, #0
 800643a:	2000      	movs	r0, #0
 800643c:	f002 fde8 	bl	8009010 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8006440:	2204      	movs	r2, #4
 8006442:	2100      	movs	r1, #0
 8006444:	2001      	movs	r0, #1
 8006446:	f002 fba5 	bl	8008b94 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800644a:	2300      	movs	r3, #0
 800644c:	2200      	movs	r2, #0
 800644e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006452:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006456:	f002 fad5 	bl	8008a04 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800645a:	f000 fe91 	bl	8007180 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800645e:	2300      	movs	r3, #0
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <RadioInit+0xa8>)
 8006464:	2200      	movs	r2, #0
 8006466:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800646a:	480f      	ldr	r0, [pc, #60]	; (80064a8 <RadioInit+0xac>)
 800646c:	f003 fb1e 	bl	8009aac <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <RadioInit+0xb0>)
 8006476:	2200      	movs	r2, #0
 8006478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800647c:	480c      	ldr	r0, [pc, #48]	; (80064b0 <RadioInit+0xb4>)
 800647e:	f003 fb15 	bl	8009aac <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006482:	4809      	ldr	r0, [pc, #36]	; (80064a8 <RadioInit+0xac>)
 8006484:	f003 fbb6 	bl	8009bf4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006488:	4809      	ldr	r0, [pc, #36]	; (80064b0 <RadioInit+0xb4>)
 800648a:	f003 fbb3 	bl	8009bf4 <UTIL_TIMER_Stop>
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200005a4 	.word	0x200005a4
 800649c:	200005a8 	.word	0x200005a8
 80064a0:	08007579 	.word	0x08007579
 80064a4:	08007501 	.word	0x08007501
 80064a8:	20000604 	.word	0x20000604
 80064ac:	08007515 	.word	0x08007515
 80064b0:	2000061c 	.word	0x2000061c

080064b4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80064b8:	f001 ff86 	bl	80083c8 <SUBGRF_GetOperatingMode>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b07      	cmp	r3, #7
 80064c0:	d00a      	beq.n	80064d8 <RadioGetStatus+0x24>
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	dc0a      	bgt.n	80064dc <RadioGetStatus+0x28>
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d002      	beq.n	80064d0 <RadioGetStatus+0x1c>
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d002      	beq.n	80064d4 <RadioGetStatus+0x20>
 80064ce:	e005      	b.n	80064dc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80064d0:	2302      	movs	r3, #2
 80064d2:	e004      	b.n	80064de <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e002      	b.n	80064de <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80064d8:	2303      	movs	r3, #3
 80064da:	e000      	b.n	80064de <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80064dc:	2300      	movs	r3, #0
    }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <RadioSetModem+0xb4>)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f003 f95d 	bl	80097b6 <RFW_SetRadioModem>
    switch( modem )
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d80e      	bhi.n	8006520 <RadioSetModem+0x3c>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <RadioSetModem+0x24>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	0800652f 	.word	0x0800652f
 800650c:	0800653d 	.word	0x0800653d
 8006510:	08006521 	.word	0x08006521
 8006514:	08006563 	.word	0x08006563
 8006518:	08006571 	.word	0x08006571
 800651c:	0800657f 	.word	0x0800657f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006520:	2003      	movs	r0, #3
 8006522:	f002 fb11 	bl	8008b48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006526:	4b1c      	ldr	r3, [pc, #112]	; (8006598 <RadioSetModem+0xb4>)
 8006528:	2200      	movs	r2, #0
 800652a:	735a      	strb	r2, [r3, #13]
        break;
 800652c:	e02f      	b.n	800658e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800652e:	2000      	movs	r0, #0
 8006530:	f002 fb0a 	bl	8008b48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <RadioSetModem+0xb4>)
 8006536:	2200      	movs	r2, #0
 8006538:	735a      	strb	r2, [r3, #13]
        break;
 800653a:	e028      	b.n	800658e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800653c:	2001      	movs	r0, #1
 800653e:	f002 fb03 	bl	8008b48 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <RadioSetModem+0xb4>)
 8006544:	7b5a      	ldrb	r2, [r3, #13]
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <RadioSetModem+0xb4>)
 8006548:	7b1b      	ldrb	r3, [r3, #12]
 800654a:	429a      	cmp	r2, r3
 800654c:	d01e      	beq.n	800658c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <RadioSetModem+0xb4>)
 8006550:	7b1a      	ldrb	r2, [r3, #12]
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <RadioSetModem+0xb4>)
 8006554:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <RadioSetModem+0xb4>)
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ff9a 	bl	8007494 <RadioSetPublicNetwork>
        }
        break;
 8006560:	e014      	b.n	800658c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006562:	2002      	movs	r0, #2
 8006564:	f002 faf0 	bl	8008b48 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <RadioSetModem+0xb4>)
 800656a:	2200      	movs	r2, #0
 800656c:	735a      	strb	r2, [r3, #13]
        break;
 800656e:	e00e      	b.n	800658e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006570:	2002      	movs	r0, #2
 8006572:	f002 fae9 	bl	8008b48 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <RadioSetModem+0xb4>)
 8006578:	2200      	movs	r2, #0
 800657a:	735a      	strb	r2, [r3, #13]
        break;
 800657c:	e007      	b.n	800658e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800657e:	2000      	movs	r0, #0
 8006580:	f002 fae2 	bl	8008b48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <RadioSetModem+0xb4>)
 8006586:	2200      	movs	r2, #0
 8006588:	735a      	strb	r2, [r3, #13]
        break;
 800658a:	e000      	b.n	800658e <RadioSetModem+0xaa>
        break;
 800658c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200005a8 	.word	0x200005a8

0800659c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f002 fa89 	bl	8008abc <SUBGRF_SetRfFrequency>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b090      	sub	sp, #64	; 0x40
 80065b6:	af0a      	add	r7, sp, #40	; 0x28
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80065c2:	2301      	movs	r3, #1
 80065c4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80065ce:	f000 fdea 	bl	80071a6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80065d2:	2000      	movs	r0, #0
 80065d4:	f7ff ff86 	bl	80064e4 <RadioSetModem>

    RadioSetChannel( freq );
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f7ff ffdf 	bl	800659c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80065de:	2301      	movs	r3, #1
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	2300      	movs	r3, #0
 80065e4:	9308      	str	r3, [sp, #32]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9307      	str	r3, [sp, #28]
 80065ea:	2300      	movs	r3, #0
 80065ec:	9306      	str	r3, [sp, #24]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9305      	str	r3, [sp, #20]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9302      	str	r3, [sp, #8]
 80065fe:	2303      	movs	r3, #3
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	f44f 7216 	mov.w	r2, #600	; 0x258
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	2000      	movs	r0, #0
 8006610:	f000 f83c 	bl	800668c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006614:	2000      	movs	r0, #0
 8006616:	f000 fdcd 	bl	80071b4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800661a:	f000 ff69 	bl	80074f0 <RadioGetWakeupTime>
 800661e:	4603      	mov	r3, r0
 8006620:	4618      	mov	r0, r3
 8006622:	f7fa fe5f 	bl	80012e4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006626:	f003 fb7f 	bl	8009d28 <UTIL_TIMER_GetCurrentTime>
 800662a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800662c:	e00d      	b.n	800664a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800662e:	2000      	movs	r0, #0
 8006630:	f000 feae 	bl	8007390 <RadioRssi>
 8006634:	4603      	mov	r3, r0
 8006636:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006638:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800663c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006640:	429a      	cmp	r2, r3
 8006642:	dd02      	ble.n	800664a <RadioIsChannelFree+0x98>
        {
            status = false;
 8006644:	2300      	movs	r3, #0
 8006646:	75fb      	strb	r3, [r7, #23]
            break;
 8006648:	e006      	b.n	8006658 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800664a:	6938      	ldr	r0, [r7, #16]
 800664c:	f003 fb7e 	bl	8009d4c <UTIL_TIMER_GetElapsedTime>
 8006650:	4602      	mov	r2, r0
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	4293      	cmp	r3, r2
 8006656:	d8ea      	bhi.n	800662e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006658:	f000 fda5 	bl	80071a6 <RadioStandby>

    return status;
 800665c:	7dfb      	ldrb	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006670:	2300      	movs	r3, #0
 8006672:	2200      	movs	r2, #0
 8006674:	2100      	movs	r1, #0
 8006676:	2000      	movs	r0, #0
 8006678:	f002 f9c4 	bl	8008a04 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800667c:	f001 ff75 	bl	800856a <SUBGRF_GetRandom>
 8006680:	6078      	str	r0, [r7, #4]

    return rnd;
 8006682:	687b      	ldr	r3, [r7, #4]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	461a      	mov	r2, r3
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
 800669c:	4613      	mov	r3, r2
 800669e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80066a0:	4ab9      	ldr	r2, [pc, #740]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80066a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80066a6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80066a8:	f003 f843 	bl	8009732 <RFW_DeInit>
    if( rxContinuous == true )
 80066ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80066b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80066c0:	4ab2      	ldr	r2, [pc, #712]	; (800698c <RadioSetRxConfig+0x300>)
 80066c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80066c6:	7013      	strb	r3, [r2, #0]
 80066c8:	e002      	b.n	80066d0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80066ca:	4bb0      	ldr	r3, [pc, #704]	; (800698c <RadioSetRxConfig+0x300>)
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d009      	beq.n	80066ea <RadioSetRxConfig+0x5e>
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	f300 81d7 	bgt.w	8006a8a <RadioSetRxConfig+0x3fe>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80bf 	beq.w	8006860 <RadioSetRxConfig+0x1d4>
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f000 8124 	beq.w	8006930 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80066e8:	e1cf      	b.n	8006a8a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80066ea:	2001      	movs	r0, #1
 80066ec:	f002 f882 	bl	80087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80066f0:	4ba5      	ldr	r3, [pc, #660]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80066f8:	4aa3      	ldr	r2, [pc, #652]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80066fe:	4ba2      	ldr	r3, [pc, #648]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006700:	2209      	movs	r2, #9
 8006702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006706:	4ba0      	ldr	r3, [pc, #640]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006708:	f44f 7248 	mov.w	r2, #800	; 0x320
 800670c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f002 ff42 	bl	8009598 <SUBGRF_GetFskBandwidthRegValue>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	4b9b      	ldr	r3, [pc, #620]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800671a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800671e:	4b9a      	ldr	r3, [pc, #616]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006720:	2200      	movs	r2, #0
 8006722:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006724:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	b29a      	uxth	r2, r3
 800672a:	4b97      	ldr	r3, [pc, #604]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800672c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800672e:	4b96      	ldr	r3, [pc, #600]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006730:	2200      	movs	r2, #0
 8006732:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006734:	4b94      	ldr	r3, [pc, #592]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006736:	2210      	movs	r2, #16
 8006738:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800673a:	4b93      	ldr	r3, [pc, #588]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800673c:	2200      	movs	r2, #0
 800673e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006740:	4b91      	ldr	r3, [pc, #580]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006742:	2200      	movs	r2, #0
 8006744:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006746:	4b91      	ldr	r3, [pc, #580]	; (800698c <RadioSetRxConfig+0x300>)
 8006748:	781a      	ldrb	r2, [r3, #0]
 800674a:	4b8f      	ldr	r3, [pc, #572]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800674c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800674e:	4b8e      	ldr	r3, [pc, #568]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006750:	2201      	movs	r2, #1
 8006752:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006754:	4b8c      	ldr	r3, [pc, #560]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006756:	2200      	movs	r2, #0
 8006758:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800675a:	2005      	movs	r0, #5
 800675c:	f7ff fec2 	bl	80064e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006760:	488b      	ldr	r0, [pc, #556]	; (8006990 <RadioSetRxConfig+0x304>)
 8006762:	f002 fae5 	bl	8008d30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006766:	488b      	ldr	r0, [pc, #556]	; (8006994 <RadioSetRxConfig+0x308>)
 8006768:	f002 fbb4 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800676c:	4a8a      	ldr	r2, [pc, #552]	; (8006998 <RadioSetRxConfig+0x30c>)
 800676e:	f107 031c 	add.w	r3, r7, #28
 8006772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006776:	e883 0003 	stmia.w	r3, {r0, r1}
 800677a:	f107 031c 	add.w	r3, r7, #28
 800677e:	4618      	mov	r0, r3
 8006780:	f001 fe71 	bl	8008466 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006784:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006788:	f001 febc 	bl	8008504 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800678c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8006790:	f000 fe1d 	bl	80073ce <RadioRead>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800679a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800679e:	f023 0310 	bic.w	r3, r3, #16
 80067a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80067a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067aa:	4619      	mov	r1, r3
 80067ac:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80067b0:	f000 fdfb 	bl	80073aa <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80067b4:	2104      	movs	r1, #4
 80067b6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80067ba:	f000 fdf6 	bl	80073aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80067be:	f640 009b 	movw	r0, #2203	; 0x89b
 80067c2:	f000 fe04 	bl	80073ce <RadioRead>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80067cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d0:	f023 031c 	bic.w	r3, r3, #28
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067dc:	f043 0308 	orr.w	r3, r3, #8
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	f640 009b 	movw	r0, #2203	; 0x89b
 80067e8:	f000 fddf 	bl	80073aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80067ec:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80067f0:	f000 fded 	bl	80073ce <RadioRead>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80067fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067fe:	f023 0318 	bic.w	r3, r3, #24
 8006802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800680a:	f043 0318 	orr.w	r3, r3, #24
 800680e:	b2db      	uxtb	r3, r3
 8006810:	4619      	mov	r1, r3
 8006812:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006816:	f000 fdc8 	bl	80073aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800681a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800681e:	f000 fdd6 	bl	80073ce <RadioRead>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8006834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006838:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800683c:	b2db      	uxtb	r3, r3
 800683e:	4619      	mov	r1, r3
 8006840:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006844:	f000 fdb1 	bl	80073aa <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006848:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800684a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	fbb2 f3f3 	udiv	r3, r2, r3
 800685a:	4a4b      	ldr	r2, [pc, #300]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800685c:	6093      	str	r3, [r2, #8]
            break;
 800685e:	e115      	b.n	8006a8c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006860:	2000      	movs	r0, #0
 8006862:	f001 ffc7 	bl	80087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006866:	4b48      	ldr	r3, [pc, #288]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800686e:	4a46      	ldr	r2, [pc, #280]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006874:	4b44      	ldr	r3, [pc, #272]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006876:	220b      	movs	r2, #11
 8006878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800687c:	68b8      	ldr	r0, [r7, #8]
 800687e:	f002 fe8b 	bl	8009598 <SUBGRF_GetFskBandwidthRegValue>
 8006882:	4603      	mov	r3, r0
 8006884:	461a      	mov	r2, r3
 8006886:	4b40      	ldr	r3, [pc, #256]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800688c:	4b3e      	ldr	r3, [pc, #248]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800688e:	2200      	movs	r2, #0
 8006890:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006892:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	b29a      	uxth	r2, r3
 8006898:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800689a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800689c:	4b3a      	ldr	r3, [pc, #232]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800689e:	2204      	movs	r2, #4
 80068a0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068a4:	2218      	movs	r2, #24
 80068a6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80068a8:	4b37      	ldr	r3, [pc, #220]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80068ae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b33      	ldr	r3, [pc, #204]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068bc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80068be:	4b33      	ldr	r3, [pc, #204]	; (800698c <RadioSetRxConfig+0x300>)
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	4b31      	ldr	r3, [pc, #196]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068c4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80068c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80068ce:	4b2e      	ldr	r3, [pc, #184]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068d0:	22f2      	movs	r2, #242	; 0xf2
 80068d2:	75da      	strb	r2, [r3, #23]
 80068d4:	e002      	b.n	80068dc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80068d6:	4b2c      	ldr	r3, [pc, #176]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068d8:	2201      	movs	r2, #1
 80068da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80068dc:	4b2a      	ldr	r3, [pc, #168]	; (8006988 <RadioSetRxConfig+0x2fc>)
 80068de:	2201      	movs	r2, #1
 80068e0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80068e2:	f000 fc60 	bl	80071a6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80068e6:	2000      	movs	r0, #0
 80068e8:	f7ff fdfc 	bl	80064e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80068ec:	4828      	ldr	r0, [pc, #160]	; (8006990 <RadioSetRxConfig+0x304>)
 80068ee:	f002 fa1f 	bl	8008d30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80068f2:	4828      	ldr	r0, [pc, #160]	; (8006994 <RadioSetRxConfig+0x308>)
 80068f4:	f002 faee 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <RadioSetRxConfig+0x310>)
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006902:	e883 0003 	stmia.w	r3, {r0, r1}
 8006906:	f107 0314 	add.w	r3, r7, #20
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fdab 	bl	8008466 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006910:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006914:	f001 fdf6 	bl	8008504 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800691a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
 800692a:	4a17      	ldr	r2, [pc, #92]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800692c:	6093      	str	r3, [r2, #8]
            break;
 800692e:	e0ad      	b.n	8006a8c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006930:	2000      	movs	r0, #0
 8006932:	f001 ff5f 	bl	80087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4b11      	ldr	r3, [pc, #68]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <RadioSetRxConfig+0x314>)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006956:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <RadioSetRxConfig+0x2fc>)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <RadioSetRxConfig+0x2e4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b0b      	cmp	r3, #11
 8006968:	d008      	beq.n	800697c <RadioSetRxConfig+0x2f0>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d005      	beq.n	800697c <RadioSetRxConfig+0x2f0>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d116      	bne.n	80069a4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d113      	bne.n	80069a4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <RadioSetRxConfig+0x2fc>)
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006984:	e012      	b.n	80069ac <RadioSetRxConfig+0x320>
 8006986:	bf00      	nop
 8006988:	200005a8 	.word	0x200005a8
 800698c:	2000000d 	.word	0x2000000d
 8006990:	200005e0 	.word	0x200005e0
 8006994:	200005b6 	.word	0x200005b6
 8006998:	0800a928 	.word	0x0800a928
 800699c:	0800a930 	.word	0x0800a930
 80069a0:	0800aacc 	.word	0x0800aacc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80069a4:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80069ac:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80069b2:	4b38      	ldr	r3, [pc, #224]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069b8:	2b05      	cmp	r3, #5
 80069ba:	d004      	beq.n	80069c6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80069bc:	4b35      	ldr	r3, [pc, #212]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d10a      	bne.n	80069dc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80069c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069c8:	2b0b      	cmp	r3, #11
 80069ca:	d803      	bhi.n	80069d4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80069cc:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069ce:	220c      	movs	r2, #12
 80069d0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80069d2:	e006      	b.n	80069e2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80069d4:	4a2f      	ldr	r2, [pc, #188]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069d8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80069da:	e002      	b.n	80069e2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80069dc:	4a2d      	ldr	r2, [pc, #180]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069e0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80069e2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80069e6:	4b2b      	ldr	r3, [pc, #172]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069e8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80069ea:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <RadioSetRxConfig+0x40c>)
 80069ec:	781a      	ldrb	r2, [r3, #0]
 80069ee:	4b29      	ldr	r3, [pc, #164]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069f0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80069f2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80069f6:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <RadioSetRxConfig+0x408>)
 80069f8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80069fc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006a00:	4b24      	ldr	r3, [pc, #144]	; (8006a94 <RadioSetRxConfig+0x408>)
 8006a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006a06:	f000 fbce 	bl	80071a6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	f7ff fd6a 	bl	80064e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a10:	4822      	ldr	r0, [pc, #136]	; (8006a9c <RadioSetRxConfig+0x410>)
 8006a12:	f002 f98d 	bl	8008d30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a16:	4822      	ldr	r0, [pc, #136]	; (8006aa0 <RadioSetRxConfig+0x414>)
 8006a18:	f002 fa5c 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006a1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fef6 	bl	8008812 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006a26:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006a2a:	f002 fbaf 	bl	800918c <SUBGRF_ReadRegister>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8006a3c:	f002 fb92 	bl	8009164 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006a40:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <RadioSetRxConfig+0x408>)
 8006a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10d      	bne.n	8006a66 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006a4a:	f240 7036 	movw	r0, #1846	; 0x736
 8006a4e:	f002 fb9d 	bl	800918c <SUBGRF_ReadRegister>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f023 0304 	bic.w	r3, r3, #4
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	f240 7036 	movw	r0, #1846	; 0x736
 8006a60:	f002 fb80 	bl	8009164 <SUBGRF_WriteRegister>
 8006a64:	e00c      	b.n	8006a80 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006a66:	f240 7036 	movw	r0, #1846	; 0x736
 8006a6a:	f002 fb8f 	bl	800918c <SUBGRF_ReadRegister>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f043 0304 	orr.w	r3, r3, #4
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	f240 7036 	movw	r0, #1846	; 0x736
 8006a7c:	f002 fb72 	bl	8009164 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <RadioSetRxConfig+0x408>)
 8006a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a86:	609a      	str	r2, [r3, #8]
            break;
 8006a88:	e000      	b.n	8006a8c <RadioSetRxConfig+0x400>
            break;
 8006a8a:	bf00      	nop
    }
}
 8006a8c:	bf00      	nop
 8006a8e:	3728      	adds	r7, #40	; 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200005a8 	.word	0x200005a8
 8006a98:	2000000d 	.word	0x2000000d
 8006a9c:	200005e0 	.word	0x200005e0
 8006aa0:	200005b6 	.word	0x200005b6

08006aa4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60ba      	str	r2, [r7, #8]
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006ab6:	f002 fe3c 	bl	8009732 <RFW_DeInit>
    switch( modem )
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	f000 80c7 	beq.w	8006c50 <RadioSetTxConfig+0x1ac>
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	f300 80d6 	bgt.w	8006c74 <RadioSetTxConfig+0x1d0>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <RadioSetTxConfig+0x2e>
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d059      	beq.n	8006b84 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006ad0:	e0d0      	b.n	8006c74 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006ad2:	4b77      	ldr	r3, [pc, #476]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006ada:	4a75      	ldr	r2, [pc, #468]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006ae0:	4b73      	ldr	r3, [pc, #460]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006ae2:	220b      	movs	r2, #11
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f002 fd55 	bl	8009598 <SUBGRF_GetFskBandwidthRegValue>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b6f      	ldr	r3, [pc, #444]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006af8:	4a6d      	ldr	r2, [pc, #436]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006afe:	4b6c      	ldr	r3, [pc, #432]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006b04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	4b69      	ldr	r3, [pc, #420]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b0c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006b0e:	4b68      	ldr	r3, [pc, #416]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b10:	2204      	movs	r2, #4
 8006b12:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006b14:	4b66      	ldr	r3, [pc, #408]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b16:	2218      	movs	r2, #24
 8006b18:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006b1a:	4b65      	ldr	r3, [pc, #404]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006b20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b24:	f083 0301 	eor.w	r3, r3, #1
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b60      	ldr	r3, [pc, #384]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b2e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8006b30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006b38:	4b5d      	ldr	r3, [pc, #372]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b3a:	22f2      	movs	r2, #242	; 0xf2
 8006b3c:	75da      	strb	r2, [r3, #23]
 8006b3e:	e002      	b.n	8006b46 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006b40:	4b5b      	ldr	r3, [pc, #364]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006b46:	4b5a      	ldr	r3, [pc, #360]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006b4c:	f000 fb2b 	bl	80071a6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006b50:	2000      	movs	r0, #0
 8006b52:	f7ff fcc7 	bl	80064e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006b56:	4857      	ldr	r0, [pc, #348]	; (8006cb4 <RadioSetTxConfig+0x210>)
 8006b58:	f002 f8ea 	bl	8008d30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b5c:	4856      	ldr	r0, [pc, #344]	; (8006cb8 <RadioSetTxConfig+0x214>)
 8006b5e:	f002 f9b9 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006b62:	4a56      	ldr	r2, [pc, #344]	; (8006cbc <RadioSetTxConfig+0x218>)
 8006b64:	f107 0310 	add.w	r3, r7, #16
 8006b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006b70:	f107 0310 	add.w	r3, r7, #16
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fc76 	bl	8008466 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006b7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b7e:	f001 fcc1 	bl	8008504 <SUBGRF_SetWhiteningSeed>
            break;
 8006b82:	e078      	b.n	8006c76 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006b84:	4b4a      	ldr	r3, [pc, #296]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	4b47      	ldr	r3, [pc, #284]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006b96:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <RadioSetTxConfig+0x21c>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	4b44      	ldr	r3, [pc, #272]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006ba4:	4a42      	ldr	r2, [pc, #264]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006baa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <RadioSetTxConfig+0x11c>
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b0b      	cmp	r3, #11
 8006bb8:	d008      	beq.n	8006bcc <RadioSetTxConfig+0x128>
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	2b0c      	cmp	r3, #12
 8006bbe:	d005      	beq.n	8006bcc <RadioSetTxConfig+0x128>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d107      	bne.n	8006bd6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	2b0c      	cmp	r3, #12
 8006bca:	d104      	bne.n	8006bd6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006bcc:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006bd4:	e003      	b.n	8006bde <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006bd6:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006bde:	4b34      	ldr	r3, [pc, #208]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006be4:	4b32      	ldr	r3, [pc, #200]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006be6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d004      	beq.n	8006bf8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006bee:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d10a      	bne.n	8006c0e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8006bf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bfa:	2b0b      	cmp	r3, #11
 8006bfc:	d803      	bhi.n	8006c06 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c00:	220c      	movs	r2, #12
 8006c02:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006c04:	e006      	b.n	8006c14 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006c06:	4a2a      	ldr	r2, [pc, #168]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c0a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006c0c:	e002      	b.n	8006c14 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006c0e:	4a28      	ldr	r2, [pc, #160]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c12:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006c14:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c1a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006c1c:	4b29      	ldr	r3, [pc, #164]	; (8006cc4 <RadioSetTxConfig+0x220>)
 8006c1e:	781a      	ldrb	r2, [r3, #0]
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c22:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006c24:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006c28:	4b21      	ldr	r3, [pc, #132]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c2a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006c2e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006c32:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006c38:	f000 fab5 	bl	80071a6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f7ff fc51 	bl	80064e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c42:	481c      	ldr	r0, [pc, #112]	; (8006cb4 <RadioSetTxConfig+0x210>)
 8006c44:	f002 f874 	bl	8008d30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c48:	481b      	ldr	r0, [pc, #108]	; (8006cb8 <RadioSetTxConfig+0x214>)
 8006c4a:	f002 f943 	bl	8008ed4 <SUBGRF_SetPacketParams>
            break;
 8006c4e:	e012      	b.n	8006c76 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006c50:	2004      	movs	r0, #4
 8006c52:	f7ff fc47 	bl	80064e4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006c5e:	4a14      	ldr	r2, [pc, #80]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c66:	2216      	movs	r2, #22
 8006c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c6c:	4811      	ldr	r0, [pc, #68]	; (8006cb4 <RadioSetTxConfig+0x210>)
 8006c6e:	f002 f85f 	bl	8008d30 <SUBGRF_SetModulationParams>
            break;
 8006c72:	e000      	b.n	8006c76 <RadioSetTxConfig+0x1d2>
            break;
 8006c74:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f002 fb8e 	bl	800939c <SUBGRF_SetRfTxPower>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c86:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006c8a:	210e      	movs	r1, #14
 8006c8c:	f640 101f 	movw	r0, #2335	; 0x91f
 8006c90:	f002 fa68 	bl	8009164 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006c96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f002 fd5d 	bl	800975a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006ca0:	4a03      	ldr	r2, [pc, #12]	; (8006cb0 <RadioSetTxConfig+0x20c>)
 8006ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca4:	6053      	str	r3, [r2, #4]
}
 8006ca6:	bf00      	nop
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200005a8 	.word	0x200005a8
 8006cb4:	200005e0 	.word	0x200005e0
 8006cb8:	200005b6 	.word	0x200005b6
 8006cbc:	0800a930 	.word	0x0800a930
 8006cc0:	0800aacc 	.word	0x0800aacc
 8006cc4:	2000000d 	.word	0x2000000d

08006cc8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
    return true;
 8006cd0:	2301      	movs	r3, #1
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	2b0a      	cmp	r3, #10
 8006cee:	d83e      	bhi.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
 8006cf0:	a201      	add	r2, pc, #4	; (adr r2, 8006cf8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8006cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf6:	bf00      	nop
 8006cf8:	08006d25 	.word	0x08006d25
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d45 	.word	0x08006d45
 8006d04:	08006d55 	.word	0x08006d55
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006d63 	.word	0x08006d63
 8006d10:	08006d69 	.word	0x08006d69
 8006d14:	08006d6f 	.word	0x08006d6f
 8006d18:	08006d2d 	.word	0x08006d2d
 8006d1c:	08006d3d 	.word	0x08006d3d
 8006d20:	08006d4d 	.word	0x08006d4d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006d24:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006d28:	60fb      	str	r3, [r7, #12]
        break;
 8006d2a:	e020      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006d2c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8006d30:	60fb      	str	r3, [r7, #12]
        break;
 8006d32:	e01c      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006d34:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006d38:	60fb      	str	r3, [r7, #12]
        break;
 8006d3a:	e018      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006d3c:	f245 1361 	movw	r3, #20833	; 0x5161
 8006d40:	60fb      	str	r3, [r7, #12]
        break;
 8006d42:	e014      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006d44:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006d48:	60fb      	str	r3, [r7, #12]
        break;
 8006d4a:	e010      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006d4c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8006d50:	60fb      	str	r3, [r7, #12]
        break;
 8006d52:	e00c      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006d54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006d58:	60fb      	str	r3, [r7, #12]
        break;
 8006d5a:	e008      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <RadioGetLoRaBandwidthInHz+0xa0>)
 8006d5e:	60fb      	str	r3, [r7, #12]
        break;
 8006d60:	e005      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006d62:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <RadioGetLoRaBandwidthInHz+0xa4>)
 8006d64:	60fb      	str	r3, [r7, #12]
        break;
 8006d66:	e002      	b.n	8006d6e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <RadioGetLoRaBandwidthInHz+0xa8>)
 8006d6a:	60fb      	str	r3, [r7, #12]
        break;
 8006d6c:	bf00      	nop
    }

    return bandwidthInHz;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	0001e848 	.word	0x0001e848
 8006d80:	0003d090 	.word	0x0003d090
 8006d84:	0007a120 	.word	0x0007a120

08006d88 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	70fb      	strb	r3, [r7, #3]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	803b      	strh	r3, [r7, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8006da2:	883b      	ldrh	r3, [r7, #0]
 8006da4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006da6:	78ba      	ldrb	r2, [r7, #2]
 8006da8:	f082 0201 	eor.w	r2, r2, #1
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d001      	beq.n	8006db6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006db2:	2208      	movs	r2, #8
 8006db4:	e000      	b.n	8006db8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006db6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006db8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006dba:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006dbe:	7c3b      	ldrb	r3, [r7, #16]
 8006dc0:	7d39      	ldrb	r1, [r7, #20]
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d001      	beq.n	8006dca <RadioGetGfskTimeOnAirNumerator+0x42>
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	e000      	b.n	8006dcc <RadioGetGfskTimeOnAirNumerator+0x44>
 8006dca:	2100      	movs	r1, #0
 8006dcc:	440b      	add	r3, r1
 8006dce:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006dd0:	4413      	add	r3, r2
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b08b      	sub	sp, #44	; 0x2c
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4611      	mov	r1, r2
 8006de8:	461a      	mov	r2, r3
 8006dea:	460b      	mov	r3, r1
 8006dec:	71fb      	strb	r3, [r7, #7]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	3304      	adds	r3, #4
 8006df6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b05      	cmp	r3, #5
 8006e02:	d002      	beq.n	8006e0a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b06      	cmp	r3, #6
 8006e08:	d104      	bne.n	8006e14 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006e0a:	88bb      	ldrh	r3, [r7, #4]
 8006e0c:	2b0b      	cmp	r3, #11
 8006e0e:	d801      	bhi.n	8006e14 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006e10:	230c      	movs	r3, #12
 8006e12:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b0b      	cmp	r3, #11
 8006e1e:	d008      	beq.n	8006e32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b0c      	cmp	r3, #12
 8006e24:	d005      	beq.n	8006e32 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d105      	bne.n	8006e38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d102      	bne.n	8006e38 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006e3c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006e3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	d001      	beq.n	8006e4a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006e46:	2210      	movs	r2, #16
 8006e48:	e000      	b.n	8006e4c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8006e4a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e4c:	4413      	add	r3, r2
 8006e4e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006e54:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006e56:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006e5a:	2a00      	cmp	r2, #0
 8006e5c:	d001      	beq.n	8006e62 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	e000      	b.n	8006e64 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006e62:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006e64:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006e66:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	d803      	bhi.n	8006e76 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	e00e      	b.n	8006e94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3b02      	subs	r3, #2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	623b      	str	r3, [r7, #32]
 8006e8c:	e002      	b.n	8006e94 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da01      	bge.n	8006e9e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	fb03 f202 	mul.w	r2, r3, r2
 8006eb2:	88bb      	ldrh	r3, [r7, #4]
 8006eb4:	4413      	add	r3, r2
    int32_t intermediate =
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d802      	bhi.n	8006ec6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3b02      	subs	r3, #2
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	372c      	adds	r7, #44	; 0x2c
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
	...

08006ee0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af04      	add	r7, sp, #16
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	461a      	mov	r2, r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <RadioTimeOnAir+0x28>
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d017      	beq.n	8006f36 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8006f06:	e035      	b.n	8006f74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006f08:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8006f0c:	8c3a      	ldrh	r2, [r7, #32]
 8006f0e:	7bb9      	ldrb	r1, [r7, #14]
 8006f10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff32 	bl	8006d88 <RadioGetGfskTimeOnAirNumerator>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	613b      	str	r3, [r7, #16]
        break;
 8006f34:	e01e      	b.n	8006f74 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006f36:	8c39      	ldrh	r1, [r7, #32]
 8006f38:	7bba      	ldrb	r2, [r7, #14]
 8006f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f3e:	9302      	str	r3, [sp, #8]
 8006f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	f7ff ff43 	bl	8006ddc <RadioGetLoRaTimeOnAirNumerator>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006f62:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <RadioTimeOnAir+0xac>)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff feb6 	bl	8006cdc <RadioGetLoRaBandwidthInHz>
 8006f70:	6138      	str	r0, [r7, #16]
        break;
 8006f72:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4413      	add	r3, r2
 8006f7a:	1e5a      	subs	r2, r3, #1
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800aacc 	.word	0x0800aacc

08006f90 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f240 2101 	movw	r1, #513	; 0x201
 8006fa4:	f240 2001 	movw	r0, #513	; 0x201
 8006fa8:	f001 fd2c 	bl	8008a04 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006fac:	4b70      	ldr	r3, [pc, #448]	; (8007170 <RadioSend+0x1e0>)
 8006fae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f002 f9c9 	bl	800934c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8006fba:	4b6d      	ldr	r3, [pc, #436]	; (8007170 <RadioSend+0x1e0>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d112      	bne.n	8006fe8 <RadioSend+0x58>
 8006fc2:	4b6b      	ldr	r3, [pc, #428]	; (8007170 <RadioSend+0x1e0>)
 8006fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc8:	2b06      	cmp	r3, #6
 8006fca:	d10d      	bne.n	8006fe8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006fcc:	f640 0089 	movw	r0, #2185	; 0x889
 8006fd0:	f002 f8dc 	bl	800918c <SUBGRF_ReadRegister>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f023 0304 	bic.w	r3, r3, #4
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f640 0089 	movw	r0, #2185	; 0x889
 8006fe2:	f002 f8bf 	bl	8009164 <SUBGRF_WriteRegister>
 8006fe6:	e00c      	b.n	8007002 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006fe8:	f640 0089 	movw	r0, #2185	; 0x889
 8006fec:	f002 f8ce 	bl	800918c <SUBGRF_ReadRegister>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f640 0089 	movw	r0, #2185	; 0x889
 8006ffe:	f002 f8b1 	bl	8009164 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007002:	4b5b      	ldr	r3, [pc, #364]	; (8007170 <RadioSend+0x1e0>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b04      	cmp	r3, #4
 8007008:	f200 80a2 	bhi.w	8007150 <RadioSend+0x1c0>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <RadioSend+0x84>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007043 	.word	0x08007043
 8007018:	08007029 	.word	0x08007029
 800701c:	08007043 	.word	0x08007043
 8007020:	08007099 	.word	0x08007099
 8007024:	080070b9 	.word	0x080070b9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007028:	4a51      	ldr	r2, [pc, #324]	; (8007170 <RadioSend+0x1e0>)
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800702e:	4851      	ldr	r0, [pc, #324]	; (8007174 <RadioSend+0x1e4>)
 8007030:	f001 ff50 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2200      	movs	r2, #0
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fa00 	bl	8008440 <SUBGRF_SendPayload>
            break;
 8007040:	e087      	b.n	8007152 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007042:	f002 fb7c 	bl	800973e <RFW_Is_Init>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d118      	bne.n	800707e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800704c:	f107 020d 	add.w	r2, r7, #13
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f002 fb8a 	bl	800976e <RFW_TransmitInit>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10c      	bne.n	800707a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007060:	7b7a      	ldrb	r2, [r7, #13]
 8007062:	4b43      	ldr	r3, [pc, #268]	; (8007170 <RadioSend+0x1e0>)
 8007064:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007066:	4843      	ldr	r0, [pc, #268]	; (8007174 <RadioSend+0x1e4>)
 8007068:	f001 ff34 	bl	8008ed4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800706c:	7b7b      	ldrb	r3, [r7, #13]
 800706e:	2200      	movs	r2, #0
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 f9e4 	bl	8008440 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007078:	e06b      	b.n	8007152 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800707a:	2303      	movs	r3, #3
 800707c:	e073      	b.n	8007166 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800707e:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <RadioSend+0x1e0>)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007084:	483b      	ldr	r0, [pc, #236]	; (8007174 <RadioSend+0x1e4>)
 8007086:	f001 ff25 	bl	8008ed4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	2200      	movs	r2, #0
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f9d5 	bl	8008440 <SUBGRF_SendPayload>
            break;
 8007096:	e05c      	b.n	8007152 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007098:	4b35      	ldr	r3, [pc, #212]	; (8007170 <RadioSend+0x1e0>)
 800709a:	2202      	movs	r2, #2
 800709c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800709e:	4a34      	ldr	r2, [pc, #208]	; (8007170 <RadioSend+0x1e0>)
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80070a4:	4833      	ldr	r0, [pc, #204]	; (8007174 <RadioSend+0x1e4>)
 80070a6:	f001 ff15 	bl	8008ed4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	2200      	movs	r2, #0
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 f9c5 	bl	8008440 <SUBGRF_SendPayload>
            break;
 80070b6:	e04c      	b.n	8007152 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	482e      	ldr	r0, [pc, #184]	; (8007178 <RadioSend+0x1e8>)
 80070c0:	f000 fc98 	bl	80079f4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80070c4:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <RadioSend+0x1e0>)
 80070c6:	2202      	movs	r2, #2
 80070c8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	3301      	adds	r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	4b27      	ldr	r3, [pc, #156]	; (8007170 <RadioSend+0x1e0>)
 80070d2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80070d4:	4827      	ldr	r0, [pc, #156]	; (8007174 <RadioSend+0x1e4>)
 80070d6:	f001 fefd 	bl	8008ed4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80070da:	2100      	movs	r1, #0
 80070dc:	20f1      	movs	r0, #241	; 0xf1
 80070de:	f000 f964 	bl	80073aa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80070e2:	2100      	movs	r1, #0
 80070e4:	20f0      	movs	r0, #240	; 0xf0
 80070e6:	f000 f960 	bl	80073aa <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80070ea:	4b21      	ldr	r3, [pc, #132]	; (8007170 <RadioSend+0x1e0>)
 80070ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d108      	bne.n	8007104 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80070f2:	2170      	movs	r1, #112	; 0x70
 80070f4:	20f3      	movs	r0, #243	; 0xf3
 80070f6:	f000 f958 	bl	80073aa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80070fa:	211d      	movs	r1, #29
 80070fc:	20f2      	movs	r0, #242	; 0xf2
 80070fe:	f000 f954 	bl	80073aa <RadioWrite>
 8007102:	e007      	b.n	8007114 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007104:	21e1      	movs	r1, #225	; 0xe1
 8007106:	20f3      	movs	r0, #243	; 0xf3
 8007108:	f000 f94f 	bl	80073aa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800710c:	2104      	movs	r1, #4
 800710e:	20f2      	movs	r0, #242	; 0xf2
 8007110:	f000 f94b 	bl	80073aa <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	b29b      	uxth	r3, r3
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	b29b      	uxth	r3, r3
 800711c:	3302      	adds	r3, #2
 800711e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007120:	89fb      	ldrh	r3, [r7, #14]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b29b      	uxth	r3, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	20f4      	movs	r0, #244	; 0xf4
 800712c:	f000 f93d 	bl	80073aa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8007130:	89fb      	ldrh	r3, [r7, #14]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	20f5      	movs	r0, #245	; 0xf5
 8007138:	f000 f937 	bl	80073aa <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	3301      	adds	r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007146:	4619      	mov	r1, r3
 8007148:	480b      	ldr	r0, [pc, #44]	; (8007178 <RadioSend+0x1e8>)
 800714a:	f001 f979 	bl	8008440 <SUBGRF_SendPayload>
            break;
 800714e:	e000      	b.n	8007152 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8007150:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <RadioSend+0x1e0>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	4619      	mov	r1, r3
 8007158:	4808      	ldr	r0, [pc, #32]	; (800717c <RadioSend+0x1ec>)
 800715a:	f002 fdbb 	bl	8009cd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800715e:	4807      	ldr	r0, [pc, #28]	; (800717c <RadioSend+0x1ec>)
 8007160:	f002 fcda 	bl	8009b18 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	200005a8 	.word	0x200005a8
 8007174:	200005b6 	.word	0x200005b6
 8007178:	200004a4 	.word	0x200004a4
 800717c:	20000604 	.word	0x20000604

08007180 <RadioSleep>:

static void RadioSleep( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007186:	2300      	movs	r3, #0
 8007188:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800718a:	793b      	ldrb	r3, [r7, #4]
 800718c:	f043 0304 	orr.w	r3, r3, #4
 8007190:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007192:	7938      	ldrb	r0, [r7, #4]
 8007194:	f001 fa30 	bl	80085f8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007198:	2002      	movs	r0, #2
 800719a:	f7fa f8a3 	bl	80012e4 <HAL_Delay>
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <RadioStandby>:

static void RadioStandby( void )
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80071aa:	2000      	movs	r0, #0
 80071ac:	f001 fa56 	bl	800865c <SUBGRF_SetStandby>
}
 80071b0:	bf00      	nop
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80071bc:	f002 fabf 	bl	800973e <RFW_Is_Init>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d102      	bne.n	80071cc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80071c6:	f002 fae2 	bl	800978e <RFW_ReceiveInit>
 80071ca:	e007      	b.n	80071dc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	f240 2162 	movw	r1, #610	; 0x262
 80071d4:	f240 2062 	movw	r0, #610	; 0x262
 80071d8:	f001 fc14 	bl	8008a04 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d006      	beq.n	80071f0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4811      	ldr	r0, [pc, #68]	; (800722c <RadioRx+0x78>)
 80071e6:	f002 fd75 	bl	8009cd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80071ea:	4810      	ldr	r0, [pc, #64]	; (800722c <RadioRx+0x78>)
 80071ec:	f002 fc94 	bl	8009b18 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80071f0:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <RadioRx+0x7c>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <RadioRx+0x7c>)
 80071f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f002 f8a4 	bl	800934c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <RadioRx+0x7c>)
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800720c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007210:	f001 fa60 	bl	80086d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007214:	e005      	b.n	8007222 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <RadioRx+0x7c>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	019b      	lsls	r3, r3, #6
 800721c:	4618      	mov	r0, r3
 800721e:	f001 fa59 	bl	80086d4 <SUBGRF_SetRx>
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	2000061c 	.word	0x2000061c
 8007230:	200005a8 	.word	0x200005a8

08007234 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800723c:	f002 fa7f 	bl	800973e <RFW_Is_Init>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d102      	bne.n	800724c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8007246:	f002 faa2 	bl	800978e <RFW_ReceiveInit>
 800724a:	e007      	b.n	800725c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800724c:	2300      	movs	r3, #0
 800724e:	2200      	movs	r2, #0
 8007250:	f240 2162 	movw	r1, #610	; 0x262
 8007254:	f240 2062 	movw	r0, #610	; 0x262
 8007258:	f001 fbd4 	bl	8008a04 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4811      	ldr	r0, [pc, #68]	; (80072ac <RadioRxBoosted+0x78>)
 8007266:	f002 fd35 	bl	8009cd4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800726a:	4810      	ldr	r0, [pc, #64]	; (80072ac <RadioRxBoosted+0x78>)
 800726c:	f002 fc54 	bl	8009b18 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007270:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <RadioRxBoosted+0x7c>)
 8007272:	2200      	movs	r2, #0
 8007274:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007276:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <RadioRxBoosted+0x7c>)
 8007278:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f002 f864 	bl	800934c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <RadioRxBoosted+0x7c>)
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800728c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007290:	f001 fa40 	bl	8008714 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007294:	e005      	b.n	80072a2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <RadioRxBoosted+0x7c>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	019b      	lsls	r3, r3, #6
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fa39 	bl	8008714 <SUBGRF_SetRxBoosted>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	2000061c 	.word	0x2000061c
 80072b0:	200005a8 	.word	0x200005a8

080072b4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	005a      	lsls	r2, r3, #1
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <RadioSetRxDutyCycle+0x44>)
 80072c8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80072ca:	2300      	movs	r3, #0
 80072cc:	2200      	movs	r2, #0
 80072ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80072d6:	f001 fb95 	bl	8008a04 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <RadioSetRxDutyCycle+0x44>)
 80072dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f002 f832 	bl	800934c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 fa36 	bl	800875c <SUBGRF_SetRxDutyCycle>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200005a8 	.word	0x200005a8

080072fc <RadioStartCad>:

static void RadioStartCad( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <RadioStartCad+0x2c>)
 8007302:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f002 f81f 	bl	800934c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800730e:	2300      	movs	r3, #0
 8007310:	2200      	movs	r2, #0
 8007312:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007316:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800731a:	f001 fb73 	bl	8008a04 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800731e:	f001 fa49 	bl	80087b4 <SUBGRF_SetCad>
}
 8007322:	bf00      	nop
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200005a8 	.word	0x200005a8

0800732c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
 8007338:	4613      	mov	r3, r2
 800733a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800733c:	883b      	ldrh	r3, [r7, #0]
 800733e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007342:	fb02 f303 	mul.w	r3, r2, r3
 8007346:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 fbb7 	bl	8008abc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800734e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007352:	4618      	mov	r0, r3
 8007354:	f002 f822 	bl	800939c <SUBGRF_SetRfTxPower>
 8007358:	4603      	mov	r3, r0
 800735a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800735c:	210e      	movs	r1, #14
 800735e:	f640 101f 	movw	r0, #2335	; 0x91f
 8007362:	f001 feff 	bl	8009164 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	2101      	movs	r1, #1
 800736a:	4618      	mov	r0, r3
 800736c:	f001 ffee 	bl	800934c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007370:	f001 fa2e 	bl	80087d0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	4805      	ldr	r0, [pc, #20]	; (800738c <RadioSetTxContinuousWave+0x60>)
 8007378:	f002 fcac 	bl	8009cd4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800737c:	4803      	ldr	r0, [pc, #12]	; (800738c <RadioSetTxContinuousWave+0x60>)
 800737e:	f002 fbcb 	bl	8009b18 <UTIL_TIMER_Start>
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000604 	.word	0x20000604

08007390 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800739a:	f001 fe50 	bl	800903e <SUBGRF_GetRssiInst>
 800739e:	4603      	mov	r3, r0
 80073a0:	b21b      	sxth	r3, r3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	4603      	mov	r3, r0
 80073b2:	460a      	mov	r2, r1
 80073b4:	80fb      	strh	r3, [r7, #6]
 80073b6:	4613      	mov	r3, r2
 80073b8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80073ba:	797a      	ldrb	r2, [r7, #5]
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	4611      	mov	r1, r2
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 fecf 	bl	8009164 <SUBGRF_WriteRegister>
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	4603      	mov	r3, r0
 80073d6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 fed6 	bl	800918c <SUBGRF_ReadRegister>
 80073e0:	4603      	mov	r3, r0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	4603      	mov	r3, r0
 80073f2:	6039      	str	r1, [r7, #0]
 80073f4:	80fb      	strh	r3, [r7, #6]
 80073f6:	4613      	mov	r3, r2
 80073f8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80073fa:	797b      	ldrb	r3, [r7, #5]
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fed6 	bl	80091b4 <SUBGRF_WriteRegisters>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	80fb      	strh	r3, [r7, #6]
 800741c:	4613      	mov	r3, r2
 800741e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8007420:	797b      	ldrb	r3, [r7, #5]
 8007422:	b29a      	uxth	r2, r3
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f001 fee5 	bl	80091f8 <SUBGRF_ReadRegisters>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	460a      	mov	r2, r1
 8007442:	71fb      	strb	r3, [r7, #7]
 8007444:	4613      	mov	r3, r2
 8007446:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d10a      	bne.n	8007464 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800744e:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <RadioSetMaxPayloadLength+0x50>)
 8007450:	79bb      	ldrb	r3, [r7, #6]
 8007452:	7013      	strb	r3, [r2, #0]
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <RadioSetMaxPayloadLength+0x50>)
 8007456:	781a      	ldrb	r2, [r3, #0]
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <RadioSetMaxPayloadLength+0x54>)
 800745a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800745c:	480c      	ldr	r0, [pc, #48]	; (8007490 <RadioSetMaxPayloadLength+0x58>)
 800745e:	f001 fd39 	bl	8008ed4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8007462:	e00d      	b.n	8007480 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007464:	4b09      	ldr	r3, [pc, #36]	; (800748c <RadioSetMaxPayloadLength+0x54>)
 8007466:	7d5b      	ldrb	r3, [r3, #21]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d109      	bne.n	8007480 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800746c:	4a06      	ldr	r2, [pc, #24]	; (8007488 <RadioSetMaxPayloadLength+0x50>)
 800746e:	79bb      	ldrb	r3, [r7, #6]
 8007470:	7013      	strb	r3, [r2, #0]
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <RadioSetMaxPayloadLength+0x50>)
 8007474:	781a      	ldrb	r2, [r3, #0]
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <RadioSetMaxPayloadLength+0x54>)
 8007478:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <RadioSetMaxPayloadLength+0x58>)
 800747c:	f001 fd2a 	bl	8008ed4 <SUBGRF_SetPacketParams>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	2000000d 	.word	0x2000000d
 800748c:	200005a8 	.word	0x200005a8
 8007490:	200005b6 	.word	0x200005b6

08007494 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <RadioSetPublicNetwork+0x58>)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	7313      	strb	r3, [r2, #12]
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <RadioSetPublicNetwork+0x58>)
 80074a6:	7b1a      	ldrb	r2, [r3, #12]
 80074a8:	4b10      	ldr	r3, [pc, #64]	; (80074ec <RadioSetPublicNetwork+0x58>)
 80074aa:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80074ac:	2001      	movs	r0, #1
 80074ae:	f7ff f819 	bl	80064e4 <RadioSetModem>
    if( enable == true )
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80074b8:	2134      	movs	r1, #52	; 0x34
 80074ba:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80074be:	f001 fe51 	bl	8009164 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80074c2:	2144      	movs	r1, #68	; 0x44
 80074c4:	f240 7041 	movw	r0, #1857	; 0x741
 80074c8:	f001 fe4c 	bl	8009164 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80074cc:	e009      	b.n	80074e2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80074ce:	2114      	movs	r1, #20
 80074d0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80074d4:	f001 fe46 	bl	8009164 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80074d8:	2124      	movs	r1, #36	; 0x24
 80074da:	f240 7041 	movw	r0, #1857	; 0x741
 80074de:	f001 fe41 	bl	8009164 <SUBGRF_WriteRegister>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200005a8 	.word	0x200005a8

080074f0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80074f4:	f001 ff86 	bl	8009404 <SUBGRF_GetRadioWakeUpTime>
 80074f8:	4603      	mov	r3, r0
 80074fa:	3303      	adds	r3, #3
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}

08007500 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007508:	f000 f80e 	bl	8007528 <RadioOnTxTimeoutProcess>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800751c:	f000 f818 	bl	8007550 <RadioOnRxTimeoutProcess>
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <RadioOnTxTimeoutProcess+0x24>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d008      	beq.n	8007546 <RadioOnTxTimeoutProcess+0x1e>
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <RadioOnTxTimeoutProcess+0x24>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800753e:	4b03      	ldr	r3, [pc, #12]	; (800754c <RadioOnTxTimeoutProcess+0x24>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4798      	blx	r3
    }
}
 8007546:	bf00      	nop
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200005a4 	.word	0x200005a4

08007550 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007554:	4b07      	ldr	r3, [pc, #28]	; (8007574 <RadioOnRxTimeoutProcess+0x24>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <RadioOnRxTimeoutProcess+0x1e>
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <RadioOnRxTimeoutProcess+0x24>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007566:	4b03      	ldr	r3, [pc, #12]	; (8007574 <RadioOnRxTimeoutProcess+0x24>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4798      	blx	r3
    }
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200005a4 	.word	0x200005a4

08007578 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007582:	4a05      	ldr	r2, [pc, #20]	; (8007598 <RadioOnDioIrq+0x20>)
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800758a:	f000 f807 	bl	800759c <RadioIrqProcess>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200005a8 	.word	0x200005a8

0800759c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800759c:	b5b0      	push	{r4, r5, r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80075aa:	4ba5      	ldr	r3, [pc, #660]	; (8007840 <RadioIrqProcess+0x2a4>)
 80075ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	f000 810d 	beq.w	80077d2 <RadioIrqProcess+0x236>
 80075b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075bc:	f300 81c0 	bgt.w	8007940 <RadioIrqProcess+0x3a4>
 80075c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c4:	f000 80f1 	beq.w	80077aa <RadioIrqProcess+0x20e>
 80075c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075cc:	f300 81b8 	bgt.w	8007940 <RadioIrqProcess+0x3a4>
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	f000 80d6 	beq.w	8007782 <RadioIrqProcess+0x1e6>
 80075d6:	2b80      	cmp	r3, #128	; 0x80
 80075d8:	f300 81b2 	bgt.w	8007940 <RadioIrqProcess+0x3a4>
 80075dc:	2b20      	cmp	r3, #32
 80075de:	dc49      	bgt.n	8007674 <RadioIrqProcess+0xd8>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f340 81ad 	ble.w	8007940 <RadioIrqProcess+0x3a4>
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b1f      	cmp	r3, #31
 80075ea:	f200 81a9 	bhi.w	8007940 <RadioIrqProcess+0x3a4>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <RadioIrqProcess+0x58>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800767d 	.word	0x0800767d
 80075f8:	080076b7 	.word	0x080076b7
 80075fc:	08007941 	.word	0x08007941
 8007600:	0800785d 	.word	0x0800785d
 8007604:	08007941 	.word	0x08007941
 8007608:	08007941 	.word	0x08007941
 800760c:	08007941 	.word	0x08007941
 8007610:	080078cb 	.word	0x080078cb
 8007614:	08007941 	.word	0x08007941
 8007618:	08007941 	.word	0x08007941
 800761c:	08007941 	.word	0x08007941
 8007620:	08007941 	.word	0x08007941
 8007624:	08007941 	.word	0x08007941
 8007628:	08007941 	.word	0x08007941
 800762c:	08007941 	.word	0x08007941
 8007630:	08007941 	.word	0x08007941
 8007634:	08007941 	.word	0x08007941
 8007638:	08007941 	.word	0x08007941
 800763c:	08007941 	.word	0x08007941
 8007640:	08007941 	.word	0x08007941
 8007644:	08007941 	.word	0x08007941
 8007648:	08007941 	.word	0x08007941
 800764c:	08007941 	.word	0x08007941
 8007650:	08007941 	.word	0x08007941
 8007654:	08007941 	.word	0x08007941
 8007658:	08007941 	.word	0x08007941
 800765c:	08007941 	.word	0x08007941
 8007660:	08007941 	.word	0x08007941
 8007664:	08007941 	.word	0x08007941
 8007668:	08007941 	.word	0x08007941
 800766c:	08007941 	.word	0x08007941
 8007670:	080078db 	.word	0x080078db
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	f000 814b 	beq.w	8007910 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800767a:	e161      	b.n	8007940 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800767c:	4871      	ldr	r0, [pc, #452]	; (8007844 <RadioIrqProcess+0x2a8>)
 800767e:	f002 fab9 	bl	8009bf4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007682:	2000      	movs	r0, #0
 8007684:	f000 ffea 	bl	800865c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007688:	f002 f860 	bl	800974c <RFW_Is_LongPacketModeEnabled>
 800768c:	4603      	mov	r3, r0
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007692:	f002 f884 	bl	800979e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007696:	4b6c      	ldr	r3, [pc, #432]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8152 	beq.w	8007944 <RadioIrqProcess+0x3a8>
 80076a0:	4b69      	ldr	r3, [pc, #420]	; (8007848 <RadioIrqProcess+0x2ac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 814c 	beq.w	8007944 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80076ac:	4b66      	ldr	r3, [pc, #408]	; (8007848 <RadioIrqProcess+0x2ac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4798      	blx	r3
        break;
 80076b4:	e146      	b.n	8007944 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80076b6:	4865      	ldr	r0, [pc, #404]	; (800784c <RadioIrqProcess+0x2b0>)
 80076b8:	f002 fa9c 	bl	8009bf4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80076bc:	4b60      	ldr	r3, [pc, #384]	; (8007840 <RadioIrqProcess+0x2a4>)
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	f083 0301 	eor.w	r3, r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80076ca:	2000      	movs	r0, #0
 80076cc:	f000 ffc6 	bl	800865c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80076d0:	2100      	movs	r1, #0
 80076d2:	f640 1002 	movw	r0, #2306	; 0x902
 80076d6:	f001 fd45 	bl	8009164 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80076da:	f640 1044 	movw	r0, #2372	; 0x944
 80076de:	f001 fd55 	bl	800918c <SUBGRF_ReadRegister>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	4619      	mov	r1, r3
 80076ec:	f640 1044 	movw	r0, #2372	; 0x944
 80076f0:	f001 fd38 	bl	8009164 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	22ff      	movs	r2, #255	; 0xff
 80076f8:	4619      	mov	r1, r3
 80076fa:	4855      	ldr	r0, [pc, #340]	; (8007850 <RadioIrqProcess+0x2b4>)
 80076fc:	f000 fe7e 	bl	80083fc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8007700:	4854      	ldr	r0, [pc, #336]	; (8007854 <RadioIrqProcess+0x2b8>)
 8007702:	f001 fcdd 	bl	80090c0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007706:	4b50      	ldr	r3, [pc, #320]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 811c 	beq.w	8007948 <RadioIrqProcess+0x3ac>
 8007710:	4b4d      	ldr	r3, [pc, #308]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8116 	beq.w	8007948 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800771c:	4b48      	ldr	r3, [pc, #288]	; (8007840 <RadioIrqProcess+0x2a4>)
 800771e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007722:	2b01      	cmp	r3, #1
 8007724:	d10e      	bne.n	8007744 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007726:	4b48      	ldr	r3, [pc, #288]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689c      	ldr	r4, [r3, #8]
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	b299      	uxth	r1, r3
 8007730:	4b43      	ldr	r3, [pc, #268]	; (8007840 <RadioIrqProcess+0x2a4>)
 8007732:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007736:	b21a      	sxth	r2, r3
 8007738:	4b41      	ldr	r3, [pc, #260]	; (8007840 <RadioIrqProcess+0x2a4>)
 800773a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800773e:	4844      	ldr	r0, [pc, #272]	; (8007850 <RadioIrqProcess+0x2b4>)
 8007740:	47a0      	blx	r4
                break;
 8007742:	e01d      	b.n	8007780 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007744:	4b3e      	ldr	r3, [pc, #248]	; (8007840 <RadioIrqProcess+0x2a4>)
 8007746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007748:	463a      	mov	r2, r7
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f001 ff4b 	bl	80095e8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007752:	4b3d      	ldr	r3, [pc, #244]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689c      	ldr	r4, [r3, #8]
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	b299      	uxth	r1, r3
 800775c:	4b38      	ldr	r3, [pc, #224]	; (8007840 <RadioIrqProcess+0x2a4>)
 800775e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8007762:	b218      	sxth	r0, r3
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800776a:	4a3b      	ldr	r2, [pc, #236]	; (8007858 <RadioIrqProcess+0x2bc>)
 800776c:	fb82 5203 	smull	r5, r2, r2, r3
 8007770:	1192      	asrs	r2, r2, #6
 8007772:	17db      	asrs	r3, r3, #31
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b25b      	sxtb	r3, r3
 8007778:	4602      	mov	r2, r0
 800777a:	4835      	ldr	r0, [pc, #212]	; (8007850 <RadioIrqProcess+0x2b4>)
 800777c:	47a0      	blx	r4
                break;
 800777e:	bf00      	nop
        break;
 8007780:	e0e2      	b.n	8007948 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007782:	2000      	movs	r0, #0
 8007784:	f000 ff6a 	bl	800865c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007788:	4b2f      	ldr	r3, [pc, #188]	; (8007848 <RadioIrqProcess+0x2ac>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80dd 	beq.w	800794c <RadioIrqProcess+0x3b0>
 8007792:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80d7 	beq.w	800794c <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800779e:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	2000      	movs	r0, #0
 80077a6:	4798      	blx	r3
        break;
 80077a8:	e0d0      	b.n	800794c <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80077aa:	2000      	movs	r0, #0
 80077ac:	f000 ff56 	bl	800865c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80077b0:	4b25      	ldr	r3, [pc, #148]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80cb 	beq.w	8007950 <RadioIrqProcess+0x3b4>
 80077ba:	4b23      	ldr	r3, [pc, #140]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80c5 	beq.w	8007950 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80077c6:	4b20      	ldr	r3, [pc, #128]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	2001      	movs	r0, #1
 80077ce:	4798      	blx	r3
        break;
 80077d0:	e0be      	b.n	8007950 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80077d2:	f000 fdf9 	bl	80083c8 <SUBGRF_GetOperatingMode>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d115      	bne.n	8007808 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80077dc:	4819      	ldr	r0, [pc, #100]	; (8007844 <RadioIrqProcess+0x2a8>)
 80077de:	f002 fa09 	bl	8009bf4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80077e2:	2000      	movs	r0, #0
 80077e4:	f000 ff3a 	bl	800865c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80077e8:	4b17      	ldr	r3, [pc, #92]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80b1 	beq.w	8007954 <RadioIrqProcess+0x3b8>
 80077f2:	4b15      	ldr	r3, [pc, #84]	; (8007848 <RadioIrqProcess+0x2ac>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 80ab 	beq.w	8007954 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	4798      	blx	r3
        break;
 8007806:	e0a5      	b.n	8007954 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007808:	f000 fdde 	bl	80083c8 <SUBGRF_GetOperatingMode>
 800780c:	4603      	mov	r3, r0
 800780e:	2b05      	cmp	r3, #5
 8007810:	f040 80a0 	bne.w	8007954 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007814:	480d      	ldr	r0, [pc, #52]	; (800784c <RadioIrqProcess+0x2b0>)
 8007816:	f002 f9ed 	bl	8009bf4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800781a:	2000      	movs	r0, #0
 800781c:	f000 ff1e 	bl	800865c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007820:	4b09      	ldr	r3, [pc, #36]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8095 	beq.w	8007954 <RadioIrqProcess+0x3b8>
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <RadioIrqProcess+0x2ac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 808f 	beq.w	8007954 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8007836:	4b04      	ldr	r3, [pc, #16]	; (8007848 <RadioIrqProcess+0x2ac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	4798      	blx	r3
        break;
 800783e:	e089      	b.n	8007954 <RadioIrqProcess+0x3b8>
 8007840:	200005a8 	.word	0x200005a8
 8007844:	20000604 	.word	0x20000604
 8007848:	200005a4 	.word	0x200005a4
 800784c:	2000061c 	.word	0x2000061c
 8007850:	200004a4 	.word	0x200004a4
 8007854:	200005cc 	.word	0x200005cc
 8007858:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800785c:	4b44      	ldr	r3, [pc, #272]	; (8007970 <RadioIrqProcess+0x3d4>)
 800785e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007860:	2b00      	cmp	r3, #0
 8007862:	d079      	beq.n	8007958 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007864:	4a43      	ldr	r2, [pc, #268]	; (8007974 <RadioIrqProcess+0x3d8>)
 8007866:	4b42      	ldr	r3, [pc, #264]	; (8007970 <RadioIrqProcess+0x3d4>)
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	f640 1003 	movw	r0, #2307	; 0x903
 8007874:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007876:	4a3f      	ldr	r2, [pc, #252]	; (8007974 <RadioIrqProcess+0x3d8>)
 8007878:	4b3d      	ldr	r3, [pc, #244]	; (8007970 <RadioIrqProcess+0x3d4>)
 800787a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	b2db      	uxtb	r3, r3
 8007880:	4619      	mov	r1, r3
 8007882:	f640 1004 	movw	r0, #2308	; 0x904
 8007886:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007888:	4a3a      	ldr	r2, [pc, #232]	; (8007974 <RadioIrqProcess+0x3d8>)
 800788a:	4b39      	ldr	r3, [pc, #228]	; (8007970 <RadioIrqProcess+0x3d4>)
 800788c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788e:	b2db      	uxtb	r3, r3
 8007890:	4619      	mov	r1, r3
 8007892:	f640 1005 	movw	r0, #2309	; 0x905
 8007896:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007898:	4c36      	ldr	r4, [pc, #216]	; (8007974 <RadioIrqProcess+0x3d8>)
 800789a:	4b37      	ldr	r3, [pc, #220]	; (8007978 <RadioIrqProcess+0x3dc>)
 800789c:	f640 1002 	movw	r0, #2306	; 0x902
 80078a0:	4798      	blx	r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	f043 0301 	orr.w	r3, r3, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	4619      	mov	r1, r3
 80078ac:	f640 1002 	movw	r0, #2306	; 0x902
 80078b0:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80078b2:	4b2f      	ldr	r3, [pc, #188]	; (8007970 <RadioIrqProcess+0x3d4>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80078b8:	2300      	movs	r3, #0
 80078ba:	2200      	movs	r2, #0
 80078bc:	f240 2162 	movw	r1, #610	; 0x262
 80078c0:	f240 2062 	movw	r0, #610	; 0x262
 80078c4:	f001 f89e 	bl	8008a04 <SUBGRF_SetDioIrqParams>
        break;
 80078c8:	e046      	b.n	8007958 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80078ca:	f001 ff38 	bl	800973e <RFW_Is_Init>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d143      	bne.n	800795c <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80078d4:	f001 ff69 	bl	80097aa <RFW_ReceivePayload>
        break;
 80078d8:	e040      	b.n	800795c <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80078da:	4828      	ldr	r0, [pc, #160]	; (800797c <RadioIrqProcess+0x3e0>)
 80078dc:	f002 f98a 	bl	8009bf4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80078e0:	4b23      	ldr	r3, [pc, #140]	; (8007970 <RadioIrqProcess+0x3d4>)
 80078e2:	785b      	ldrb	r3, [r3, #1]
 80078e4:	f083 0301 	eor.w	r3, r3, #1
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 80078ee:	2000      	movs	r0, #0
 80078f0:	f000 feb4 	bl	800865c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80078f4:	4b22      	ldr	r3, [pc, #136]	; (8007980 <RadioIrqProcess+0x3e4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d031      	beq.n	8007960 <RadioIrqProcess+0x3c4>
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <RadioIrqProcess+0x3e4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d02c      	beq.n	8007960 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007906:	4b1e      	ldr	r3, [pc, #120]	; (8007980 <RadioIrqProcess+0x3e4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	4798      	blx	r3
        break;
 800790e:	e027      	b.n	8007960 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8007910:	4b17      	ldr	r3, [pc, #92]	; (8007970 <RadioIrqProcess+0x3d4>)
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	f083 0301 	eor.w	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800791e:	2000      	movs	r0, #0
 8007920:	f000 fe9c 	bl	800865c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007924:	4b16      	ldr	r3, [pc, #88]	; (8007980 <RadioIrqProcess+0x3e4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d01b      	beq.n	8007964 <RadioIrqProcess+0x3c8>
 800792c:	4b14      	ldr	r3, [pc, #80]	; (8007980 <RadioIrqProcess+0x3e4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8007936:	4b12      	ldr	r3, [pc, #72]	; (8007980 <RadioIrqProcess+0x3e4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4798      	blx	r3
        break;
 800793e:	e011      	b.n	8007964 <RadioIrqProcess+0x3c8>
        break;
 8007940:	bf00      	nop
 8007942:	e010      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007944:	bf00      	nop
 8007946:	e00e      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007948:	bf00      	nop
 800794a:	e00c      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 800794c:	bf00      	nop
 800794e:	e00a      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007950:	bf00      	nop
 8007952:	e008      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007954:	bf00      	nop
 8007956:	e006      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007958:	bf00      	nop
 800795a:	e004      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 800795c:	bf00      	nop
 800795e:	e002      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <RadioIrqProcess+0x3ca>
        break;
 8007964:	bf00      	nop
    }
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bdb0      	pop	{r4, r5, r7, pc}
 800796e:	bf00      	nop
 8007970:	200005a8 	.word	0x200005a8
 8007974:	080073ab 	.word	0x080073ab
 8007978:	080073cf 	.word	0x080073cf
 800797c:	2000061c 	.word	0x2000061c
 8007980:	200005a4 	.word	0x200005a4

08007984 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <RadioTxPrbs+0x2c>)
 800798a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800798e:	2101      	movs	r1, #1
 8007990:	4618      	mov	r0, r3
 8007992:	f001 fcdb 	bl	800934c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <RadioTxPrbs+0x30>)
 8007998:	212d      	movs	r1, #45	; 0x2d
 800799a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800799e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80079a0:	f000 ff1f 	bl	80087e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80079a4:	4804      	ldr	r0, [pc, #16]	; (80079b8 <RadioTxPrbs+0x34>)
 80079a6:	f000 fe75 	bl	8008694 <SUBGRF_SetTx>
}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200005a8 	.word	0x200005a8
 80079b4:	080073ab 	.word	0x080073ab
 80079b8:	000fffff 	.word	0x000fffff

080079bc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80079c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fce6 	bl	800939c <SUBGRF_SetRfTxPower>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80079d4:	210e      	movs	r1, #14
 80079d6:	f640 101f 	movw	r0, #2335	; 0x91f
 80079da:	f001 fbc3 	bl	8009164 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2101      	movs	r1, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f001 fcb2 	bl	800934c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80079e8:	f000 fef2 	bl	80087d0 <SUBGRF_SetTxContinuousWave>
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
 8007a0e:	e011      	b.n	8007a34 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	440b      	add	r3, r1
 8007a1e:	43d2      	mvns	r2, r2
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61bb      	str	r3, [r7, #24]
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	dbe9      	blt.n	8007a10 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61bb      	str	r3, [r7, #24]
 8007a40:	e049      	b.n	8007ad6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	425a      	negs	r2, r3
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	f002 0207 	and.w	r2, r2, #7
 8007a4e:	bf58      	it	pl
 8007a50:	4253      	negpl	r3, r2
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	f1c3 0307 	rsb	r3, r3, #7
 8007a58:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da00      	bge.n	8007a62 <payload_integration+0x6e>
 8007a60:	3307      	adds	r3, #7
 8007a62:	10db      	asrs	r3, r3, #3
 8007a64:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	425a      	negs	r2, r3
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	f002 0207 	and.w	r2, r2, #7
 8007a74:	bf58      	it	pl
 8007a76:	4253      	negpl	r3, r2
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	f1c3 0307 	rsb	r3, r3, #7
 8007a7e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	3301      	adds	r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da00      	bge.n	8007a8a <payload_integration+0x96>
 8007a88:	3307      	adds	r3, #7
 8007a8a:	10db      	asrs	r3, r3, #3
 8007a8c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007a8e:	7dbb      	ldrb	r3, [r7, #22]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	fa42 f303 	asr.w	r3, r2, r3
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007aa6:	7ffa      	ldrb	r2, [r7, #31]
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	4053      	eors	r3, r2
 8007aac:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007aae:	7d3b      	ldrb	r3, [r7, #20]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	b25a      	sxtb	r2, r3
 8007ab8:	7ff9      	ldrb	r1, [r7, #31]
 8007aba:	7d7b      	ldrb	r3, [r7, #21]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	b259      	sxtb	r1, r3
 8007ac6:	7d3b      	ldrb	r3, [r7, #20]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	b2ca      	uxtb	r2, r1
 8007ace:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	dbb0      	blt.n	8007a42 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007ae0:	7ffb      	ldrb	r3, [r7, #31]
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	b25a      	sxtb	r2, r3
 8007ae6:	7ffb      	ldrb	r3, [r7, #31]
 8007ae8:	019b      	lsls	r3, r3, #6
 8007aea:	b25b      	sxtb	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	7ffa      	ldrb	r2, [r7, #31]
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d101      	bne.n	8007afa <payload_integration+0x106>
 8007af6:	2220      	movs	r2, #32
 8007af8:	e000      	b.n	8007afc <payload_integration+0x108>
 8007afa:	2200      	movs	r2, #0
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b259      	sxtb	r1, r3
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4413      	add	r3, r2
 8007b06:	b2ca      	uxtb	r2, r1
 8007b08:	701a      	strb	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	3724      	adds	r7, #36	; 0x24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8007b28:	2300      	movs	r3, #0
 8007b2a:	623b      	str	r3, [r7, #32]
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007b30:	f001 fdff 	bl	8009732 <RFW_DeInit>

    if( rxContinuous != 0 )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4ba3      	ldr	r3, [pc, #652]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007b4c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <RadioSetRxGenericConfig+0x48>
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f000 80dc 	beq.w	8007d12 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007b5a:	e194      	b.n	8007e86 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <RadioSetRxGenericConfig+0x58>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b70:	e18a      	b.n	8007e88 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	7f9b      	ldrb	r3, [r3, #30]
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d902      	bls.n	8007b80 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b7e:	e183      	b.n	8007e88 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6919      	ldr	r1, [r3, #16]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7f9b      	ldrb	r3, [r3, #30]
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f107 0320 	add.w	r3, r7, #32
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f001 ff52 	bl	8009a38 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf14      	ite	ne
 8007b9c:	2301      	movne	r3, #1
 8007b9e:	2300      	moveq	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 fe26 	bl	80087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ba8:	4b8b      	ldr	r3, [pc, #556]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a88      	ldr	r2, [pc, #544]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bb6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007bbe:	4b86      	ldr	r3, [pc, #536]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 fce5 	bl	8009598 <SUBGRF_GetFskBandwidthRegValue>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b81      	ldr	r3, [pc, #516]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007bd8:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	4b7b      	ldr	r3, [pc, #492]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bea:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	7fda      	ldrb	r2, [r3, #31]
 8007bf0:	4b79      	ldr	r3, [pc, #484]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bf2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	7f9b      	ldrb	r3, [r3, #30]
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	4b76      	ldr	r3, [pc, #472]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007bfe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007c06:	4b74      	ldr	r3, [pc, #464]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c08:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4b6f      	ldr	r3, [pc, #444]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c1c:	759a      	strb	r2, [r3, #22]
 8007c1e:	e00b      	b.n	8007c38 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d103      	bne.n	8007c32 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007c2a:	4b6b      	ldr	r3, [pc, #428]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c2c:	22ff      	movs	r2, #255	; 0xff
 8007c2e:	759a      	strb	r2, [r3, #22]
 8007c30:	e002      	b.n	8007c38 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007c32:	4b69      	ldr	r3, [pc, #420]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d004      	beq.n	8007c4c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d12d      	bne.n	8007ca8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c52:	2bf1      	cmp	r3, #241	; 0xf1
 8007c54:	d00c      	beq.n	8007c70 <RadioSetRxGenericConfig+0x15c>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c5c:	2bf2      	cmp	r3, #242	; 0xf2
 8007c5e:	d007      	beq.n	8007c70 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d002      	beq.n	8007c70 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c6e:	e10b      	b.n	8007e88 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8007c70:	2300      	movs	r3, #0
 8007c72:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007c78:	4b58      	ldr	r3, [pc, #352]	; (8007ddc <RadioSetRxGenericConfig+0x2c8>)
 8007c7a:	6819      	ldr	r1, [r3, #0]
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	4a57      	ldr	r2, [pc, #348]	; (8007de0 <RadioSetRxGenericConfig+0x2cc>)
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 fd48 	bl	8009718 <RFW_Init>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <RadioSetRxGenericConfig+0x180>
                return -1;
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c92:	e0f9      	b.n	8007e88 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007c94:	4b50      	ldr	r3, [pc, #320]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007c9a:	4b4f      	ldr	r3, [pc, #316]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007ca0:	4b4d      	ldr	r3, [pc, #308]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	755a      	strb	r2, [r3, #21]
        {
 8007ca6:	e00e      	b.n	8007cc6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007cae:	4b4a      	ldr	r3, [pc, #296]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007cb0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007cb8:	4b47      	ldr	r3, [pc, #284]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007cba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007cc2:	4b45      	ldr	r3, [pc, #276]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007cc4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007cc6:	f7ff fa6e 	bl	80071a6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007cca:	2000      	movs	r0, #0
 8007ccc:	f7fe fc0a 	bl	80064e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007cd0:	4844      	ldr	r0, [pc, #272]	; (8007de4 <RadioSetRxGenericConfig+0x2d0>)
 8007cd2:	f001 f82d 	bl	8008d30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cd6:	4844      	ldr	r0, [pc, #272]	; (8007de8 <RadioSetRxGenericConfig+0x2d4>)
 8007cd8:	f001 f8fc 	bl	8008ed4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007cdc:	f107 0320 	add.w	r3, r7, #32
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fbc0 	bl	8008466 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	8b9b      	ldrh	r3, [r3, #28]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fc0a 	bl	8008504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	8b1b      	ldrh	r3, [r3, #24]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fbe5 	bl	80084c4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007d00:	fb03 f202 	mul.w	r2, r3, r2
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	4a32      	ldr	r2, [pc, #200]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d0e:	6093      	str	r3, [r2, #8]
        break;
 8007d10:	e0b9      	b.n	8007e86 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1e:	e0b3      	b.n	8007e88 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d104      	bne.n	8007d34 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d32:	e002      	b.n	8007d3a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8007d34:	23ff      	movs	r3, #255	; 0xff
 8007d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bf14      	ite	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	2300      	moveq	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fd53 	bl	80087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fd5d 	bl	8008812 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007d58:	4b1f      	ldr	r3, [pc, #124]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007d66:	4b1c      	ldr	r3, [pc, #112]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8007d72:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d010      	beq.n	8007db0 <RadioSetRxGenericConfig+0x29c>
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	dc2c      	bgt.n	8007dec <RadioSetRxGenericConfig+0x2d8>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <RadioSetRxGenericConfig+0x288>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d005      	beq.n	8007da6 <RadioSetRxGenericConfig+0x292>
            break;
 8007d9a:	e027      	b.n	8007dec <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007d9c:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007da4:	e023      	b.n	8007dee <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007da6:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007dae:	e01e      	b.n	8007dee <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007db6:	2b0b      	cmp	r3, #11
 8007db8:	d004      	beq.n	8007dc4 <RadioSetRxGenericConfig+0x2b0>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007dc0:	2b0c      	cmp	r3, #12
 8007dc2:	d104      	bne.n	8007dce <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007dcc:	e00f      	b.n	8007dee <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007dce:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <RadioSetRxGenericConfig+0x2c4>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007dd6:	e00a      	b.n	8007dee <RadioSetRxGenericConfig+0x2da>
 8007dd8:	200005a8 	.word	0x200005a8
 8007ddc:	200005a4 	.word	0x200005a4
 8007de0:	2000061c 	.word	0x2000061c
 8007de4:	200005e0 	.word	0x200005e0
 8007de8:	200005b6 	.word	0x200005b6
            break;
 8007dec:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007dee:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8007df8:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007dfa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e04:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007e06:	4a22      	ldr	r2, [pc, #136]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e0c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007e14:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e16:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8007e20:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007e26:	f7ff f9be 	bl	80071a6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007e2a:	2001      	movs	r0, #1
 8007e2c:	f7fe fb5a 	bl	80064e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007e30:	4818      	ldr	r0, [pc, #96]	; (8007e94 <RadioSetRxGenericConfig+0x380>)
 8007e32:	f000 ff7d 	bl	8008d30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e36:	4818      	ldr	r0, [pc, #96]	; (8007e98 <RadioSetRxGenericConfig+0x384>)
 8007e38:	f001 f84c 	bl	8008ed4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007e3c:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10d      	bne.n	8007e62 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007e46:	f240 7036 	movw	r0, #1846	; 0x736
 8007e4a:	f001 f99f 	bl	800918c <SUBGRF_ReadRegister>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f023 0304 	bic.w	r3, r3, #4
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	4619      	mov	r1, r3
 8007e58:	f240 7036 	movw	r0, #1846	; 0x736
 8007e5c:	f001 f982 	bl	8009164 <SUBGRF_WriteRegister>
 8007e60:	e00c      	b.n	8007e7c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007e62:	f240 7036 	movw	r0, #1846	; 0x736
 8007e66:	f001 f991 	bl	800918c <SUBGRF_ReadRegister>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f043 0304 	orr.w	r3, r3, #4
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	f240 7036 	movw	r0, #1846	; 0x736
 8007e78:	f001 f974 	bl	8009164 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <RadioSetRxGenericConfig+0x37c>)
 8007e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e82:	609a      	str	r2, [r3, #8]
        break;
 8007e84:	bf00      	nop
    }
    return status;
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3730      	adds	r7, #48	; 0x30
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200005a8 	.word	0x200005a8
 8007e94:	200005e0 	.word	0x200005e0
 8007e98:	200005b6 	.word	0x200005b6

08007e9c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08e      	sub	sp, #56	; 0x38
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73fb      	strb	r3, [r7, #15]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8007eae:	2300      	movs	r3, #0
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007eb6:	f001 fc3c 	bl	8009732 <RFW_DeInit>
    switch( modem )
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	f200 8204 	bhi.w	80082ca <RadioSetTxGenericConfig+0x42e>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <RadioSetTxGenericConfig+0x2c>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	0800804d 	.word	0x0800804d
 8007ecc:	08008195 	.word	0x08008195
 8007ed0:	0800828d 	.word	0x0800828d
 8007ed4:	08007ed9 	.word	0x08007ed9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	7c9b      	ldrb	r3, [r3, #18]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d902      	bls.n	8007ee6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8007ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ee4:	e206      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6899      	ldr	r1, [r3, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	7c9b      	ldrb	r3, [r3, #18]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 fd9f 	bl	8009a38 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8007f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f06:	e1f5      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d813      	bhi.n	8007f3c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8007f14:	2302      	movs	r3, #2
 8007f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8007f1a:	4b99      	ldr	r3, [pc, #612]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8007f20:	4b97      	ldr	r3, [pc, #604]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f22:	2203      	movs	r2, #3
 8007f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a94      	ldr	r2, [pc, #592]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f2e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	7cda      	ldrb	r2, [r3, #19]
 8007f34:	4b92      	ldr	r3, [pc, #584]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f3a:	e017      	b.n	8007f6c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007f42:	4b8f      	ldr	r3, [pc, #572]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007f48:	4b8d      	ldr	r3, [pc, #564]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a8a      	ldr	r2, [pc, #552]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f56:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	7cda      	ldrb	r2, [r3, #19]
 8007f5c:	4b88      	ldr	r3, [pc, #544]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	089b      	lsrs	r3, r3, #2
 8007f68:	4a85      	ldr	r2, [pc, #532]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f6a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	4b82      	ldr	r3, [pc, #520]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f78:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007f7a:	4b81      	ldr	r3, [pc, #516]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	7c9b      	ldrb	r3, [r3, #18]
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	4b7d      	ldr	r3, [pc, #500]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f8a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007f8c:	4b7c      	ldr	r3, [pc, #496]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	7d9b      	ldrb	r3, [r3, #22]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d003      	beq.n	8007fa2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	7d1b      	ldrb	r3, [r3, #20]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d12b      	bne.n	8007ffa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	7d5b      	ldrb	r3, [r3, #21]
 8007fa6:	2bf1      	cmp	r3, #241	; 0xf1
 8007fa8:	d00a      	beq.n	8007fc0 <RadioSetTxGenericConfig+0x124>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	7d5b      	ldrb	r3, [r3, #21]
 8007fae:	2bf2      	cmp	r3, #242	; 0xf2
 8007fb0:	d006      	beq.n	8007fc0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	7d5b      	ldrb	r3, [r3, #21]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d002      	beq.n	8007fc0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fbe:	e199      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007fca:	4b6e      	ldr	r3, [pc, #440]	; (8008184 <RadioSetTxGenericConfig+0x2e8>)
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	f107 0320 	add.w	r3, r7, #32
 8007fd2:	4a6d      	ldr	r2, [pc, #436]	; (8008188 <RadioSetTxGenericConfig+0x2ec>)
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fb9f 	bl	8009718 <RFW_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fe4:	e186      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007fe6:	4b66      	ldr	r3, [pc, #408]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007fec:	4b64      	ldr	r3, [pc, #400]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007ff2:	4b63      	ldr	r3, [pc, #396]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	755a      	strb	r2, [r3, #21]
        {
 8007ff8:	e00b      	b.n	8008012 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	7d5a      	ldrb	r2, [r3, #21]
 8007ffe:	4b60      	ldr	r3, [pc, #384]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008000:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	7d9a      	ldrb	r2, [r3, #22]
 8008006:	4b5e      	ldr	r3, [pc, #376]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008008:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	7d1a      	ldrb	r2, [r3, #20]
 800800e:	4b5c      	ldr	r3, [pc, #368]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008010:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008012:	f7ff f8c8 	bl	80071a6 <RadioStandby>
        RadioSetModem( radio_modem );
 8008016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fa62 	bl	80064e4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008020:	485a      	ldr	r0, [pc, #360]	; (800818c <RadioSetTxGenericConfig+0x2f0>)
 8008022:	f000 fe85 	bl	8008d30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008026:	485a      	ldr	r0, [pc, #360]	; (8008190 <RadioSetTxGenericConfig+0x2f4>)
 8008028:	f000 ff54 	bl	8008ed4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800802c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fa18 	bl	8008466 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	8a1b      	ldrh	r3, [r3, #16]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fa62 	bl	8008504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	899b      	ldrh	r3, [r3, #12]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fa3d 	bl	80084c4 <SUBGRF_SetCrcPolynomial>
        break;
 800804a:	e13f      	b.n	80082cc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008058:	e14c      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	7c9b      	ldrb	r3, [r3, #18]
 800805e:	2b08      	cmp	r3, #8
 8008060:	d902      	bls.n	8008068 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008066:	e145      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6899      	ldr	r1, [r3, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	7c9b      	ldrb	r3, [r3, #18]
 8008070:	b29a      	uxth	r2, r3
 8008072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008076:	4618      	mov	r0, r3
 8008078:	f001 fcde 	bl	8009a38 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800807c:	4b40      	ldr	r3, [pc, #256]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3d      	ldr	r2, [pc, #244]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800808a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	7cda      	ldrb	r2, [r3, #19]
 8008090:	4b3b      	ldr	r3, [pc, #236]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	4a39      	ldr	r2, [pc, #228]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800809c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800809e:	4b38      	ldr	r3, [pc, #224]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	4b34      	ldr	r3, [pc, #208]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 80080b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80080b2:	4b33      	ldr	r3, [pc, #204]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 80080b4:	2204      	movs	r2, #4
 80080b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	7c9b      	ldrb	r3, [r3, #18]
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	4b2f      	ldr	r3, [pc, #188]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 80080c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80080c4:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7d9b      	ldrb	r3, [r3, #22]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d003      	beq.n	80080da <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	7d1b      	ldrb	r3, [r3, #20]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d12a      	bne.n	8008130 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	7d5b      	ldrb	r3, [r3, #21]
 80080de:	2bf1      	cmp	r3, #241	; 0xf1
 80080e0:	d00a      	beq.n	80080f8 <RadioSetTxGenericConfig+0x25c>
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7d5b      	ldrb	r3, [r3, #21]
 80080e6:	2bf2      	cmp	r3, #242	; 0xf2
 80080e8:	d006      	beq.n	80080f8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	7d5b      	ldrb	r3, [r3, #21]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d002      	beq.n	80080f8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f6:	e0fd      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80080f8:	2301      	movs	r3, #1
 80080fa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008100:	4b20      	ldr	r3, [pc, #128]	; (8008184 <RadioSetTxGenericConfig+0x2e8>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	f107 0314 	add.w	r3, r7, #20
 8008108:	4a1f      	ldr	r2, [pc, #124]	; (8008188 <RadioSetTxGenericConfig+0x2ec>)
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fb04 	bl	8009718 <RFW_Init>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8008116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800811a:	e0eb      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800811c:	4b18      	ldr	r3, [pc, #96]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800811e:	2200      	movs	r2, #0
 8008120:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008122:	4b17      	ldr	r3, [pc, #92]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008124:	2201      	movs	r2, #1
 8008126:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800812a:	2200      	movs	r2, #0
 800812c:	755a      	strb	r2, [r3, #21]
        {
 800812e:	e00b      	b.n	8008148 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	7d5a      	ldrb	r2, [r3, #21]
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008136:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	7d9a      	ldrb	r2, [r3, #22]
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 800813e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	7d1a      	ldrb	r2, [r3, #20]
 8008144:	4b0e      	ldr	r3, [pc, #56]	; (8008180 <RadioSetTxGenericConfig+0x2e4>)
 8008146:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008148:	f7ff f82d 	bl	80071a6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800814c:	2000      	movs	r0, #0
 800814e:	f7fe f9c9 	bl	80064e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008152:	480e      	ldr	r0, [pc, #56]	; (800818c <RadioSetTxGenericConfig+0x2f0>)
 8008154:	f000 fdec 	bl	8008d30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008158:	480d      	ldr	r0, [pc, #52]	; (8008190 <RadioSetTxGenericConfig+0x2f4>)
 800815a:	f000 febb 	bl	8008ed4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800815e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f97f 	bl	8008466 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	8a1b      	ldrh	r3, [r3, #16]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f9c9 	bl	8008504 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	899b      	ldrh	r3, [r3, #12]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 f9a4 	bl	80084c4 <SUBGRF_SetCrcPolynomial>
        break;
 800817c:	e0a6      	b.n	80082cc <RadioSetTxGenericConfig+0x430>
 800817e:	bf00      	nop
 8008180:	200005a8 	.word	0x200005a8
 8008184:	200005a4 	.word	0x200005a4
 8008188:	20000604 	.word	0x20000604
 800818c:	200005e0 	.word	0x200005e0
 8008190:	200005b6 	.word	0x200005b6
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008194:	4b59      	ldr	r3, [pc, #356]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	4b56      	ldr	r3, [pc, #344]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	785a      	ldrb	r2, [r3, #1]
 80081aa:	4b54      	ldr	r3, [pc, #336]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	789a      	ldrb	r2, [r3, #2]
 80081b4:	4b51      	ldr	r3, [pc, #324]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	78db      	ldrb	r3, [r3, #3]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d010      	beq.n	80081e4 <RadioSetTxGenericConfig+0x348>
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	dc20      	bgt.n	8008208 <RadioSetTxGenericConfig+0x36c>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <RadioSetTxGenericConfig+0x334>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d005      	beq.n	80081da <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80081ce:	e01b      	b.n	8008208 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80081d0:	4b4a      	ldr	r3, [pc, #296]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80081d8:	e017      	b.n	800820a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80081da:	4b48      	ldr	r3, [pc, #288]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80081e2:	e012      	b.n	800820a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b0b      	cmp	r3, #11
 80081ea:	d003      	beq.n	80081f4 <RadioSetTxGenericConfig+0x358>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b0c      	cmp	r3, #12
 80081f2:	d104      	bne.n	80081fe <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80081f4:	4b41      	ldr	r3, [pc, #260]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80081fc:	e005      	b.n	800820a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80081fe:	4b3f      	ldr	r3, [pc, #252]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008206:	e000      	b.n	800820a <RadioSetTxGenericConfig+0x36e>
            break;
 8008208:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800820a:	4b3c      	ldr	r3, [pc, #240]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 800820c:	2201      	movs	r2, #1
 800820e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	889a      	ldrh	r2, [r3, #4]
 8008214:	4b39      	ldr	r3, [pc, #228]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 8008216:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	799a      	ldrb	r2, [r3, #6]
 800821c:	4b37      	ldr	r3, [pc, #220]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 800821e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	79da      	ldrb	r2, [r3, #7]
 8008224:	4b35      	ldr	r3, [pc, #212]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 8008226:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	7a1a      	ldrb	r2, [r3, #8]
 800822e:	4b33      	ldr	r3, [pc, #204]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 8008230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8008234:	f7fe ffb7 	bl	80071a6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008238:	2001      	movs	r0, #1
 800823a:	f7fe f953 	bl	80064e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800823e:	4830      	ldr	r0, [pc, #192]	; (8008300 <RadioSetTxGenericConfig+0x464>)
 8008240:	f000 fd76 	bl	8008d30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008244:	482f      	ldr	r0, [pc, #188]	; (8008304 <RadioSetTxGenericConfig+0x468>)
 8008246:	f000 fe45 	bl	8008ed4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 800824c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008250:	2b06      	cmp	r3, #6
 8008252:	d10d      	bne.n	8008270 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008254:	f640 0089 	movw	r0, #2185	; 0x889
 8008258:	f000 ff98 	bl	800918c <SUBGRF_ReadRegister>
 800825c:	4603      	mov	r3, r0
 800825e:	f023 0304 	bic.w	r3, r3, #4
 8008262:	b2db      	uxtb	r3, r3
 8008264:	4619      	mov	r1, r3
 8008266:	f640 0089 	movw	r0, #2185	; 0x889
 800826a:	f000 ff7b 	bl	8009164 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800826e:	e02d      	b.n	80082cc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008270:	f640 0089 	movw	r0, #2185	; 0x889
 8008274:	f000 ff8a 	bl	800918c <SUBGRF_ReadRegister>
 8008278:	4603      	mov	r3, r0
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	b2db      	uxtb	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	f640 0089 	movw	r0, #2185	; 0x889
 8008286:	f000 ff6d 	bl	8009164 <SUBGRF_WriteRegister>
        break;
 800828a:	e01f      	b.n	80082cc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <RadioSetTxGenericConfig+0x402>
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800829c:	d902      	bls.n	80082a4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082a2:	e027      	b.n	80082f4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80082a4:	2003      	movs	r0, #3
 80082a6:	f7fe f91d 	bl	80064e4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082ac:	2202      	movs	r2, #2
 80082ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a11      	ldr	r2, [pc, #68]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082b8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082bc:	2216      	movs	r2, #22
 80082be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80082c2:	480f      	ldr	r0, [pc, #60]	; (8008300 <RadioSetTxGenericConfig+0x464>)
 80082c4:	f000 fd34 	bl	8008d30 <SUBGRF_SetModulationParams>
        break;
 80082c8:	e000      	b.n	80082cc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80082ca:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80082cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 f863 	bl	800939c <SUBGRF_SetRfTxPower>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	4b08      	ldr	r3, [pc, #32]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80082e0:	4b06      	ldr	r3, [pc, #24]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 fa37 	bl	800975a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80082ec:	4a03      	ldr	r2, [pc, #12]	; (80082fc <RadioSetTxGenericConfig+0x460>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6053      	str	r3, [r2, #4]
    return 0;
 80082f2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3738      	adds	r7, #56	; 0x38
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200005a8 	.word	0x200005a8
 8008300:	200005e0 	.word	0x200005e0
 8008304:	200005b6 	.word	0x200005b6

08008308 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800832a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800832c:	4618      	mov	r0, r3
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr
	...

08008338 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008346:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <SUBGRF_Init+0x84>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800834c:	f7f8 fb48 	bl	80009e0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008350:	2002      	movs	r0, #2
 8008352:	f001 f8ff 	bl	8009554 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <SUBGRF_Init+0x88>)
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800835c:	2000      	movs	r0, #0
 800835e:	f000 f97d 	bl	800865c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008362:	f001 fb3e 	bl	80099e2 <RBI_IsTCXO>
 8008366:	4603      	mov	r3, r0
 8008368:	2b01      	cmp	r3, #1
 800836a:	d10e      	bne.n	800838a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800836c:	2140      	movs	r1, #64	; 0x40
 800836e:	2001      	movs	r0, #1
 8008370:	f000 fb82 	bl	8008a78 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008374:	2100      	movs	r1, #0
 8008376:	f640 1011 	movw	r0, #2321	; 0x911
 800837a:	f000 fef3 	bl	8009164 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800837e:	237f      	movs	r3, #127	; 0x7f
 8008380:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008382:	7b38      	ldrb	r0, [r7, #12]
 8008384:	f000 fa8b 	bl	800889e <SUBGRF_Calibrate>
 8008388:	e009      	b.n	800839e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800838a:	2120      	movs	r1, #32
 800838c:	f640 1011 	movw	r0, #2321	; 0x911
 8008390:	f000 fee8 	bl	8009164 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008394:	2120      	movs	r1, #32
 8008396:	f640 1012 	movw	r0, #2322	; 0x912
 800839a:	f000 fee3 	bl	8009164 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800839e:	210e      	movs	r1, #14
 80083a0:	f640 101f 	movw	r0, #2335	; 0x91f
 80083a4:	f000 fede 	bl	8009164 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80083a8:	f001 fa86 	bl	80098b8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <SUBGRF_Init+0x8c>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	701a      	strb	r2, [r3, #0]
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000640 	.word	0x20000640
 80083c0:	2000063c 	.word	0x2000063c
 80083c4:	20000634 	.word	0x20000634

080083c8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
    return OperatingMode;
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <SUBGRF_GetOperatingMode+0x10>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr
 80083d8:	20000634 	.word	0x20000634

080083dc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	461a      	mov	r2, r3
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	2000      	movs	r0, #0
 80083f0:	f000 ff24 	bl	800923c <SUBGRF_WriteBuffer>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800840e:	f107 0317 	add.w	r3, r7, #23
 8008412:	4619      	mov	r1, r3
 8008414:	68b8      	ldr	r0, [r7, #8]
 8008416:	f000 fe27 	bl	8009068 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	79fa      	ldrb	r2, [r7, #7]
 8008420:	429a      	cmp	r2, r3
 8008422:	d201      	bcs.n	8008428 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008424:	2301      	movs	r3, #1
 8008426:	e007      	b.n	8008438 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008428:	7df8      	ldrb	r0, [r7, #23]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	f000 ff25 	bl	8009280 <SUBGRF_ReadBuffer>

    return 0;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	4619      	mov	r1, r3
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff ffc2 	bl	80083dc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f91b 	bl	8008694 <SUBGRF_SetTx>
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800846e:	2208      	movs	r2, #8
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008476:	f000 fe9d 	bl	80091b4 <SUBGRF_WriteRegisters>
    return 0;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	b29b      	uxth	r3, r3
 8008494:	b2db      	uxtb	r3, r3
 8008496:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800849e:	f000 fb6f 	bl	8008b80 <SUBGRF_GetPacketType>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	2202      	movs	r2, #2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80084b4:	f000 fe7e 	bl	80091b4 <SUBGRF_WriteRegisters>
            break;
 80084b8:	e000      	b.n	80084bc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80084ba:	bf00      	nop
    }
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	0a1b      	lsrs	r3, r3, #8
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80084d8:	88fb      	ldrh	r3, [r7, #6]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80084de:	f000 fb4f 	bl	8008b80 <SUBGRF_GetPacketType>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d108      	bne.n	80084fa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	2202      	movs	r2, #2
 80084ee:	4619      	mov	r1, r3
 80084f0:	f240 60be 	movw	r0, #1726	; 0x6be
 80084f4:	f000 fe5e 	bl	80091b4 <SUBGRF_WriteRegisters>
            break;
 80084f8:	e000      	b.n	80084fc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80084fa:	bf00      	nop
    }
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008512:	f000 fb35 	bl	8008b80 <SUBGRF_GetPacketType>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d121      	bne.n	8008560 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800851c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008520:	f000 fe34 	bl	800918c <SUBGRF_ReadRegister>
 8008524:	4603      	mov	r3, r0
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800852c:	88fb      	ldrh	r3, [r7, #6]
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	b29b      	uxth	r3, r3
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	b25a      	sxtb	r2, r3
 800853a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800853e:	4313      	orrs	r3, r2
 8008540:	b25b      	sxtb	r3, r3
 8008542:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	4619      	mov	r1, r3
 8008548:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800854c:	f000 fe0a 	bl	8009164 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008550:	88fb      	ldrh	r3, [r7, #6]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4619      	mov	r1, r3
 8008556:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800855a:	f000 fe03 	bl	8009164 <SUBGRF_WriteRegister>
            break;
 800855e:	e000      	b.n	8008562 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008560:	bf00      	nop
    }
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008578:	2300      	movs	r3, #0
 800857a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800857c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008580:	f000 fe04 	bl	800918c <SUBGRF_ReadRegister>
 8008584:	4603      	mov	r3, r0
 8008586:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008588:	79fb      	ldrb	r3, [r7, #7]
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	4619      	mov	r1, r3
 8008592:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008596:	f000 fde5 	bl	8009164 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800859a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800859e:	f000 fdf5 	bl	800918c <SUBGRF_ReadRegister>
 80085a2:	4603      	mov	r3, r0
 80085a4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80085a6:	79bb      	ldrb	r3, [r7, #6]
 80085a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80085b4:	f000 fdd6 	bl	8009164 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80085b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80085bc:	f000 f88a 	bl	80086d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80085c0:	463b      	mov	r3, r7
 80085c2:	2204      	movs	r2, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	f640 0019 	movw	r0, #2073	; 0x819
 80085ca:	f000 fe15 	bl	80091f8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80085ce:	2000      	movs	r0, #0
 80085d0:	f000 f844 	bl	800865c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	4619      	mov	r1, r3
 80085d8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80085dc:	f000 fdc2 	bl	8009164 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80085e0:	79bb      	ldrb	r3, [r7, #6]
 80085e2:	4619      	mov	r1, r3
 80085e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80085e8:	f000 fdbc 	bl	8009164 <SUBGRF_WriteRegister>

    return number;
 80085ec:	683b      	ldr	r3, [r7, #0]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008600:	2000      	movs	r0, #0
 8008602:	f001 f999 	bl	8009938 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008606:	2002      	movs	r0, #2
 8008608:	f000 ffa4 	bl	8009554 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800860c:	793b      	ldrb	r3, [r7, #4]
 800860e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008618:	793b      	ldrb	r3, [r7, #4]
 800861a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800861e:	b2db      	uxtb	r3, r3
 8008620:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008622:	b25b      	sxtb	r3, r3
 8008624:	4313      	orrs	r3, r2
 8008626:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008628:	793b      	ldrb	r3, [r7, #4]
 800862a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800862e:	b2db      	uxtb	r3, r3
 8008630:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008632:	4313      	orrs	r3, r2
 8008634:	b25b      	sxtb	r3, r3
 8008636:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008638:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800863a:	f107 030f 	add.w	r3, r7, #15
 800863e:	2201      	movs	r2, #1
 8008640:	4619      	mov	r1, r3
 8008642:	2084      	movs	r0, #132	; 0x84
 8008644:	f000 fe3e 	bl	80092c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <SUBGRF_SetSleep+0x60>)
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
}
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000634 	.word	0x20000634

0800865c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008666:	1dfb      	adds	r3, r7, #7
 8008668:	2201      	movs	r2, #1
 800866a:	4619      	mov	r1, r3
 800866c:	2080      	movs	r0, #128	; 0x80
 800866e:	f000 fe29 	bl	80092c4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <SUBGRF_SetStandby+0x34>)
 800867a:	2201      	movs	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800867e:	e002      	b.n	8008686 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <SUBGRF_SetStandby+0x34>)
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000634 	.word	0x20000634

08008694 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800869c:	4b0c      	ldr	r3, [pc, #48]	; (80086d0 <SUBGRF_SetTx+0x3c>)
 800869e:	2204      	movs	r2, #4
 80086a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	0c1b      	lsrs	r3, r3, #16
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	0a1b      	lsrs	r3, r3, #8
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	2203      	movs	r2, #3
 80086be:	4619      	mov	r1, r3
 80086c0:	2083      	movs	r0, #131	; 0x83
 80086c2:	f000 fdff 	bl	80092c4 <SUBGRF_WriteCommand>
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000634 	.word	0x20000634

080086d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <SUBGRF_SetRx+0x3c>)
 80086de:	2205      	movs	r2, #5
 80086e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	0c1b      	lsrs	r3, r3, #16
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	0a1b      	lsrs	r3, r3, #8
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	2203      	movs	r2, #3
 80086fe:	4619      	mov	r1, r3
 8008700:	2082      	movs	r0, #130	; 0x82
 8008702:	f000 fddf 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000634 	.word	0x20000634

08008714 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800871c:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <SUBGRF_SetRxBoosted+0x44>)
 800871e:	2205      	movs	r2, #5
 8008720:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008722:	2197      	movs	r1, #151	; 0x97
 8008724:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008728:	f000 fd1c 	bl	8009164 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	b2db      	uxtb	r3, r3
 8008732:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	b2db      	uxtb	r3, r3
 800873a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	b2db      	uxtb	r3, r3
 8008740:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	2203      	movs	r2, #3
 8008748:	4619      	mov	r1, r3
 800874a:	2082      	movs	r0, #130	; 0x82
 800874c:	f000 fdba 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20000634 	.word	0x20000634

0800875c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0c1b      	lsrs	r3, r3, #16
 800876a:	b2db      	uxtb	r3, r3
 800876c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	b2db      	uxtb	r3, r3
 8008774:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	b2db      	uxtb	r3, r3
 8008782:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	b2db      	uxtb	r3, r3
 800878a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008792:	f107 0308 	add.w	r3, r7, #8
 8008796:	2206      	movs	r2, #6
 8008798:	4619      	mov	r1, r3
 800879a:	2094      	movs	r0, #148	; 0x94
 800879c:	f000 fd92 	bl	80092c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80087a0:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <SUBGRF_SetRxDutyCycle+0x54>)
 80087a2:	2206      	movs	r2, #6
 80087a4:	701a      	strb	r2, [r3, #0]
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000634 	.word	0x20000634

080087b4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80087b8:	2200      	movs	r2, #0
 80087ba:	2100      	movs	r1, #0
 80087bc:	20c5      	movs	r0, #197	; 0xc5
 80087be:	f000 fd81 	bl	80092c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80087c2:	4b02      	ldr	r3, [pc, #8]	; (80087cc <SUBGRF_SetCad+0x18>)
 80087c4:	2207      	movs	r2, #7
 80087c6:	701a      	strb	r2, [r3, #0]
}
 80087c8:	bf00      	nop
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000634 	.word	0x20000634

080087d0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80087d4:	2200      	movs	r2, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	20d1      	movs	r0, #209	; 0xd1
 80087da:	f000 fd73 	bl	80092c4 <SUBGRF_WriteCommand>
}
 80087de:	bf00      	nop
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	20d2      	movs	r0, #210	; 0xd2
 80087ec:	f000 fd6a 	bl	80092c4 <SUBGRF_WriteCommand>
}
 80087f0:	bf00      	nop
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80087fe:	1dfb      	adds	r3, r7, #7
 8008800:	2201      	movs	r2, #1
 8008802:	4619      	mov	r1, r3
 8008804:	209f      	movs	r0, #159	; 0x9f
 8008806:	f000 fd5d 	bl	80092c4 <SUBGRF_WriteCommand>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	4603      	mov	r3, r0
 800881a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800881c:	1dfb      	adds	r3, r7, #7
 800881e:	2201      	movs	r2, #1
 8008820:	4619      	mov	r1, r3
 8008822:	20a0      	movs	r0, #160	; 0xa0
 8008824:	f000 fd4e 	bl	80092c4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b3f      	cmp	r3, #63	; 0x3f
 800882c:	d91c      	bls.n	8008868 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	085b      	lsrs	r3, r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800883c:	e005      	b.n	800884a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	089b      	lsrs	r3, r3, #2
 8008842:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	3301      	adds	r3, #1
 8008848:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b1f      	cmp	r3, #31
 800884e:	d8f6      	bhi.n	800883e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	b2da      	uxtb	r2, r3
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	4413      	add	r3, r2
 800885a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800885c:	7b7b      	ldrb	r3, [r7, #13]
 800885e:	4619      	mov	r1, r3
 8008860:	f240 7006 	movw	r0, #1798	; 0x706
 8008864:	f000 fc7e 	bl	8009164 <SUBGRF_WriteRegister>
    }
}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008876:	f001 f8bf 	bl	80099f8 <RBI_IsDCDC>
 800887a:	4603      	mov	r3, r0
 800887c:	2b01      	cmp	r3, #1
 800887e:	d102      	bne.n	8008886 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008880:	2301      	movs	r3, #1
 8008882:	71fb      	strb	r3, [r7, #7]
 8008884:	e001      	b.n	800888a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008886:	2300      	movs	r3, #0
 8008888:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800888a:	1dfb      	adds	r3, r7, #7
 800888c:	2201      	movs	r2, #1
 800888e:	4619      	mov	r1, r3
 8008890:	2096      	movs	r0, #150	; 0x96
 8008892:	f000 fd17 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80088a6:	793b      	ldrb	r3, [r7, #4]
 80088a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	019b      	lsls	r3, r3, #6
 80088b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80088b2:	793b      	ldrb	r3, [r7, #4]
 80088b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80088bc:	b25b      	sxtb	r3, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80088c2:	793b      	ldrb	r3, [r7, #4]
 80088c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80088cc:	b25b      	sxtb	r3, r3
 80088ce:	4313      	orrs	r3, r2
 80088d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80088d2:	793b      	ldrb	r3, [r7, #4]
 80088d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80088dc:	b25b      	sxtb	r3, r3
 80088de:	4313      	orrs	r3, r2
 80088e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80088e2:	793b      	ldrb	r3, [r7, #4]
 80088e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	4313      	orrs	r3, r2
 80088f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80088f2:	793b      	ldrb	r3, [r7, #4]
 80088f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80088fc:	b25b      	sxtb	r3, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008902:	793b      	ldrb	r3, [r7, #4]
 8008904:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800890c:	4313      	orrs	r3, r2
 800890e:	b25b      	sxtb	r3, r3
 8008910:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008912:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008914:	f107 030f 	add.w	r3, r7, #15
 8008918:	2201      	movs	r2, #1
 800891a:	4619      	mov	r1, r3
 800891c:	2089      	movs	r0, #137	; 0x89
 800891e:	f000 fcd1 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <SUBGRF_CalibrateImage+0x80>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d904      	bls.n	8008946 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800893c:	23e1      	movs	r3, #225	; 0xe1
 800893e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008940:	23e9      	movs	r3, #233	; 0xe9
 8008942:	737b      	strb	r3, [r7, #13]
 8008944:	e027      	b.n	8008996 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <SUBGRF_CalibrateImage+0x84>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d904      	bls.n	8008958 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800894e:	23d7      	movs	r3, #215	; 0xd7
 8008950:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008952:	23db      	movs	r3, #219	; 0xdb
 8008954:	737b      	strb	r3, [r7, #13]
 8008956:	e01e      	b.n	8008996 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a16      	ldr	r2, [pc, #88]	; (80089b4 <SUBGRF_CalibrateImage+0x88>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d904      	bls.n	800896a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008960:	23c1      	movs	r3, #193	; 0xc1
 8008962:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008964:	23c5      	movs	r3, #197	; 0xc5
 8008966:	737b      	strb	r3, [r7, #13]
 8008968:	e015      	b.n	8008996 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a12      	ldr	r2, [pc, #72]	; (80089b8 <SUBGRF_CalibrateImage+0x8c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d904      	bls.n	800897c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008972:	2375      	movs	r3, #117	; 0x75
 8008974:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008976:	2381      	movs	r3, #129	; 0x81
 8008978:	737b      	strb	r3, [r7, #13]
 800897a:	e00c      	b.n	8008996 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a0f      	ldr	r2, [pc, #60]	; (80089bc <SUBGRF_CalibrateImage+0x90>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d904      	bls.n	800898e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008984:	236b      	movs	r3, #107	; 0x6b
 8008986:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008988:	236f      	movs	r3, #111	; 0x6f
 800898a:	737b      	strb	r3, [r7, #13]
 800898c:	e003      	b.n	8008996 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800898e:	2329      	movs	r3, #41	; 0x29
 8008990:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8008992:	232b      	movs	r3, #43	; 0x2b
 8008994:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	2202      	movs	r2, #2
 800899c:	4619      	mov	r1, r3
 800899e:	2098      	movs	r0, #152	; 0x98
 80089a0:	f000 fc90 	bl	80092c4 <SUBGRF_WriteCommand>
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	35a4e900 	.word	0x35a4e900
 80089b0:	32a9f880 	.word	0x32a9f880
 80089b4:	2de54480 	.word	0x2de54480
 80089b8:	1b6b0b00 	.word	0x1b6b0b00
 80089bc:	1954fc40 	.word	0x1954fc40

080089c0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	4611      	mov	r1, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4623      	mov	r3, r4
 80089d0:	71fb      	strb	r3, [r7, #7]
 80089d2:	4603      	mov	r3, r0
 80089d4:	71bb      	strb	r3, [r7, #6]
 80089d6:	460b      	mov	r3, r1
 80089d8:	717b      	strb	r3, [r7, #5]
 80089da:	4613      	mov	r3, r2
 80089dc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80089e2:	79bb      	ldrb	r3, [r7, #6]
 80089e4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80089e6:	797b      	ldrb	r3, [r7, #5]
 80089e8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80089ea:	793b      	ldrb	r3, [r7, #4]
 80089ec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80089ee:	f107 030c 	add.w	r3, r7, #12
 80089f2:	2204      	movs	r2, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	2095      	movs	r0, #149	; 0x95
 80089f8:	f000 fc64 	bl	80092c4 <SUBGRF_WriteCommand>
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd90      	pop	{r4, r7, pc}

08008a04 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	4623      	mov	r3, r4
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	4603      	mov	r3, r0
 8008a18:	80bb      	strh	r3, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	807b      	strh	r3, [r7, #2]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	0a1b      	lsrs	r3, r3, #8
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008a2c:	88fb      	ldrh	r3, [r7, #6]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8008a32:	88bb      	ldrh	r3, [r7, #4]
 8008a34:	0a1b      	lsrs	r3, r3, #8
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008a3c:	88bb      	ldrh	r3, [r7, #4]
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8008a42:	887b      	ldrh	r3, [r7, #2]
 8008a44:	0a1b      	lsrs	r3, r3, #8
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8008a52:	883b      	ldrh	r3, [r7, #0]
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008a5c:	883b      	ldrh	r3, [r7, #0]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	2208      	movs	r2, #8
 8008a68:	4619      	mov	r1, r3
 8008a6a:	2008      	movs	r0, #8
 8008a6c:	f000 fc2a 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	6039      	str	r1, [r7, #0]
 8008a82:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	0a1b      	lsrs	r3, r3, #8
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	2097      	movs	r0, #151	; 0x97
 8008aae:	f000 fc09 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008aca:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <SUBGRF_SetRfFrequency+0x84>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f083 0301 	eor.w	r3, r3, #1
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7ff ff27 	bl	800892c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8008ade:	4b18      	ldr	r3, [pc, #96]	; (8008b40 <SUBGRF_SetRfFrequency+0x84>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	461c      	mov	r4, r3
 8008aea:	4615      	mov	r5, r2
 8008aec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008af0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <SUBGRF_SetRfFrequency+0x88>)
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fb8f 	bl	8000220 <__aeabi_uldivmod>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4613      	mov	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	0e1b      	lsrs	r3, r3, #24
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	0c1b      	lsrs	r3, r3, #16
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	0a1b      	lsrs	r3, r3, #8
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8008b28:	f107 0308 	add.w	r3, r7, #8
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	2086      	movs	r0, #134	; 0x86
 8008b32:	f000 fbc7 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008b40:	2000063c 	.word	0x2000063c
 8008b44:	01e84800 	.word	0x01e84800

08008b48 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008b52:	79fa      	ldrb	r2, [r7, #7]
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <SUBGRF_SetPacketType+0x34>)
 8008b56:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d104      	bne.n	8008b68 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008b5e:	2100      	movs	r1, #0
 8008b60:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008b64:	f000 fafe 	bl	8009164 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008b68:	1dfb      	adds	r3, r7, #7
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	208a      	movs	r0, #138	; 0x8a
 8008b70:	f000 fba8 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20000635 	.word	0x20000635

08008b80 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
    return PacketType;
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <SUBGRF_GetPacketType+0x10>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr
 8008b90:	20000635 	.word	0x20000635

08008b94 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	71fb      	strb	r3, [r7, #7]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	71bb      	strb	r3, [r7, #6]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d149      	bne.n	8008c40 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8008bac:	2000      	movs	r0, #0
 8008bae:	f000 ff2e 	bl	8009a0e <RBI_GetRFOMaxPowerConfig>
 8008bb2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8008bb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	da01      	bge.n	8008bc2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2b0e      	cmp	r3, #14
 8008bc6:	d10e      	bne.n	8008be6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8008bc8:	2301      	movs	r3, #1
 8008bca:	2201      	movs	r2, #1
 8008bcc:	2100      	movs	r1, #0
 8008bce:	2004      	movs	r0, #4
 8008bd0:	f7ff fef6 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008bd4:	79ba      	ldrb	r2, [r7, #6]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	330e      	adds	r3, #14
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	71bb      	strb	r3, [r7, #6]
 8008be4:	e01f      	b.n	8008c26 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b0a      	cmp	r3, #10
 8008bea:	d10e      	bne.n	8008c0a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8008bec:	2301      	movs	r3, #1
 8008bee:	2201      	movs	r2, #1
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	f7ff fee4 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8008bf8:	79ba      	ldrb	r2, [r7, #6]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	330d      	adds	r3, #13
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	71bb      	strb	r3, [r7, #6]
 8008c08:	e00d      	b.n	8008c26 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	2100      	movs	r1, #0
 8008c10:	2007      	movs	r0, #7
 8008c12:	f7ff fed5 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008c16:	79ba      	ldrb	r2, [r7, #6]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	330e      	adds	r3, #14
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8008c26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008c2a:	f113 0f11 	cmn.w	r3, #17
 8008c2e:	da01      	bge.n	8008c34 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8008c30:	23ef      	movs	r3, #239	; 0xef
 8008c32:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8008c34:	2118      	movs	r1, #24
 8008c36:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008c3a:	f000 fa93 	bl	8009164 <SUBGRF_WriteRegister>
 8008c3e:	e067      	b.n	8008d10 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8008c40:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008c44:	f000 faa2 	bl	800918c <SUBGRF_ReadRegister>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f043 031e 	orr.w	r3, r3, #30
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4619      	mov	r1, r3
 8008c52:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008c56:	f000 fa85 	bl	8009164 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f000 fed7 	bl	8009a0e <RBI_GetRFOMaxPowerConfig>
 8008c60:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8008c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	da01      	bge.n	8008c70 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b14      	cmp	r3, #20
 8008c74:	d10e      	bne.n	8008c94 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008c76:	2301      	movs	r3, #1
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2105      	movs	r1, #5
 8008c7c:	2003      	movs	r0, #3
 8008c7e:	f7ff fe9f 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008c82:	79ba      	ldrb	r2, [r7, #6]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	3316      	adds	r3, #22
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	71bb      	strb	r3, [r7, #6]
 8008c92:	e031      	b.n	8008cf8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b11      	cmp	r3, #17
 8008c98:	d10e      	bne.n	8008cb8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2103      	movs	r1, #3
 8008ca0:	2002      	movs	r0, #2
 8008ca2:	f7ff fe8d 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008ca6:	79ba      	ldrb	r2, [r7, #6]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	3316      	adds	r3, #22
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	71bb      	strb	r3, [r7, #6]
 8008cb6:	e01f      	b.n	8008cf8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b0e      	cmp	r3, #14
 8008cbc:	d10e      	bne.n	8008cdc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	2102      	movs	r1, #2
 8008cc4:	2002      	movs	r0, #2
 8008cc6:	f7ff fe7b 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008cca:	79ba      	ldrb	r2, [r7, #6]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	330e      	adds	r3, #14
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	71bb      	strb	r3, [r7, #6]
 8008cda:	e00d      	b.n	8008cf8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8008cdc:	2301      	movs	r3, #1
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2107      	movs	r1, #7
 8008ce2:	2004      	movs	r0, #4
 8008ce4:	f7ff fe6c 	bl	80089c0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008ce8:	79ba      	ldrb	r2, [r7, #6]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	3316      	adds	r3, #22
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8008cf8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008cfc:	f113 0f09 	cmn.w	r3, #9
 8008d00:	da01      	bge.n	8008d06 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8008d02:	23f7      	movs	r3, #247	; 0xf7
 8008d04:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8008d06:	2138      	movs	r1, #56	; 0x38
 8008d08:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008d0c:	f000 fa2a 	bl	8009164 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8008d10:	79bb      	ldrb	r3, [r7, #6]
 8008d12:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8008d14:	797b      	ldrb	r3, [r7, #5]
 8008d16:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8008d18:	f107 0308 	add.w	r3, r7, #8
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	208e      	movs	r0, #142	; 0x8e
 8008d22:	f000 facf 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8008d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008d3e:	4a61      	ldr	r2, [pc, #388]	; (8008ec4 <SUBGRF_SetModulationParams+0x194>)
 8008d40:	f107 0308 	add.w	r3, r7, #8
 8008d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d48:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	4b5d      	ldr	r3, [pc, #372]	; (8008ec8 <SUBGRF_SetModulationParams+0x198>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d004      	beq.n	8008d62 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff fef3 	bl	8008b48 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	f200 80a5 	bhi.w	8008eb6 <SUBGRF_SetModulationParams+0x186>
 8008d6c:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <SUBGRF_SetModulationParams+0x44>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008d85 	.word	0x08008d85
 8008d78:	08008e45 	.word	0x08008e45
 8008d7c:	08008e07 	.word	0x08008e07
 8008d80:	08008e73 	.word	0x08008e73
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8008d84:	2308      	movs	r3, #8
 8008d86:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a4f      	ldr	r2, [pc, #316]	; (8008ecc <SUBGRF_SetModulationParams+0x19c>)
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	0c1b      	lsrs	r3, r3, #16
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7b1b      	ldrb	r3, [r3, #12]
 8008dae:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7b5b      	ldrb	r3, [r3, #13]
 8008db4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	461c      	mov	r4, r3
 8008dbe:	4615      	mov	r5, r2
 8008dc0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008dc4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008dc8:	4a41      	ldr	r2, [pc, #260]	; (8008ed0 <SUBGRF_SetModulationParams+0x1a0>)
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 fa25 	bl	8000220 <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4613      	mov	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008df4:	7cfb      	ldrb	r3, [r7, #19]
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	f107 0308 	add.w	r3, r7, #8
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	208b      	movs	r0, #139	; 0x8b
 8008e00:	f000 fa60 	bl	80092c4 <SUBGRF_WriteCommand>
        break;
 8008e04:	e058      	b.n	8008eb8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8008e06:	2304      	movs	r3, #4
 8008e08:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	4a2f      	ldr	r2, [pc, #188]	; (8008ecc <SUBGRF_SetModulationParams+0x19c>)
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	7d1b      	ldrb	r3, [r3, #20]
 8008e30:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008e32:	7cfb      	ldrb	r3, [r7, #19]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	f107 0308 	add.w	r3, r7, #8
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	208b      	movs	r0, #139	; 0x8b
 8008e3e:	f000 fa41 	bl	80092c4 <SUBGRF_WriteCommand>
        break;
 8008e42:	e039      	b.n	8008eb8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8008e44:	2304      	movs	r3, #4
 8008e46:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7e1b      	ldrb	r3, [r3, #24]
 8008e4c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7e5b      	ldrb	r3, [r3, #25]
 8008e52:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7e9b      	ldrb	r3, [r3, #26]
 8008e58:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7edb      	ldrb	r3, [r3, #27]
 8008e5e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008e60:	7cfb      	ldrb	r3, [r7, #19]
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4619      	mov	r1, r3
 8008e6a:	208b      	movs	r0, #139	; 0x8b
 8008e6c:	f000 fa2a 	bl	80092c4 <SUBGRF_WriteCommand>

        break;
 8008e70:	e022      	b.n	8008eb8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8008e72:	2305      	movs	r3, #5
 8008e74:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4a14      	ldr	r2, [pc, #80]	; (8008ecc <SUBGRF_SetModulationParams+0x19c>)
 8008e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e80:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	7b1b      	ldrb	r3, [r3, #12]
 8008e9c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7b5b      	ldrb	r3, [r3, #13]
 8008ea2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008ea4:	7cfb      	ldrb	r3, [r7, #19]
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	f107 0308 	add.w	r3, r7, #8
 8008eac:	4619      	mov	r1, r3
 8008eae:	208b      	movs	r0, #139	; 0x8b
 8008eb0:	f000 fa08 	bl	80092c4 <SUBGRF_WriteCommand>
        break;
 8008eb4:	e000      	b.n	8008eb8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8008eb6:	bf00      	nop
    }
}
 8008eb8:	bf00      	nop
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0800a938 	.word	0x0800a938
 8008ec8:	20000635 	.word	0x20000635
 8008ecc:	3d090000 	.word	0x3d090000
 8008ed0:	01e84800 	.word	0x01e84800

08008ed4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008ee0:	4a48      	ldr	r2, [pc, #288]	; (8009004 <SUBGRF_SetPacketParams+0x130>)
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	ca07      	ldmia	r2, {r0, r1, r2}
 8008ee8:	c303      	stmia	r3!, {r0, r1}
 8008eea:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	4b45      	ldr	r3, [pc, #276]	; (8009008 <SUBGRF_SetPacketParams+0x134>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d004      	beq.n	8008f02 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fe23 	bl	8008b48 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d878      	bhi.n	8008ffc <SUBGRF_SetPacketParams+0x128>
 8008f0a:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <SUBGRF_SetPacketParams+0x3c>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f21 	.word	0x08008f21
 8008f14:	08008fb1 	.word	0x08008fb1
 8008f18:	08008fa5 	.word	0x08008fa5
 8008f1c:	08008f21 	.word	0x08008f21
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7a5b      	ldrb	r3, [r3, #9]
 8008f24:	2bf1      	cmp	r3, #241	; 0xf1
 8008f26:	d10a      	bne.n	8008f3e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8008f28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008f2c:	f7ff faaa 	bl	8008484 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8008f30:	f248 0005 	movw	r0, #32773	; 0x8005
 8008f34:	f7ff fac6 	bl	80084c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	75bb      	strb	r3, [r7, #22]
 8008f3c:	e011      	b.n	8008f62 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	7a5b      	ldrb	r3, [r3, #9]
 8008f42:	2bf2      	cmp	r3, #242	; 0xf2
 8008f44:	d10a      	bne.n	8008f5c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8008f46:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8008f4a:	f7ff fa9b 	bl	8008484 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008f4e:	f241 0021 	movw	r0, #4129	; 0x1021
 8008f52:	f7ff fab7 	bl	80084c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008f56:	2306      	movs	r3, #6
 8008f58:	75bb      	strb	r3, [r7, #22]
 8008f5a:	e002      	b.n	8008f62 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7a5b      	ldrb	r3, [r3, #9]
 8008f60:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008f62:	2309      	movs	r3, #9
 8008f64:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	885b      	ldrh	r3, [r3, #2]
 8008f6a:	0a1b      	lsrs	r3, r3, #8
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	795b      	ldrb	r3, [r3, #5]
 8008f84:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	799b      	ldrb	r3, [r3, #6]
 8008f8a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	79db      	ldrb	r3, [r3, #7]
 8008f90:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	7a1b      	ldrb	r3, [r3, #8]
 8008f96:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8008f98:	7dbb      	ldrb	r3, [r7, #22]
 8008f9a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	7a9b      	ldrb	r3, [r3, #10]
 8008fa0:	753b      	strb	r3, [r7, #20]
        break;
 8008fa2:	e022      	b.n	8008fea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	7b1b      	ldrb	r3, [r3, #12]
 8008fac:	733b      	strb	r3, [r7, #12]
        break;
 8008fae:	e01c      	b.n	8008fea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8008fb0:	2306      	movs	r3, #6
 8008fb2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	89db      	ldrh	r3, [r3, #14]
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	89db      	ldrh	r3, [r3, #14]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7c1a      	ldrb	r2, [r3, #16]
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <SUBGRF_SetPacketParams+0x138>)
 8008fce:	4611      	mov	r1, r2
 8008fd0:	7019      	strb	r1, [r3, #0]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	7c5b      	ldrb	r3, [r3, #17]
 8008fda:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	7c9b      	ldrb	r3, [r3, #18]
 8008fe0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7cdb      	ldrb	r3, [r3, #19]
 8008fe6:	747b      	strb	r3, [r7, #17]
        break;
 8008fe8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	f107 030c 	add.w	r3, r7, #12
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	208c      	movs	r0, #140	; 0x8c
 8008ff6:	f000 f965 	bl	80092c4 <SUBGRF_WriteCommand>
 8008ffa:	e000      	b.n	8008ffe <SUBGRF_SetPacketParams+0x12a>
        return;
 8008ffc:	bf00      	nop
}
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0800a940 	.word	0x0800a940
 8009008:	20000635 	.word	0x20000635
 800900c:	20000636 	.word	0x20000636

08009010 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	460a      	mov	r2, r1
 800901a:	71fb      	strb	r3, [r7, #7]
 800901c:	4613      	mov	r3, r2
 800901e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009024:	79bb      	ldrb	r3, [r7, #6]
 8009026:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	2202      	movs	r2, #2
 800902e:	4619      	mov	r1, r3
 8009030:	208f      	movs	r0, #143	; 0x8f
 8009032:	f000 f947 	bl	80092c4 <SUBGRF_WriteCommand>
}
 8009036:	bf00      	nop
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009048:	1d3b      	adds	r3, r7, #4
 800904a:	2201      	movs	r2, #1
 800904c:	4619      	mov	r1, r3
 800904e:	2015      	movs	r0, #21
 8009050:	f000 f95a 	bl	8009308 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009054:	793b      	ldrb	r3, [r7, #4]
 8009056:	425b      	negs	r3, r3
 8009058:	105b      	asrs	r3, r3, #1
 800905a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800905c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009072:	f107 030c 	add.w	r3, r7, #12
 8009076:	2202      	movs	r2, #2
 8009078:	4619      	mov	r1, r3
 800907a:	2013      	movs	r0, #19
 800907c:	f000 f944 	bl	8009308 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009080:	f7ff fd7e 	bl	8008b80 <SUBGRF_GetPacketType>
 8009084:	4603      	mov	r3, r0
 8009086:	2b01      	cmp	r3, #1
 8009088:	d10d      	bne.n	80090a6 <SUBGRF_GetRxBufferStatus+0x3e>
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <SUBGRF_GetRxBufferStatus+0x54>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	d108      	bne.n	80090a6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009094:	f240 7002 	movw	r0, #1794	; 0x702
 8009098:	f000 f878 	bl	800918c <SUBGRF_ReadRegister>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e002      	b.n	80090ac <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80090a6:	7b3a      	ldrb	r2, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80090ac:	7b7a      	ldrb	r2, [r7, #13]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	701a      	strb	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000636 	.word	0x20000636

080090c0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80090c8:	f107 030c 	add.w	r3, r7, #12
 80090cc:	2203      	movs	r2, #3
 80090ce:	4619      	mov	r1, r3
 80090d0:	2014      	movs	r0, #20
 80090d2:	f000 f919 	bl	8009308 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80090d6:	f7ff fd53 	bl	8008b80 <SUBGRF_GetPacketType>
 80090da:	4603      	mov	r3, r0
 80090dc:	461a      	mov	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <SUBGRF_GetPacketStatus+0x30>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d013      	beq.n	8009116 <SUBGRF_GetPacketStatus+0x56>
 80090ee:	e02a      	b.n	8009146 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80090f0:	7b3a      	ldrb	r2, [r7, #12]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80090f6:	7b7b      	ldrb	r3, [r7, #13]
 80090f8:	425b      	negs	r3, r3
 80090fa:	105b      	asrs	r3, r3, #1
 80090fc:	b25a      	sxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	425b      	negs	r3, r3
 8009106:	105b      	asrs	r3, r3, #1
 8009108:	b25a      	sxtb	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	609a      	str	r2, [r3, #8]
            break;
 8009114:	e020      	b.n	8009158 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009116:	7b3b      	ldrb	r3, [r7, #12]
 8009118:	425b      	negs	r3, r3
 800911a:	105b      	asrs	r3, r3, #1
 800911c:	b25a      	sxtb	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8009122:	7b7b      	ldrb	r3, [r7, #13]
 8009124:	b25b      	sxtb	r3, r3
 8009126:	3302      	adds	r3, #2
 8009128:	109b      	asrs	r3, r3, #2
 800912a:	b25a      	sxtb	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	425b      	negs	r3, r3
 8009134:	105b      	asrs	r3, r3, #1
 8009136:	b25a      	sxtb	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800913c:	4b08      	ldr	r3, [pc, #32]	; (8009160 <SUBGRF_GetPacketStatus+0xa0>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	611a      	str	r2, [r3, #16]
            break;
 8009144:	e008      	b.n	8009158 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009146:	2214      	movs	r2, #20
 8009148:	2100      	movs	r1, #0
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fc93 	bl	8009a76 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	220f      	movs	r2, #15
 8009154:	701a      	strb	r2, [r3, #0]
            break;
 8009156:	bf00      	nop
    }
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000638 	.word	0x20000638

08009164 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	460a      	mov	r2, r1
 800916e:	80fb      	strh	r3, [r7, #6]
 8009170:	4613      	mov	r3, r2
 8009172:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009174:	1d7a      	adds	r2, r7, #5
 8009176:	88f9      	ldrh	r1, [r7, #6]
 8009178:	2301      	movs	r3, #1
 800917a:	4803      	ldr	r0, [pc, #12]	; (8009188 <SUBGRF_WriteRegister+0x24>)
 800917c:	f7fa fc3a 	bl	80039f4 <HAL_SUBGHZ_WriteRegisters>
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	2000041c 	.word	0x2000041c

0800918c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009196:	f107 020f 	add.w	r2, r7, #15
 800919a:	88f9      	ldrh	r1, [r7, #6]
 800919c:	2301      	movs	r3, #1
 800919e:	4804      	ldr	r0, [pc, #16]	; (80091b0 <SUBGRF_ReadRegister+0x24>)
 80091a0:	f7fa fc87 	bl	8003ab2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000041c 	.word	0x2000041c

080091b4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	6039      	str	r1, [r7, #0]
 80091be:	80fb      	strh	r3, [r7, #6]
 80091c0:	4613      	mov	r3, r2
 80091c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c4:	f3ef 8310 	mrs	r3, PRIMASK
 80091c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80091cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091ce:	b672      	cpsid	i
}
 80091d0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80091d2:	88bb      	ldrh	r3, [r7, #4]
 80091d4:	88f9      	ldrh	r1, [r7, #6]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4806      	ldr	r0, [pc, #24]	; (80091f4 <SUBGRF_WriteRegisters+0x40>)
 80091da:	f7fa fc0b 	bl	80039f4 <HAL_SUBGHZ_WriteRegisters>
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f383 8810 	msr	PRIMASK, r3
}
 80091e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80091ea:	bf00      	nop
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	2000041c 	.word	0x2000041c

080091f8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	80fb      	strh	r3, [r7, #6]
 8009204:	4613      	mov	r3, r2
 8009206:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	60fb      	str	r3, [r7, #12]
  return(result);
 800920e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009212:	b672      	cpsid	i
}
 8009214:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009216:	88bb      	ldrh	r3, [r7, #4]
 8009218:	88f9      	ldrh	r1, [r7, #6]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	4806      	ldr	r0, [pc, #24]	; (8009238 <SUBGRF_ReadRegisters+0x40>)
 800921e:	f7fa fc48 	bl	8003ab2 <HAL_SUBGHZ_ReadRegisters>
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f383 8810 	msr	PRIMASK, r3
}
 800922c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	2000041c 	.word	0x2000041c

0800923c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
 8009248:	4613      	mov	r3, r2
 800924a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800924c:	f3ef 8310 	mrs	r3, PRIMASK
 8009250:	60fb      	str	r3, [r7, #12]
  return(result);
 8009252:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009256:	b672      	cpsid	i
}
 8009258:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800925a:	79bb      	ldrb	r3, [r7, #6]
 800925c:	b29b      	uxth	r3, r3
 800925e:	79f9      	ldrb	r1, [r7, #7]
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	4806      	ldr	r0, [pc, #24]	; (800927c <SUBGRF_WriteBuffer+0x40>)
 8009264:	f7fa fd39 	bl	8003cda <HAL_SUBGHZ_WriteBuffer>
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f383 8810 	msr	PRIMASK, r3
}
 8009272:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009274:	bf00      	nop
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	2000041c 	.word	0x2000041c

08009280 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	6039      	str	r1, [r7, #0]
 800928a:	71fb      	strb	r3, [r7, #7]
 800928c:	4613      	mov	r3, r2
 800928e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009290:	f3ef 8310 	mrs	r3, PRIMASK
 8009294:	60fb      	str	r3, [r7, #12]
  return(result);
 8009296:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800929a:	b672      	cpsid	i
}
 800929c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800929e:	79bb      	ldrb	r3, [r7, #6]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	79f9      	ldrb	r1, [r7, #7]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	4806      	ldr	r0, [pc, #24]	; (80092c0 <SUBGRF_ReadBuffer+0x40>)
 80092a8:	f7fa fd6a 	bl	8003d80 <HAL_SUBGHZ_ReadBuffer>
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f383 8810 	msr	PRIMASK, r3
}
 80092b6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80092b8:	bf00      	nop
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2000041c 	.word	0x2000041c

080092c4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	6039      	str	r1, [r7, #0]
 80092ce:	71fb      	strb	r3, [r7, #7]
 80092d0:	4613      	mov	r3, r2
 80092d2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d4:	f3ef 8310 	mrs	r3, PRIMASK
 80092d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80092dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092de:	b672      	cpsid	i
}
 80092e0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80092e2:	88bb      	ldrh	r3, [r7, #4]
 80092e4:	79f9      	ldrb	r1, [r7, #7]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4806      	ldr	r0, [pc, #24]	; (8009304 <SUBGRF_WriteCommand+0x40>)
 80092ea:	f7fa fc43 	bl	8003b74 <HAL_SUBGHZ_ExecSetCmd>
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	f383 8810 	msr	PRIMASK, r3
}
 80092f8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80092fa:	bf00      	nop
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	2000041c 	.word	0x2000041c

08009308 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	4603      	mov	r3, r0
 8009310:	6039      	str	r1, [r7, #0]
 8009312:	71fb      	strb	r3, [r7, #7]
 8009314:	4613      	mov	r3, r2
 8009316:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009318:	f3ef 8310 	mrs	r3, PRIMASK
 800931c:	60fb      	str	r3, [r7, #12]
  return(result);
 800931e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009322:	b672      	cpsid	i
}
 8009324:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009326:	88bb      	ldrh	r3, [r7, #4]
 8009328:	79f9      	ldrb	r1, [r7, #7]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4806      	ldr	r0, [pc, #24]	; (8009348 <SUBGRF_ReadCommand+0x40>)
 800932e:	f7fa fc80 	bl	8003c32 <HAL_SUBGHZ_ExecGetCmd>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f383 8810 	msr	PRIMASK, r3
}
 800933c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	2000041c 	.word	0x2000041c

0800934c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	460a      	mov	r2, r1
 8009356:	71fb      	strb	r3, [r7, #7]
 8009358:	4613      	mov	r3, r2
 800935a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009360:	79bb      	ldrb	r3, [r7, #6]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d10d      	bne.n	8009382 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d104      	bne.n	8009376 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800936c:	2302      	movs	r3, #2
 800936e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009370:	2004      	movs	r0, #4
 8009372:	f000 f8ef 	bl	8009554 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d107      	bne.n	800938c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800937c:	2303      	movs	r3, #3
 800937e:	73fb      	strb	r3, [r7, #15]
 8009380:	e004      	b.n	800938c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009382:	79bb      	ldrb	r3, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fad2 	bl	8009938 <RBI_ConfigRFSwitch>
}
 8009394:	bf00      	nop
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	4603      	mov	r3, r0
 80093a4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80093aa:	f000 fb0f 	bl	80099cc <RBI_GetTxConfig>
 80093ae:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d016      	beq.n	80093e4 <SUBGRF_SetRfTxPower+0x48>
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	dc16      	bgt.n	80093ea <SUBGRF_SetRfTxPower+0x4e>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <SUBGRF_SetRfTxPower+0x2e>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d00a      	beq.n	80093de <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80093c8:	e00f      	b.n	80093ea <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80093ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ce:	2b0f      	cmp	r3, #15
 80093d0:	dd02      	ble.n	80093d8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
            break;
 80093d6:	e009      	b.n	80093ec <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
            break;
 80093dc:	e006      	b.n	80093ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80093de:	2301      	movs	r3, #1
 80093e0:	73fb      	strb	r3, [r7, #15]
            break;
 80093e2:	e003      	b.n	80093ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80093e4:	2302      	movs	r3, #2
 80093e6:	73fb      	strb	r3, [r7, #15]
            break;
 80093e8:	e000      	b.n	80093ec <SUBGRF_SetRfTxPower+0x50>
            break;
 80093ea:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80093ec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2202      	movs	r2, #2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7ff fbcd 	bl	8008b94 <SUBGRF_SetTxParams>

    return paSelect;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009404:	b480      	push	{r7}
 8009406:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009408:	2301      	movs	r3, #1
}
 800940a:	4618      	mov	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
	...

08009414 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2001      	movs	r0, #1
 8009422:	4798      	blx	r3
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	20000640 	.word	0x20000640

08009430 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009438:	4b03      	ldr	r3, [pc, #12]	; (8009448 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2002      	movs	r0, #2
 800943e:	4798      	blx	r3
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000640 	.word	0x20000640

0800944c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2040      	movs	r0, #64	; 0x40
 800945a:	4798      	blx	r3
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000640 	.word	0x20000640

08009468 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800947a:	2b01      	cmp	r3, #1
 800947c:	d005      	beq.n	800948a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800947e:	e00a      	b.n	8009496 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2080      	movs	r0, #128	; 0x80
 8009486:	4798      	blx	r3
            break;
 8009488:	e005      	b.n	8009496 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009492:	4798      	blx	r3
            break;
 8009494:	bf00      	nop
    }
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000640 	.word	0x20000640

080094a4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80094ac:	4b04      	ldr	r3, [pc, #16]	; (80094c0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80094b4:	4798      	blx	r3
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000640 	.word	0x20000640

080094c4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80094cc:	4b03      	ldr	r3, [pc, #12]	; (80094dc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2020      	movs	r0, #32
 80094d2:	4798      	blx	r3
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000640 	.word	0x20000640

080094e0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80094e8:	4b03      	ldr	r3, [pc, #12]	; (80094f8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2004      	movs	r0, #4
 80094ee:	4798      	blx	r3
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000640 	.word	0x20000640

080094fc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009504:	4b03      	ldr	r3, [pc, #12]	; (8009514 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2008      	movs	r0, #8
 800950a:	4798      	blx	r3
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000640 	.word	0x20000640

08009518 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009520:	4b03      	ldr	r3, [pc, #12]	; (8009530 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2010      	movs	r0, #16
 8009526:	4798      	blx	r3
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	20000640 	.word	0x20000640

08009534 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800953c:	4b04      	ldr	r3, [pc, #16]	; (8009550 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009544:	4798      	blx	r3
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000640 	.word	0x20000640

08009554 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800955e:	f000 fa4b 	bl	80099f8 <RBI_IsDCDC>
 8009562:	4603      	mov	r3, r0
 8009564:	2b01      	cmp	r3, #1
 8009566:	d112      	bne.n	800958e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009568:	f640 1023 	movw	r0, #2339	; 0x923
 800956c:	f7ff fe0e 	bl	800918c <SUBGRF_ReadRegister>
 8009570:	4603      	mov	r3, r0
 8009572:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	f023 0306 	bic.w	r3, r3, #6
 800957a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800957c:	7bfa      	ldrb	r2, [r7, #15]
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	4313      	orrs	r3, r2
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4619      	mov	r1, r3
 8009586:	f640 1023 	movw	r0, #2339	; 0x923
 800958a:	f7ff fdeb 	bl	8009164 <SUBGRF_WriteRegister>
  }
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80095a6:	231f      	movs	r3, #31
 80095a8:	e016      	b.n	80095d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
 80095ae:	e00f      	b.n	80095d0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4a0c      	ldr	r2, [pc, #48]	; (80095e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80095b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d205      	bcs.n	80095ca <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4413      	add	r3, r2
 80095c6:	791b      	ldrb	r3, [r3, #4]
 80095c8:	e006      	b.n	80095d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	3301      	adds	r3, #1
 80095ce:	73fb      	strb	r3, [r7, #15]
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	2b15      	cmp	r3, #21
 80095d4:	d9ec      	bls.n	80095b0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80095d6:	e7fe      	b.n	80095d6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	0800aad0 	.word	0x0800aad0

080095e8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80095f2:	4b35      	ldr	r3, [pc, #212]	; (80096c8 <SUBGRF_GetCFO+0xe0>)
 80095f4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80095f6:	f640 0007 	movw	r0, #2055	; 0x807
 80095fa:	f7ff fdc7 	bl	800918c <SUBGRF_ReadRegister>
 80095fe:	4603      	mov	r3, r0
 8009600:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009602:	7ffb      	ldrb	r3, [r7, #31]
 8009604:	08db      	lsrs	r3, r3, #3
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	3328      	adds	r3, #40	; 0x28
 800960e:	443b      	add	r3, r7
 8009610:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009614:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009616:	7ffb      	ldrb	r3, [r7, #31]
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800961e:	7fba      	ldrb	r2, [r7, #30]
 8009620:	7f7b      	ldrb	r3, [r7, #29]
 8009622:	3301      	adds	r3, #1
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	461a      	mov	r2, r3
 800962a:	4b28      	ldr	r3, [pc, #160]	; (80096cc <SUBGRF_GetCFO+0xe4>)
 800962c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009630:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	fbb2 f3f3 	udiv	r3, r2, r3
 800963a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	fb02 f303 	mul.w	r3, r2, r3
 800964c:	2b07      	cmp	r3, #7
 800964e:	d802      	bhi.n	8009656 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009650:	2302      	movs	r3, #2
 8009652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	2b03      	cmp	r3, #3
 8009662:	d802      	bhi.n	800966a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009664:	2304      	movs	r3, #4
 8009666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800966a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009676:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800967a:	f7ff fd87 	bl	800918c <SUBGRF_ReadRegister>
 800967e:	4603      	mov	r3, r0
 8009680:	021b      	lsls	r3, r3, #8
 8009682:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009686:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009688:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800968c:	f7ff fd7e 	bl	800918c <SUBGRF_ReadRegister>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	4313      	orrs	r3, r2
 8009698:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80096a4:	6a3b      	ldr	r3, [r7, #32]
 80096a6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80096aa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80096ae:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	095b      	lsrs	r3, r3, #5
 80096b4:	6a3a      	ldr	r2, [r7, #32]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	11da      	asrs	r2, r3, #7
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	601a      	str	r2, [r3, #0]
}
 80096c0:	bf00      	nop
 80096c2:	3728      	adds	r7, #40	; 0x28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0c0a0804 	.word	0x0c0a0804
 80096cc:	01e84800 	.word	0x01e84800

080096d0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096e6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80096e8:	697b      	ldr	r3, [r7, #20]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800970a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800970c:	697b      	ldr	r3, [r7, #20]
}
 800970e:	4618      	mov	r0, r3
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	bc80      	pop	{r7}
 8009730:	4770      	bx	lr

08009732 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8009732:	b480      	push	{r7}
 8009734:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8009736:	bf00      	nop
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr

0800973e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800973e:	b480      	push	{r7}
 8009740:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8009742:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009750:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr

0800975a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	4603      	mov	r3, r0
 8009762:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr

0800976e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800976e:	b480      	push	{r7}
 8009770:	b087      	sub	sp, #28
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	460b      	mov	r3, r1
 8009778:	607a      	str	r2, [r7, #4]
 800977a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800977c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009780:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009782:	697b      	ldr	r3, [r7, #20]
}
 8009784:	4618      	mov	r0, r3
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	bc80      	pop	{r7}
 800978c:	4770      	bx	lr

0800978e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800978e:	b480      	push	{r7}
 8009790:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8009796:	4618      	mov	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	bc80      	pop	{r7}
 800979c:	4770      	bx	lr

0800979e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800979e:	b480      	push	{r7}
 80097a0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80097a2:	bf00      	nop
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr

080097aa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80097aa:	b480      	push	{r7}
 80097ac:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80097ae:	bf00      	nop
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr

080097b6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	4603      	mov	r3, r0
 80097be:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bc80      	pop	{r7}
 80097c8:	4770      	bx	lr

080097ca <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80097ce:	f7f7 fd6f 	bl	80012b0 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80097d2:	f000 f809 	bl	80097e8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80097d6:	bf00      	nop
 80097d8:	bd80      	pop	{r7, pc}

080097da <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80097da:	b480      	push	{r7}
 80097dc:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 80097de:	bf00      	nop
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr
	...

080097e8 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80097ec:	4b0a      	ldr	r3, [pc, #40]	; (8009818 <SubghzApp_Init+0x30>)
 80097ee:	4a0b      	ldr	r2, [pc, #44]	; (800981c <SubghzApp_Init+0x34>)
 80097f0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <SubghzApp_Init+0x30>)
 80097f4:	4a0a      	ldr	r2, [pc, #40]	; (8009820 <SubghzApp_Init+0x38>)
 80097f6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80097f8:	4b07      	ldr	r3, [pc, #28]	; (8009818 <SubghzApp_Init+0x30>)
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <SubghzApp_Init+0x3c>)
 80097fc:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <SubghzApp_Init+0x30>)
 8009800:	4a09      	ldr	r2, [pc, #36]	; (8009828 <SubghzApp_Init+0x40>)
 8009802:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009804:	4b04      	ldr	r3, [pc, #16]	; (8009818 <SubghzApp_Init+0x30>)
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <SubghzApp_Init+0x44>)
 8009808:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <SubghzApp_Init+0x48>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4802      	ldr	r0, [pc, #8]	; (8009818 <SubghzApp_Init+0x30>)
 8009810:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 8009812:	bf00      	nop
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000644 	.word	0x20000644
 800981c:	08009835 	.word	0x08009835
 8009820:	08009841 	.word	0x08009841
 8009824:	08009865 	.word	0x08009865
 8009828:	08009871 	.word	0x08009871
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800aa40 	.word	0x0800aa40

08009834 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009838:	bf00      	nop
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr

08009840 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	4608      	mov	r0, r1
 800984a:	4611      	mov	r1, r2
 800984c:	461a      	mov	r2, r3
 800984e:	4603      	mov	r3, r0
 8009850:	817b      	strh	r3, [r7, #10]
 8009852:	460b      	mov	r3, r1
 8009854:	813b      	strh	r3, [r7, #8]
 8009856:	4613      	mov	r3, r2
 8009858:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009864:	b480      	push	{r7}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009868:	bf00      	nop
 800986a:	46bd      	mov	sp, r7
 800986c:	bc80      	pop	{r7}
 800986e:	4770      	bx	lr

08009870 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	bc80      	pop	{r7}
 800987a:	4770      	bx	lr

0800987c <OnRxError>:

static void OnRxError(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009880:	bf00      	nop
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <LL_AHB2_GRP1_EnableClock>:
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4313      	orrs	r3, r2
 800989e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80098a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4013      	ands	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80098ac:	68fb      	ldr	r3, [r7, #12]
}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bc80      	pop	{r7}
 80098b6:	4770      	bx	lr

080098b8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 80098c2:	463b      	mov	r3, r7
 80098c4:	2200      	movs	r2, #0
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	609a      	str	r2, [r3, #8]
 80098cc:	60da      	str	r2, [r3, #12]
 80098ce:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80098d0:	2004      	movs	r0, #4
 80098d2:	f7ff ffd9 	bl	8009888 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 80098d6:	2310      	movs	r3, #16
 80098d8:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80098da:	2301      	movs	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098e2:	2303      	movs	r3, #3
 80098e4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80098e6:	463b      	mov	r3, r7
 80098e8:	4619      	mov	r1, r3
 80098ea:	4812      	ldr	r0, [pc, #72]	; (8009934 <RBI_Init+0x7c>)
 80098ec:	f7f8 fade 	bl	8001eac <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80098f0:	2320      	movs	r3, #32
 80098f2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80098f4:	463b      	mov	r3, r7
 80098f6:	4619      	mov	r1, r3
 80098f8:	480e      	ldr	r0, [pc, #56]	; (8009934 <RBI_Init+0x7c>)
 80098fa:	f7f8 fad7 	bl	8001eac <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80098fe:	2308      	movs	r3, #8
 8009900:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8009902:	463b      	mov	r3, r7
 8009904:	4619      	mov	r1, r3
 8009906:	480b      	ldr	r0, [pc, #44]	; (8009934 <RBI_Init+0x7c>)
 8009908:	f7f8 fad0 	bl	8001eac <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800990c:	2200      	movs	r2, #0
 800990e:	2120      	movs	r1, #32
 8009910:	4808      	ldr	r0, [pc, #32]	; (8009934 <RBI_Init+0x7c>)
 8009912:	f7f8 fc2b 	bl	800216c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009916:	2200      	movs	r2, #0
 8009918:	2110      	movs	r1, #16
 800991a:	4806      	ldr	r0, [pc, #24]	; (8009934 <RBI_Init+0x7c>)
 800991c:	f7f8 fc26 	bl	800216c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8009920:	2200      	movs	r2, #0
 8009922:	2108      	movs	r1, #8
 8009924:	4803      	ldr	r0, [pc, #12]	; (8009934 <RBI_Init+0x7c>)
 8009926:	f7f8 fc21 	bl	800216c <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800992a:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	48000800 	.word	0x48000800

08009938 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */


  switch (Config) {
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d837      	bhi.n	80099bc <RBI_ConfigRFSwitch+0x84>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <RBI_ConfigRFSwitch+0x1c>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009965 	.word	0x08009965
 8009958:	0800997b 	.word	0x0800997b
 800995c:	08009991 	.word	0x08009991
 8009960:	080099a7 	.word	0x080099a7
  	case RADIO_SWITCH_OFF: {
  		/* Turn off switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
  		//				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 8009964:	2201      	movs	r2, #1
 8009966:	2110      	movs	r1, #16
 8009968:	4817      	ldr	r0, [pc, #92]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 800996a:	f7f8 fbff 	bl	800216c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800996e:	2201      	movs	r2, #1
 8009970:	2120      	movs	r1, #32
 8009972:	4815      	ldr	r0, [pc, #84]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 8009974:	f7f8 fbfa 	bl	800216c <HAL_GPIO_WritePin>
  		break;
 8009978:	e021      	b.n	80099be <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RX: {
  		/*Turns On in Rx Mode the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800997a:	2200      	movs	r2, #0
 800997c:	2110      	movs	r1, #16
 800997e:	4812      	ldr	r0, [pc, #72]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 8009980:	f7f8 fbf4 	bl	800216c <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009984:	2200      	movs	r2, #0
 8009986:	2120      	movs	r1, #32
 8009988:	480f      	ldr	r0, [pc, #60]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 800998a:	f7f8 fbef 	bl	800216c <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		break;
 800998e:	e016      	b.n	80099be <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_LP: {
  		/*Turns On in Tx Low Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 8009990:	2200      	movs	r2, #0
 8009992:	2110      	movs	r1, #16
 8009994:	480c      	ldr	r0, [pc, #48]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 8009996:	f7f8 fbe9 	bl	800216c <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800999a:	2201      	movs	r2, #1
 800999c:	2120      	movs	r1, #32
 800999e:	480a      	ldr	r0, [pc, #40]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 80099a0:	f7f8 fbe4 	bl	800216c <HAL_GPIO_WritePin>
  		break;
 80099a4:	e00b      	b.n	80099be <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_HP: {
  		/*Turns On in Tx High Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 80099a6:	2200      	movs	r2, #0
 80099a8:	2110      	movs	r1, #16
 80099aa:	4807      	ldr	r0, [pc, #28]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 80099ac:	f7f8 fbde 	bl	800216c <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80099b0:	2201      	movs	r2, #1
 80099b2:	2120      	movs	r1, #32
 80099b4:	4804      	ldr	r0, [pc, #16]	; (80099c8 <RBI_ConfigRFSwitch+0x90>)
 80099b6:	f7f8 fbd9 	bl	800216c <HAL_GPIO_WritePin>
  		break;
 80099ba:	e000      	b.n	80099be <RBI_ConfigRFSwitch+0x86>
  	}
  	default:
  		break;
 80099bc:	bf00      	nop
//	}
//	default:
//		break;
//	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 80099be:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	48000800 	.word	0x48000800

080099cc <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80099d2:	2300      	movs	r3, #0
 80099d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 80099d6:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	bc80      	pop	{r7}
 80099e0:	4770      	bx	lr

080099e2 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80099e8:	2301      	movs	r3, #1
 80099ea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 80099ec:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bc80      	pop	{r7}
 80099f6:	4770      	bx	lr

080099f8 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80099fe:	2301      	movs	r3, #1
 8009a00:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8009a02:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bc80      	pop	{r7}
 8009a0c:	4770      	bx	lr

08009a0e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b085      	sub	sp, #20
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	4603      	mov	r3, r0
 8009a16:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8009a22:	230f      	movs	r3, #15
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	e001      	b.n	8009a2c <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8009a28:	2316      	movs	r3, #22
 8009a2a:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr

08009a38 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009a4e:	e007      	b.n	8009a60 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	1c53      	adds	r3, r2, #1
 8009a54:	613b      	str	r3, [r7, #16]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	1c59      	adds	r1, r3, #1
 8009a5a:	6179      	str	r1, [r7, #20]
 8009a5c:	7812      	ldrb	r2, [r2, #0]
 8009a5e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	1e5a      	subs	r2, r3, #1
 8009a64:	80fa      	strh	r2, [r7, #6]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1f2      	bne.n	8009a50 <UTIL_MEM_cpy_8+0x18>
    }
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr

08009a76 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009a76:	b480      	push	{r7}
 8009a78:	b085      	sub	sp, #20
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
 8009a7e:	460b      	mov	r3, r1
 8009a80:	70fb      	strb	r3, [r7, #3]
 8009a82:	4613      	mov	r3, r2
 8009a84:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009a8a:	e004      	b.n	8009a96 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	60fa      	str	r2, [r7, #12]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009a96:	883b      	ldrh	r3, [r7, #0]
 8009a98:	1e5a      	subs	r2, r3, #1
 8009a9a:	803a      	strh	r2, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1f5      	bne.n	8009a8c <UTIL_MEM_set_8+0x16>
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d023      	beq.n	8009b0a <UTIL_TIMER_Create+0x5e>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d020      	beq.n	8009b0a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <UTIL_TIMER_Create+0x68>)
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	68b8      	ldr	r0, [r7, #8]
 8009ad4:	4798      	blx	r3
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e000      	b.n	8009b0c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8009b0a:	2301      	movs	r3, #1
  }
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	0800a9ec 	.word	0x0800a9ec

08009b18 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d056      	beq.n	8009bda <UTIL_TIMER_Start+0xc2>
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f929 	bl	8009d84 <TimerExists>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f083 0301 	eor.w	r3, r3, #1
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d04d      	beq.n	8009bda <UTIL_TIMER_Start+0xc2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7a5b      	ldrb	r3, [r3, #9]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d149      	bne.n	8009bda <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b46:	f3ef 8310 	mrs	r3, PRIMASK
 8009b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8009b4c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009b4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b50:	b672      	cpsid	i
}
 8009b52:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8009b5a:	4b24      	ldr	r3, [pc, #144]	; (8009bec <UTIL_TIMER_Start+0xd4>)
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	4798      	blx	r3
 8009b60:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8009b62:	6a3a      	ldr	r2, [r7, #32]
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d201      	bcs.n	8009b6e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a3a      	ldr	r2, [r7, #32]
 8009b72:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <UTIL_TIMER_Start+0xd8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8009b8e:	4b17      	ldr	r3, [pc, #92]	; (8009bec <UTIL_TIMER_Start+0xd4>)
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f96b 	bl	8009e70 <TimerInsertNewHeadTimer>
 8009b9a:	e017      	b.n	8009bcc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <UTIL_TIMER_Start+0xd4>)
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	4798      	blx	r3
 8009ba2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	441a      	add	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <UTIL_TIMER_Start+0xd8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d203      	bcs.n	8009bc6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f956 	bl	8009e70 <TimerInsertNewHeadTimer>
 8009bc4:	e002      	b.n	8009bcc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f922 	bl	8009e10 <TimerInsertTimer>
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f383 8810 	msr	PRIMASK, r3
}
 8009bd6:	bf00      	nop
  {
 8009bd8:	e002      	b.n	8009be0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3728      	adds	r7, #40	; 0x28
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	0800a9ec 	.word	0x0800a9ec
 8009bf0:	20000660 	.word	0x20000660

08009bf4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d05b      	beq.n	8009cbe <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c06:	f3ef 8310 	mrs	r3, PRIMASK
 8009c0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c10:	b672      	cpsid	i
}
 8009c12:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8009c14:	4b2d      	ldr	r3, [pc, #180]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8009c1a:	4b2c      	ldr	r3, [pc, #176]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8009c26:	4b29      	ldr	r3, [pc, #164]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d041      	beq.n	8009cb2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d134      	bne.n	8009ca8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8009c3e:	4b23      	ldr	r3, [pc, #140]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8009c46:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00a      	beq.n	8009c66 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8009c50:	4b1e      	ldr	r3, [pc, #120]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c58:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8009c5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f8ac 	bl	8009dbc <TimerSetTimeout>
 8009c64:	e023      	b.n	8009cae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8009c66:	4b1a      	ldr	r3, [pc, #104]	; (8009cd0 <UTIL_TIMER_Stop+0xdc>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	4798      	blx	r3
            TimerListHead = NULL;
 8009c6c:	4b17      	ldr	r3, [pc, #92]	; (8009ccc <UTIL_TIMER_Stop+0xd8>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	e01c      	b.n	8009cae <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d110      	bne.n	8009c9e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d006      	beq.n	8009c92 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009c90:	e00d      	b.n	8009cae <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	615a      	str	r2, [r3, #20]
            break;
 8009c9c:	e007      	b.n	8009cae <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e2      	bne.n	8009c74 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	77fb      	strb	r3, [r7, #31]
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f383 8810 	msr	PRIMASK, r3
}
 8009cbc:	e001      	b.n	8009cc2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8009cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3720      	adds	r7, #32
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000660 	.word	0x20000660
 8009cd0:	0800a9ec 	.word	0x0800a9ec

08009cd4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	73fb      	strb	r3, [r7, #15]
 8009cec:	e014      	b.n	8009d18 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8009cee:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <UTIL_TIMER_SetPeriod+0x50>)
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	6838      	ldr	r0, [r7, #0]
 8009cf4:	4798      	blx	r3
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f841 	bl	8009d84 <TimerExists>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7ff ff73 	bl	8009bf4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff ff02 	bl	8009b18 <UTIL_TIMER_Start>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	0800a9ec 	.word	0x0800a9ec

08009d28 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <UTIL_TIMER_GetCurrentTime+0x20>)
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	4798      	blx	r3
 8009d34:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8009d36:	4b04      	ldr	r3, [pc, #16]	; (8009d48 <UTIL_TIMER_GetCurrentTime+0x20>)
 8009d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	4798      	blx	r3
 8009d3e:	4603      	mov	r3, r0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	0800a9ec 	.word	0x0800a9ec

08009d4c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8009d54:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	4798      	blx	r3
 8009d5a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	4798      	blx	r3
 8009d64:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8009d66:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	1a8a      	subs	r2, r1, r2
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	4603      	mov	r3, r0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	0800a9ec 	.word	0x0800a9ec

08009d84 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009d8c:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <TimerExists+0x34>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8009d92:	e008      	b.n	8009da6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d101      	bne.n	8009da0 <TimerExists+0x1c>
    {
      return true;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e006      	b.n	8009dae <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1f3      	bne.n	8009d94 <TimerExists+0x10>
  }
  return false;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3714      	adds	r7, #20
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc80      	pop	{r7}
 8009db6:	4770      	bx	lr
 8009db8:	20000660 	.word	0x20000660

08009dbc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <TimerSetTimeout+0x50>)
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	4798      	blx	r3
 8009dca:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <TimerSetTimeout+0x50>)
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	4798      	blx	r3
 8009ddc:	4602      	mov	r2, r0
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d207      	bcs.n	8009df6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <TimerSetTimeout+0x50>)
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	4798      	blx	r3
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	441a      	add	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <TimerSetTimeout+0x50>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4798      	blx	r3
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd90      	pop	{r4, r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800a9ec 	.word	0x0800a9ec

08009e10 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009e18:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <TimerInsertTimer+0x5c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <TimerInsertTimer+0x5c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8009e26:	e012      	b.n	8009e4e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d905      	bls.n	8009e40 <TimerInsertTimer+0x30>
    {
        cur = next;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	60bb      	str	r3, [r7, #8]
 8009e3e:	e006      	b.n	8009e4e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	615a      	str	r2, [r3, #20]
        return;
 8009e4c:	e009      	b.n	8009e62 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e8      	bne.n	8009e28 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	615a      	str	r2, [r3, #20]
}
 8009e62:	3714      	adds	r7, #20
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000660 	.word	0x20000660

08009e70 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009e78:	4b0b      	ldr	r3, [pc, #44]	; (8009ea8 <TimerInsertNewHeadTimer+0x38>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8009e90:	4a05      	ldr	r2, [pc, #20]	; (8009ea8 <TimerInsertNewHeadTimer+0x38>)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8009e96:	4b04      	ldr	r3, [pc, #16]	; (8009ea8 <TimerInsertNewHeadTimer+0x38>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff ff8e 	bl	8009dbc <TimerSetTimeout>
}
 8009ea0:	bf00      	nop
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	20000660 	.word	0x20000660

08009eac <_vsniprintf_r>:
 8009eac:	b530      	push	{r4, r5, lr}
 8009eae:	4614      	mov	r4, r2
 8009eb0:	2c00      	cmp	r4, #0
 8009eb2:	b09b      	sub	sp, #108	; 0x6c
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	da05      	bge.n	8009ec6 <_vsniprintf_r+0x1a>
 8009eba:	238b      	movs	r3, #139	; 0x8b
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec2:	b01b      	add	sp, #108	; 0x6c
 8009ec4:	bd30      	pop	{r4, r5, pc}
 8009ec6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009eca:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ece:	bf14      	ite	ne
 8009ed0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009ed4:	4623      	moveq	r3, r4
 8009ed6:	9302      	str	r3, [sp, #8]
 8009ed8:	9305      	str	r3, [sp, #20]
 8009eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ede:	9100      	str	r1, [sp, #0]
 8009ee0:	9104      	str	r1, [sp, #16]
 8009ee2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ee6:	4669      	mov	r1, sp
 8009ee8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009eea:	f000 f8b5 	bl	800a058 <_svfiprintf_r>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	bfbc      	itt	lt
 8009ef2:	238b      	movlt	r3, #139	; 0x8b
 8009ef4:	602b      	strlt	r3, [r5, #0]
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	d0e3      	beq.n	8009ec2 <_vsniprintf_r+0x16>
 8009efa:	9b00      	ldr	r3, [sp, #0]
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	e7df      	b.n	8009ec2 <_vsniprintf_r+0x16>
	...

08009f04 <vsniprintf>:
 8009f04:	b507      	push	{r0, r1, r2, lr}
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	4803      	ldr	r0, [pc, #12]	; (8009f1c <vsniprintf+0x18>)
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	f7ff ffcb 	bl	8009eac <_vsniprintf_r>
 8009f16:	b003      	add	sp, #12
 8009f18:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f1c:	2000005c 	.word	0x2000005c

08009f20 <memset>:
 8009f20:	4402      	add	r2, r0
 8009f22:	4603      	mov	r3, r0
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d100      	bne.n	8009f2a <memset+0xa>
 8009f28:	4770      	bx	lr
 8009f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f2e:	e7f9      	b.n	8009f24 <memset+0x4>

08009f30 <__errno>:
 8009f30:	4b01      	ldr	r3, [pc, #4]	; (8009f38 <__errno+0x8>)
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	2000005c 	.word	0x2000005c

08009f3c <__libc_init_array>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4d0d      	ldr	r5, [pc, #52]	; (8009f74 <__libc_init_array+0x38>)
 8009f40:	4c0d      	ldr	r4, [pc, #52]	; (8009f78 <__libc_init_array+0x3c>)
 8009f42:	1b64      	subs	r4, r4, r5
 8009f44:	10a4      	asrs	r4, r4, #2
 8009f46:	2600      	movs	r6, #0
 8009f48:	42a6      	cmp	r6, r4
 8009f4a:	d109      	bne.n	8009f60 <__libc_init_array+0x24>
 8009f4c:	4d0b      	ldr	r5, [pc, #44]	; (8009f7c <__libc_init_array+0x40>)
 8009f4e:	4c0c      	ldr	r4, [pc, #48]	; (8009f80 <__libc_init_array+0x44>)
 8009f50:	f000 fc68 	bl	800a824 <_init>
 8009f54:	1b64      	subs	r4, r4, r5
 8009f56:	10a4      	asrs	r4, r4, #2
 8009f58:	2600      	movs	r6, #0
 8009f5a:	42a6      	cmp	r6, r4
 8009f5c:	d105      	bne.n	8009f6a <__libc_init_array+0x2e>
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f64:	4798      	blx	r3
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7ee      	b.n	8009f48 <__libc_init_array+0xc>
 8009f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6e:	4798      	blx	r3
 8009f70:	3601      	adds	r6, #1
 8009f72:	e7f2      	b.n	8009f5a <__libc_init_array+0x1e>
 8009f74:	0800abbc 	.word	0x0800abbc
 8009f78:	0800abbc 	.word	0x0800abbc
 8009f7c:	0800abbc 	.word	0x0800abbc
 8009f80:	0800abc0 	.word	0x0800abc0

08009f84 <__retarget_lock_acquire_recursive>:
 8009f84:	4770      	bx	lr

08009f86 <__retarget_lock_release_recursive>:
 8009f86:	4770      	bx	lr

08009f88 <memcpy>:
 8009f88:	440a      	add	r2, r1
 8009f8a:	4291      	cmp	r1, r2
 8009f8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f90:	d100      	bne.n	8009f94 <memcpy+0xc>
 8009f92:	4770      	bx	lr
 8009f94:	b510      	push	{r4, lr}
 8009f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f9e:	4291      	cmp	r1, r2
 8009fa0:	d1f9      	bne.n	8009f96 <memcpy+0xe>
 8009fa2:	bd10      	pop	{r4, pc}

08009fa4 <__ssputs_r>:
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	688e      	ldr	r6, [r1, #8]
 8009faa:	461f      	mov	r7, r3
 8009fac:	42be      	cmp	r6, r7
 8009fae:	680b      	ldr	r3, [r1, #0]
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	d82c      	bhi.n	800a012 <__ssputs_r+0x6e>
 8009fb8:	898a      	ldrh	r2, [r1, #12]
 8009fba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fbe:	d026      	beq.n	800a00e <__ssputs_r+0x6a>
 8009fc0:	6965      	ldr	r5, [r4, #20]
 8009fc2:	6909      	ldr	r1, [r1, #16]
 8009fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fc8:	eba3 0901 	sub.w	r9, r3, r1
 8009fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd0:	1c7b      	adds	r3, r7, #1
 8009fd2:	444b      	add	r3, r9
 8009fd4:	106d      	asrs	r5, r5, #1
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	bf38      	it	cc
 8009fda:	461d      	movcc	r5, r3
 8009fdc:	0553      	lsls	r3, r2, #21
 8009fde:	d527      	bpl.n	800a030 <__ssputs_r+0x8c>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f000 f957 	bl	800a294 <_malloc_r>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b360      	cbz	r0, 800a044 <__ssputs_r+0xa0>
 8009fea:	6921      	ldr	r1, [r4, #16]
 8009fec:	464a      	mov	r2, r9
 8009fee:	f7ff ffcb 	bl	8009f88 <memcpy>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	6126      	str	r6, [r4, #16]
 800a000:	6165      	str	r5, [r4, #20]
 800a002:	444e      	add	r6, r9
 800a004:	eba5 0509 	sub.w	r5, r5, r9
 800a008:	6026      	str	r6, [r4, #0]
 800a00a:	60a5      	str	r5, [r4, #8]
 800a00c:	463e      	mov	r6, r7
 800a00e:	42be      	cmp	r6, r7
 800a010:	d900      	bls.n	800a014 <__ssputs_r+0x70>
 800a012:	463e      	mov	r6, r7
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4632      	mov	r2, r6
 800a018:	4641      	mov	r1, r8
 800a01a:	f000 fb86 	bl	800a72a <memmove>
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	1b9b      	subs	r3, r3, r6
 800a022:	60a3      	str	r3, [r4, #8]
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	4433      	add	r3, r6
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	2000      	movs	r0, #0
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	462a      	mov	r2, r5
 800a032:	f000 fb4b 	bl	800a6cc <_realloc_r>
 800a036:	4606      	mov	r6, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1e0      	bne.n	8009ffe <__ssputs_r+0x5a>
 800a03c:	6921      	ldr	r1, [r4, #16]
 800a03e:	4650      	mov	r0, sl
 800a040:	f000 fb9e 	bl	800a780 <_free_r>
 800a044:	230c      	movs	r3, #12
 800a046:	f8ca 3000 	str.w	r3, [sl]
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a050:	81a3      	strh	r3, [r4, #12]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a056:	e7e9      	b.n	800a02c <__ssputs_r+0x88>

0800a058 <_svfiprintf_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	4698      	mov	r8, r3
 800a05e:	898b      	ldrh	r3, [r1, #12]
 800a060:	061b      	lsls	r3, r3, #24
 800a062:	b09d      	sub	sp, #116	; 0x74
 800a064:	4607      	mov	r7, r0
 800a066:	460d      	mov	r5, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	d50e      	bpl.n	800a08a <_svfiprintf_r+0x32>
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	b963      	cbnz	r3, 800a08a <_svfiprintf_r+0x32>
 800a070:	2140      	movs	r1, #64	; 0x40
 800a072:	f000 f90f 	bl	800a294 <_malloc_r>
 800a076:	6028      	str	r0, [r5, #0]
 800a078:	6128      	str	r0, [r5, #16]
 800a07a:	b920      	cbnz	r0, 800a086 <_svfiprintf_r+0x2e>
 800a07c:	230c      	movs	r3, #12
 800a07e:	603b      	str	r3, [r7, #0]
 800a080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a084:	e0d0      	b.n	800a228 <_svfiprintf_r+0x1d0>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	616b      	str	r3, [r5, #20]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9309      	str	r3, [sp, #36]	; 0x24
 800a08e:	2320      	movs	r3, #32
 800a090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a094:	f8cd 800c 	str.w	r8, [sp, #12]
 800a098:	2330      	movs	r3, #48	; 0x30
 800a09a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a240 <_svfiprintf_r+0x1e8>
 800a09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ae:	b10a      	cbz	r2, 800a0b4 <_svfiprintf_r+0x5c>
 800a0b0:	2a25      	cmp	r2, #37	; 0x25
 800a0b2:	d1f9      	bne.n	800a0a8 <_svfiprintf_r+0x50>
 800a0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0b8:	d00b      	beq.n	800a0d2 <_svfiprintf_r+0x7a>
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4622      	mov	r2, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ff6f 	bl	8009fa4 <__ssputs_r>
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f000 80a9 	beq.w	800a21e <_svfiprintf_r+0x1c6>
 800a0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ce:	445a      	add	r2, fp
 800a0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 80a1 	beq.w	800a21e <_svfiprintf_r+0x1c6>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e6:	f10a 0a01 	add.w	sl, sl, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	9307      	str	r3, [sp, #28]
 800a0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f4:	4654      	mov	r4, sl
 800a0f6:	2205      	movs	r2, #5
 800a0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fc:	4850      	ldr	r0, [pc, #320]	; (800a240 <_svfiprintf_r+0x1e8>)
 800a0fe:	f7f6 f83f 	bl	8000180 <memchr>
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	b9d8      	cbnz	r0, 800a13e <_svfiprintf_r+0xe6>
 800a106:	06d0      	lsls	r0, r2, #27
 800a108:	bf44      	itt	mi
 800a10a:	2320      	movmi	r3, #32
 800a10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a110:	0711      	lsls	r1, r2, #28
 800a112:	bf44      	itt	mi
 800a114:	232b      	movmi	r3, #43	; 0x2b
 800a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11a:	f89a 3000 	ldrb.w	r3, [sl]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d015      	beq.n	800a14e <_svfiprintf_r+0xf6>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	4654      	mov	r4, sl
 800a126:	2000      	movs	r0, #0
 800a128:	f04f 0c0a 	mov.w	ip, #10
 800a12c:	4621      	mov	r1, r4
 800a12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	2b09      	cmp	r3, #9
 800a136:	d94d      	bls.n	800a1d4 <_svfiprintf_r+0x17c>
 800a138:	b1b0      	cbz	r0, 800a168 <_svfiprintf_r+0x110>
 800a13a:	9207      	str	r2, [sp, #28]
 800a13c:	e014      	b.n	800a168 <_svfiprintf_r+0x110>
 800a13e:	eba0 0308 	sub.w	r3, r0, r8
 800a142:	fa09 f303 	lsl.w	r3, r9, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	46a2      	mov	sl, r4
 800a14c:	e7d2      	b.n	800a0f4 <_svfiprintf_r+0x9c>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	1d19      	adds	r1, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9103      	str	r1, [sp, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbb      	ittet	lt
 800a15a:	425b      	neglt	r3, r3
 800a15c:	f042 0202 	orrlt.w	r2, r2, #2
 800a160:	9307      	strge	r3, [sp, #28]
 800a162:	9307      	strlt	r3, [sp, #28]
 800a164:	bfb8      	it	lt
 800a166:	9204      	strlt	r2, [sp, #16]
 800a168:	7823      	ldrb	r3, [r4, #0]
 800a16a:	2b2e      	cmp	r3, #46	; 0x2e
 800a16c:	d10c      	bne.n	800a188 <_svfiprintf_r+0x130>
 800a16e:	7863      	ldrb	r3, [r4, #1]
 800a170:	2b2a      	cmp	r3, #42	; 0x2a
 800a172:	d134      	bne.n	800a1de <_svfiprintf_r+0x186>
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	1d1a      	adds	r2, r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	9203      	str	r2, [sp, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bfb8      	it	lt
 800a180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a184:	3402      	adds	r4, #2
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a244 <_svfiprintf_r+0x1ec>
 800a18c:	7821      	ldrb	r1, [r4, #0]
 800a18e:	2203      	movs	r2, #3
 800a190:	4650      	mov	r0, sl
 800a192:	f7f5 fff5 	bl	8000180 <memchr>
 800a196:	b138      	cbz	r0, 800a1a8 <_svfiprintf_r+0x150>
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	eba0 000a 	sub.w	r0, r0, sl
 800a19e:	2240      	movs	r2, #64	; 0x40
 800a1a0:	4082      	lsls	r2, r0
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	3401      	adds	r4, #1
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ac:	4826      	ldr	r0, [pc, #152]	; (800a248 <_svfiprintf_r+0x1f0>)
 800a1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b2:	2206      	movs	r2, #6
 800a1b4:	f7f5 ffe4 	bl	8000180 <memchr>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d038      	beq.n	800a22e <_svfiprintf_r+0x1d6>
 800a1bc:	4b23      	ldr	r3, [pc, #140]	; (800a24c <_svfiprintf_r+0x1f4>)
 800a1be:	bb1b      	cbnz	r3, 800a208 <_svfiprintf_r+0x1b0>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	f023 0307 	bic.w	r3, r3, #7
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ce:	4433      	add	r3, r6
 800a1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d2:	e768      	b.n	800a0a6 <_svfiprintf_r+0x4e>
 800a1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1d8:	460c      	mov	r4, r1
 800a1da:	2001      	movs	r0, #1
 800a1dc:	e7a6      	b.n	800a12c <_svfiprintf_r+0xd4>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	3401      	adds	r4, #1
 800a1e2:	9305      	str	r3, [sp, #20]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f04f 0c0a 	mov.w	ip, #10
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f0:	3a30      	subs	r2, #48	; 0x30
 800a1f2:	2a09      	cmp	r2, #9
 800a1f4:	d903      	bls.n	800a1fe <_svfiprintf_r+0x1a6>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0c6      	beq.n	800a188 <_svfiprintf_r+0x130>
 800a1fa:	9105      	str	r1, [sp, #20]
 800a1fc:	e7c4      	b.n	800a188 <_svfiprintf_r+0x130>
 800a1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a202:	4604      	mov	r4, r0
 800a204:	2301      	movs	r3, #1
 800a206:	e7f0      	b.n	800a1ea <_svfiprintf_r+0x192>
 800a208:	ab03      	add	r3, sp, #12
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	462a      	mov	r2, r5
 800a20e:	4b10      	ldr	r3, [pc, #64]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a210:	a904      	add	r1, sp, #16
 800a212:	4638      	mov	r0, r7
 800a214:	f3af 8000 	nop.w
 800a218:	1c42      	adds	r2, r0, #1
 800a21a:	4606      	mov	r6, r0
 800a21c:	d1d6      	bne.n	800a1cc <_svfiprintf_r+0x174>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	065b      	lsls	r3, r3, #25
 800a222:	f53f af2d 	bmi.w	800a080 <_svfiprintf_r+0x28>
 800a226:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a228:	b01d      	add	sp, #116	; 0x74
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	ab03      	add	r3, sp, #12
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	462a      	mov	r2, r5
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <_svfiprintf_r+0x1f8>)
 800a236:	a904      	add	r1, sp, #16
 800a238:	4638      	mov	r0, r7
 800a23a:	f000 f919 	bl	800a470 <_printf_i>
 800a23e:	e7eb      	b.n	800a218 <_svfiprintf_r+0x1c0>
 800a240:	0800ab80 	.word	0x0800ab80
 800a244:	0800ab86 	.word	0x0800ab86
 800a248:	0800ab8a 	.word	0x0800ab8a
 800a24c:	00000000 	.word	0x00000000
 800a250:	08009fa5 	.word	0x08009fa5

0800a254 <sbrk_aligned>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	4e0e      	ldr	r6, [pc, #56]	; (800a290 <sbrk_aligned+0x3c>)
 800a258:	460c      	mov	r4, r1
 800a25a:	6831      	ldr	r1, [r6, #0]
 800a25c:	4605      	mov	r5, r0
 800a25e:	b911      	cbnz	r1, 800a266 <sbrk_aligned+0x12>
 800a260:	f000 fa7e 	bl	800a760 <_sbrk_r>
 800a264:	6030      	str	r0, [r6, #0]
 800a266:	4621      	mov	r1, r4
 800a268:	4628      	mov	r0, r5
 800a26a:	f000 fa79 	bl	800a760 <_sbrk_r>
 800a26e:	1c43      	adds	r3, r0, #1
 800a270:	d00a      	beq.n	800a288 <sbrk_aligned+0x34>
 800a272:	1cc4      	adds	r4, r0, #3
 800a274:	f024 0403 	bic.w	r4, r4, #3
 800a278:	42a0      	cmp	r0, r4
 800a27a:	d007      	beq.n	800a28c <sbrk_aligned+0x38>
 800a27c:	1a21      	subs	r1, r4, r0
 800a27e:	4628      	mov	r0, r5
 800a280:	f000 fa6e 	bl	800a760 <_sbrk_r>
 800a284:	3001      	adds	r0, #1
 800a286:	d101      	bne.n	800a28c <sbrk_aligned+0x38>
 800a288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a28c:	4620      	mov	r0, r4
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	200007a4 	.word	0x200007a4

0800a294 <_malloc_r>:
 800a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a298:	1ccd      	adds	r5, r1, #3
 800a29a:	f025 0503 	bic.w	r5, r5, #3
 800a29e:	3508      	adds	r5, #8
 800a2a0:	2d0c      	cmp	r5, #12
 800a2a2:	bf38      	it	cc
 800a2a4:	250c      	movcc	r5, #12
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	db01      	blt.n	800a2b0 <_malloc_r+0x1c>
 800a2ac:	42a9      	cmp	r1, r5
 800a2ae:	d905      	bls.n	800a2bc <_malloc_r+0x28>
 800a2b0:	230c      	movs	r3, #12
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	2600      	movs	r6, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a390 <_malloc_r+0xfc>
 800a2c0:	f000 f9f8 	bl	800a6b4 <__malloc_lock>
 800a2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2c8:	461c      	mov	r4, r3
 800a2ca:	bb5c      	cbnz	r4, 800a324 <_malloc_r+0x90>
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff ffc0 	bl	800a254 <sbrk_aligned>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	d155      	bne.n	800a386 <_malloc_r+0xf2>
 800a2da:	f8d8 4000 	ldr.w	r4, [r8]
 800a2de:	4626      	mov	r6, r4
 800a2e0:	2e00      	cmp	r6, #0
 800a2e2:	d145      	bne.n	800a370 <_malloc_r+0xdc>
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	d048      	beq.n	800a37a <_malloc_r+0xe6>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	eb04 0903 	add.w	r9, r4, r3
 800a2f2:	f000 fa35 	bl	800a760 <_sbrk_r>
 800a2f6:	4581      	cmp	r9, r0
 800a2f8:	d13f      	bne.n	800a37a <_malloc_r+0xe6>
 800a2fa:	6821      	ldr	r1, [r4, #0]
 800a2fc:	1a6d      	subs	r5, r5, r1
 800a2fe:	4629      	mov	r1, r5
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff ffa7 	bl	800a254 <sbrk_aligned>
 800a306:	3001      	adds	r0, #1
 800a308:	d037      	beq.n	800a37a <_malloc_r+0xe6>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	442b      	add	r3, r5
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	f8d8 3000 	ldr.w	r3, [r8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d038      	beq.n	800a38a <_malloc_r+0xf6>
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	42a2      	cmp	r2, r4
 800a31c:	d12b      	bne.n	800a376 <_malloc_r+0xe2>
 800a31e:	2200      	movs	r2, #0
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	e00f      	b.n	800a344 <_malloc_r+0xb0>
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	1b52      	subs	r2, r2, r5
 800a328:	d41f      	bmi.n	800a36a <_malloc_r+0xd6>
 800a32a:	2a0b      	cmp	r2, #11
 800a32c:	d917      	bls.n	800a35e <_malloc_r+0xca>
 800a32e:	1961      	adds	r1, r4, r5
 800a330:	42a3      	cmp	r3, r4
 800a332:	6025      	str	r5, [r4, #0]
 800a334:	bf18      	it	ne
 800a336:	6059      	strne	r1, [r3, #4]
 800a338:	6863      	ldr	r3, [r4, #4]
 800a33a:	bf08      	it	eq
 800a33c:	f8c8 1000 	streq.w	r1, [r8]
 800a340:	5162      	str	r2, [r4, r5]
 800a342:	604b      	str	r3, [r1, #4]
 800a344:	4638      	mov	r0, r7
 800a346:	f104 060b 	add.w	r6, r4, #11
 800a34a:	f000 f9b9 	bl	800a6c0 <__malloc_unlock>
 800a34e:	f026 0607 	bic.w	r6, r6, #7
 800a352:	1d23      	adds	r3, r4, #4
 800a354:	1af2      	subs	r2, r6, r3
 800a356:	d0ae      	beq.n	800a2b6 <_malloc_r+0x22>
 800a358:	1b9b      	subs	r3, r3, r6
 800a35a:	50a3      	str	r3, [r4, r2]
 800a35c:	e7ab      	b.n	800a2b6 <_malloc_r+0x22>
 800a35e:	42a3      	cmp	r3, r4
 800a360:	6862      	ldr	r2, [r4, #4]
 800a362:	d1dd      	bne.n	800a320 <_malloc_r+0x8c>
 800a364:	f8c8 2000 	str.w	r2, [r8]
 800a368:	e7ec      	b.n	800a344 <_malloc_r+0xb0>
 800a36a:	4623      	mov	r3, r4
 800a36c:	6864      	ldr	r4, [r4, #4]
 800a36e:	e7ac      	b.n	800a2ca <_malloc_r+0x36>
 800a370:	4634      	mov	r4, r6
 800a372:	6876      	ldr	r6, [r6, #4]
 800a374:	e7b4      	b.n	800a2e0 <_malloc_r+0x4c>
 800a376:	4613      	mov	r3, r2
 800a378:	e7cc      	b.n	800a314 <_malloc_r+0x80>
 800a37a:	230c      	movs	r3, #12
 800a37c:	603b      	str	r3, [r7, #0]
 800a37e:	4638      	mov	r0, r7
 800a380:	f000 f99e 	bl	800a6c0 <__malloc_unlock>
 800a384:	e797      	b.n	800a2b6 <_malloc_r+0x22>
 800a386:	6025      	str	r5, [r4, #0]
 800a388:	e7dc      	b.n	800a344 <_malloc_r+0xb0>
 800a38a:	605b      	str	r3, [r3, #4]
 800a38c:	deff      	udf	#255	; 0xff
 800a38e:	bf00      	nop
 800a390:	200007a0 	.word	0x200007a0

0800a394 <_printf_common>:
 800a394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a398:	4616      	mov	r6, r2
 800a39a:	4699      	mov	r9, r3
 800a39c:	688a      	ldr	r2, [r1, #8]
 800a39e:	690b      	ldr	r3, [r1, #16]
 800a3a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	bfb8      	it	lt
 800a3a8:	4613      	movlt	r3, r2
 800a3aa:	6033      	str	r3, [r6, #0]
 800a3ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	b10a      	cbz	r2, 800a3ba <_printf_common+0x26>
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	6033      	str	r3, [r6, #0]
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	0699      	lsls	r1, r3, #26
 800a3be:	bf42      	ittt	mi
 800a3c0:	6833      	ldrmi	r3, [r6, #0]
 800a3c2:	3302      	addmi	r3, #2
 800a3c4:	6033      	strmi	r3, [r6, #0]
 800a3c6:	6825      	ldr	r5, [r4, #0]
 800a3c8:	f015 0506 	ands.w	r5, r5, #6
 800a3cc:	d106      	bne.n	800a3dc <_printf_common+0x48>
 800a3ce:	f104 0a19 	add.w	sl, r4, #25
 800a3d2:	68e3      	ldr	r3, [r4, #12]
 800a3d4:	6832      	ldr	r2, [r6, #0]
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	42ab      	cmp	r3, r5
 800a3da:	dc26      	bgt.n	800a42a <_printf_common+0x96>
 800a3dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3e0:	1e13      	subs	r3, r2, #0
 800a3e2:	6822      	ldr	r2, [r4, #0]
 800a3e4:	bf18      	it	ne
 800a3e6:	2301      	movne	r3, #1
 800a3e8:	0692      	lsls	r2, r2, #26
 800a3ea:	d42b      	bmi.n	800a444 <_printf_common+0xb0>
 800a3ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	47c0      	blx	r8
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	d01e      	beq.n	800a438 <_printf_common+0xa4>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	6922      	ldr	r2, [r4, #16]
 800a3fe:	f003 0306 	and.w	r3, r3, #6
 800a402:	2b04      	cmp	r3, #4
 800a404:	bf02      	ittt	eq
 800a406:	68e5      	ldreq	r5, [r4, #12]
 800a408:	6833      	ldreq	r3, [r6, #0]
 800a40a:	1aed      	subeq	r5, r5, r3
 800a40c:	68a3      	ldr	r3, [r4, #8]
 800a40e:	bf0c      	ite	eq
 800a410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a414:	2500      	movne	r5, #0
 800a416:	4293      	cmp	r3, r2
 800a418:	bfc4      	itt	gt
 800a41a:	1a9b      	subgt	r3, r3, r2
 800a41c:	18ed      	addgt	r5, r5, r3
 800a41e:	2600      	movs	r6, #0
 800a420:	341a      	adds	r4, #26
 800a422:	42b5      	cmp	r5, r6
 800a424:	d11a      	bne.n	800a45c <_printf_common+0xc8>
 800a426:	2000      	movs	r0, #0
 800a428:	e008      	b.n	800a43c <_printf_common+0xa8>
 800a42a:	2301      	movs	r3, #1
 800a42c:	4652      	mov	r2, sl
 800a42e:	4649      	mov	r1, r9
 800a430:	4638      	mov	r0, r7
 800a432:	47c0      	blx	r8
 800a434:	3001      	adds	r0, #1
 800a436:	d103      	bne.n	800a440 <_printf_common+0xac>
 800a438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a440:	3501      	adds	r5, #1
 800a442:	e7c6      	b.n	800a3d2 <_printf_common+0x3e>
 800a444:	18e1      	adds	r1, r4, r3
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	2030      	movs	r0, #48	; 0x30
 800a44a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a44e:	4422      	add	r2, r4
 800a450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a458:	3302      	adds	r3, #2
 800a45a:	e7c7      	b.n	800a3ec <_printf_common+0x58>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4622      	mov	r2, r4
 800a460:	4649      	mov	r1, r9
 800a462:	4638      	mov	r0, r7
 800a464:	47c0      	blx	r8
 800a466:	3001      	adds	r0, #1
 800a468:	d0e6      	beq.n	800a438 <_printf_common+0xa4>
 800a46a:	3601      	adds	r6, #1
 800a46c:	e7d9      	b.n	800a422 <_printf_common+0x8e>
	...

0800a470 <_printf_i>:
 800a470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a474:	7e0f      	ldrb	r7, [r1, #24]
 800a476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a478:	2f78      	cmp	r7, #120	; 0x78
 800a47a:	4691      	mov	r9, r2
 800a47c:	4680      	mov	r8, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	469a      	mov	sl, r3
 800a482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a486:	d807      	bhi.n	800a498 <_printf_i+0x28>
 800a488:	2f62      	cmp	r7, #98	; 0x62
 800a48a:	d80a      	bhi.n	800a4a2 <_printf_i+0x32>
 800a48c:	2f00      	cmp	r7, #0
 800a48e:	f000 80d4 	beq.w	800a63a <_printf_i+0x1ca>
 800a492:	2f58      	cmp	r7, #88	; 0x58
 800a494:	f000 80c0 	beq.w	800a618 <_printf_i+0x1a8>
 800a498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a49c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4a0:	e03a      	b.n	800a518 <_printf_i+0xa8>
 800a4a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4a6:	2b15      	cmp	r3, #21
 800a4a8:	d8f6      	bhi.n	800a498 <_printf_i+0x28>
 800a4aa:	a101      	add	r1, pc, #4	; (adr r1, 800a4b0 <_printf_i+0x40>)
 800a4ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4b0:	0800a509 	.word	0x0800a509
 800a4b4:	0800a51d 	.word	0x0800a51d
 800a4b8:	0800a499 	.word	0x0800a499
 800a4bc:	0800a499 	.word	0x0800a499
 800a4c0:	0800a499 	.word	0x0800a499
 800a4c4:	0800a499 	.word	0x0800a499
 800a4c8:	0800a51d 	.word	0x0800a51d
 800a4cc:	0800a499 	.word	0x0800a499
 800a4d0:	0800a499 	.word	0x0800a499
 800a4d4:	0800a499 	.word	0x0800a499
 800a4d8:	0800a499 	.word	0x0800a499
 800a4dc:	0800a621 	.word	0x0800a621
 800a4e0:	0800a549 	.word	0x0800a549
 800a4e4:	0800a5db 	.word	0x0800a5db
 800a4e8:	0800a499 	.word	0x0800a499
 800a4ec:	0800a499 	.word	0x0800a499
 800a4f0:	0800a643 	.word	0x0800a643
 800a4f4:	0800a499 	.word	0x0800a499
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	0800a499 	.word	0x0800a499
 800a500:	0800a499 	.word	0x0800a499
 800a504:	0800a5e3 	.word	0x0800a5e3
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	1d1a      	adds	r2, r3, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	602a      	str	r2, [r5, #0]
 800a510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a518:	2301      	movs	r3, #1
 800a51a:	e09f      	b.n	800a65c <_printf_i+0x1ec>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	0607      	lsls	r7, r0, #24
 800a522:	f103 0104 	add.w	r1, r3, #4
 800a526:	6029      	str	r1, [r5, #0]
 800a528:	d501      	bpl.n	800a52e <_printf_i+0xbe>
 800a52a:	681e      	ldr	r6, [r3, #0]
 800a52c:	e003      	b.n	800a536 <_printf_i+0xc6>
 800a52e:	0646      	lsls	r6, r0, #25
 800a530:	d5fb      	bpl.n	800a52a <_printf_i+0xba>
 800a532:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a536:	2e00      	cmp	r6, #0
 800a538:	da03      	bge.n	800a542 <_printf_i+0xd2>
 800a53a:	232d      	movs	r3, #45	; 0x2d
 800a53c:	4276      	negs	r6, r6
 800a53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a542:	485a      	ldr	r0, [pc, #360]	; (800a6ac <_printf_i+0x23c>)
 800a544:	230a      	movs	r3, #10
 800a546:	e012      	b.n	800a56e <_printf_i+0xfe>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	1d19      	adds	r1, r3, #4
 800a54e:	6029      	str	r1, [r5, #0]
 800a550:	0605      	lsls	r5, r0, #24
 800a552:	d501      	bpl.n	800a558 <_printf_i+0xe8>
 800a554:	681e      	ldr	r6, [r3, #0]
 800a556:	e002      	b.n	800a55e <_printf_i+0xee>
 800a558:	0641      	lsls	r1, r0, #25
 800a55a:	d5fb      	bpl.n	800a554 <_printf_i+0xe4>
 800a55c:	881e      	ldrh	r6, [r3, #0]
 800a55e:	4853      	ldr	r0, [pc, #332]	; (800a6ac <_printf_i+0x23c>)
 800a560:	2f6f      	cmp	r7, #111	; 0x6f
 800a562:	bf0c      	ite	eq
 800a564:	2308      	moveq	r3, #8
 800a566:	230a      	movne	r3, #10
 800a568:	2100      	movs	r1, #0
 800a56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a56e:	6865      	ldr	r5, [r4, #4]
 800a570:	60a5      	str	r5, [r4, #8]
 800a572:	2d00      	cmp	r5, #0
 800a574:	bfa2      	ittt	ge
 800a576:	6821      	ldrge	r1, [r4, #0]
 800a578:	f021 0104 	bicge.w	r1, r1, #4
 800a57c:	6021      	strge	r1, [r4, #0]
 800a57e:	b90e      	cbnz	r6, 800a584 <_printf_i+0x114>
 800a580:	2d00      	cmp	r5, #0
 800a582:	d04b      	beq.n	800a61c <_printf_i+0x1ac>
 800a584:	4615      	mov	r5, r2
 800a586:	fbb6 f1f3 	udiv	r1, r6, r3
 800a58a:	fb03 6711 	mls	r7, r3, r1, r6
 800a58e:	5dc7      	ldrb	r7, [r0, r7]
 800a590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a594:	4637      	mov	r7, r6
 800a596:	42bb      	cmp	r3, r7
 800a598:	460e      	mov	r6, r1
 800a59a:	d9f4      	bls.n	800a586 <_printf_i+0x116>
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d10b      	bne.n	800a5b8 <_printf_i+0x148>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	07de      	lsls	r6, r3, #31
 800a5a4:	d508      	bpl.n	800a5b8 <_printf_i+0x148>
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	bfde      	ittt	le
 800a5ae:	2330      	movle	r3, #48	; 0x30
 800a5b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5b8:	1b52      	subs	r2, r2, r5
 800a5ba:	6122      	str	r2, [r4, #16]
 800a5bc:	f8cd a000 	str.w	sl, [sp]
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	aa03      	add	r2, sp, #12
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f7ff fee4 	bl	800a394 <_printf_common>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d14a      	bne.n	800a666 <_printf_i+0x1f6>
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5d4:	b004      	add	sp, #16
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	f043 0320 	orr.w	r3, r3, #32
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	4833      	ldr	r0, [pc, #204]	; (800a6b0 <_printf_i+0x240>)
 800a5e4:	2778      	movs	r7, #120	; 0x78
 800a5e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	6829      	ldr	r1, [r5, #0]
 800a5ee:	061f      	lsls	r7, r3, #24
 800a5f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5f4:	d402      	bmi.n	800a5fc <_printf_i+0x18c>
 800a5f6:	065f      	lsls	r7, r3, #25
 800a5f8:	bf48      	it	mi
 800a5fa:	b2b6      	uxthmi	r6, r6
 800a5fc:	07df      	lsls	r7, r3, #31
 800a5fe:	bf48      	it	mi
 800a600:	f043 0320 	orrmi.w	r3, r3, #32
 800a604:	6029      	str	r1, [r5, #0]
 800a606:	bf48      	it	mi
 800a608:	6023      	strmi	r3, [r4, #0]
 800a60a:	b91e      	cbnz	r6, 800a614 <_printf_i+0x1a4>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	f023 0320 	bic.w	r3, r3, #32
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	2310      	movs	r3, #16
 800a616:	e7a7      	b.n	800a568 <_printf_i+0xf8>
 800a618:	4824      	ldr	r0, [pc, #144]	; (800a6ac <_printf_i+0x23c>)
 800a61a:	e7e4      	b.n	800a5e6 <_printf_i+0x176>
 800a61c:	4615      	mov	r5, r2
 800a61e:	e7bd      	b.n	800a59c <_printf_i+0x12c>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	6826      	ldr	r6, [r4, #0]
 800a624:	6961      	ldr	r1, [r4, #20]
 800a626:	1d18      	adds	r0, r3, #4
 800a628:	6028      	str	r0, [r5, #0]
 800a62a:	0635      	lsls	r5, r6, #24
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	d501      	bpl.n	800a634 <_printf_i+0x1c4>
 800a630:	6019      	str	r1, [r3, #0]
 800a632:	e002      	b.n	800a63a <_printf_i+0x1ca>
 800a634:	0670      	lsls	r0, r6, #25
 800a636:	d5fb      	bpl.n	800a630 <_printf_i+0x1c0>
 800a638:	8019      	strh	r1, [r3, #0]
 800a63a:	2300      	movs	r3, #0
 800a63c:	6123      	str	r3, [r4, #16]
 800a63e:	4615      	mov	r5, r2
 800a640:	e7bc      	b.n	800a5bc <_printf_i+0x14c>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	1d1a      	adds	r2, r3, #4
 800a646:	602a      	str	r2, [r5, #0]
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	2100      	movs	r1, #0
 800a64e:	4628      	mov	r0, r5
 800a650:	f7f5 fd96 	bl	8000180 <memchr>
 800a654:	b108      	cbz	r0, 800a65a <_printf_i+0x1ea>
 800a656:	1b40      	subs	r0, r0, r5
 800a658:	6060      	str	r0, [r4, #4]
 800a65a:	6863      	ldr	r3, [r4, #4]
 800a65c:	6123      	str	r3, [r4, #16]
 800a65e:	2300      	movs	r3, #0
 800a660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a664:	e7aa      	b.n	800a5bc <_printf_i+0x14c>
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	462a      	mov	r2, r5
 800a66a:	4649      	mov	r1, r9
 800a66c:	4640      	mov	r0, r8
 800a66e:	47d0      	blx	sl
 800a670:	3001      	adds	r0, #1
 800a672:	d0ad      	beq.n	800a5d0 <_printf_i+0x160>
 800a674:	6823      	ldr	r3, [r4, #0]
 800a676:	079b      	lsls	r3, r3, #30
 800a678:	d413      	bmi.n	800a6a2 <_printf_i+0x232>
 800a67a:	68e0      	ldr	r0, [r4, #12]
 800a67c:	9b03      	ldr	r3, [sp, #12]
 800a67e:	4298      	cmp	r0, r3
 800a680:	bfb8      	it	lt
 800a682:	4618      	movlt	r0, r3
 800a684:	e7a6      	b.n	800a5d4 <_printf_i+0x164>
 800a686:	2301      	movs	r3, #1
 800a688:	4632      	mov	r2, r6
 800a68a:	4649      	mov	r1, r9
 800a68c:	4640      	mov	r0, r8
 800a68e:	47d0      	blx	sl
 800a690:	3001      	adds	r0, #1
 800a692:	d09d      	beq.n	800a5d0 <_printf_i+0x160>
 800a694:	3501      	adds	r5, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	9903      	ldr	r1, [sp, #12]
 800a69a:	1a5b      	subs	r3, r3, r1
 800a69c:	42ab      	cmp	r3, r5
 800a69e:	dcf2      	bgt.n	800a686 <_printf_i+0x216>
 800a6a0:	e7eb      	b.n	800a67a <_printf_i+0x20a>
 800a6a2:	2500      	movs	r5, #0
 800a6a4:	f104 0619 	add.w	r6, r4, #25
 800a6a8:	e7f5      	b.n	800a696 <_printf_i+0x226>
 800a6aa:	bf00      	nop
 800a6ac:	0800ab91 	.word	0x0800ab91
 800a6b0:	0800aba2 	.word	0x0800aba2

0800a6b4 <__malloc_lock>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	; (800a6bc <__malloc_lock+0x8>)
 800a6b6:	f7ff bc65 	b.w	8009f84 <__retarget_lock_acquire_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	2000079c 	.word	0x2000079c

0800a6c0 <__malloc_unlock>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	; (800a6c8 <__malloc_unlock+0x8>)
 800a6c2:	f7ff bc60 	b.w	8009f86 <__retarget_lock_release_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	2000079c 	.word	0x2000079c

0800a6cc <_realloc_r>:
 800a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4614      	mov	r4, r2
 800a6d4:	460e      	mov	r6, r1
 800a6d6:	b921      	cbnz	r1, 800a6e2 <_realloc_r+0x16>
 800a6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	4611      	mov	r1, r2
 800a6de:	f7ff bdd9 	b.w	800a294 <_malloc_r>
 800a6e2:	b92a      	cbnz	r2, 800a6f0 <_realloc_r+0x24>
 800a6e4:	f000 f84c 	bl	800a780 <_free_r>
 800a6e8:	4625      	mov	r5, r4
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	f000 f890 	bl	800a814 <_malloc_usable_size_r>
 800a6f4:	4284      	cmp	r4, r0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	d802      	bhi.n	800a700 <_realloc_r+0x34>
 800a6fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6fe:	d812      	bhi.n	800a726 <_realloc_r+0x5a>
 800a700:	4621      	mov	r1, r4
 800a702:	4640      	mov	r0, r8
 800a704:	f7ff fdc6 	bl	800a294 <_malloc_r>
 800a708:	4605      	mov	r5, r0
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0ed      	beq.n	800a6ea <_realloc_r+0x1e>
 800a70e:	42bc      	cmp	r4, r7
 800a710:	4622      	mov	r2, r4
 800a712:	4631      	mov	r1, r6
 800a714:	bf28      	it	cs
 800a716:	463a      	movcs	r2, r7
 800a718:	f7ff fc36 	bl	8009f88 <memcpy>
 800a71c:	4631      	mov	r1, r6
 800a71e:	4640      	mov	r0, r8
 800a720:	f000 f82e 	bl	800a780 <_free_r>
 800a724:	e7e1      	b.n	800a6ea <_realloc_r+0x1e>
 800a726:	4635      	mov	r5, r6
 800a728:	e7df      	b.n	800a6ea <_realloc_r+0x1e>

0800a72a <memmove>:
 800a72a:	4288      	cmp	r0, r1
 800a72c:	b510      	push	{r4, lr}
 800a72e:	eb01 0402 	add.w	r4, r1, r2
 800a732:	d902      	bls.n	800a73a <memmove+0x10>
 800a734:	4284      	cmp	r4, r0
 800a736:	4623      	mov	r3, r4
 800a738:	d807      	bhi.n	800a74a <memmove+0x20>
 800a73a:	1e43      	subs	r3, r0, #1
 800a73c:	42a1      	cmp	r1, r4
 800a73e:	d008      	beq.n	800a752 <memmove+0x28>
 800a740:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a744:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a748:	e7f8      	b.n	800a73c <memmove+0x12>
 800a74a:	4402      	add	r2, r0
 800a74c:	4601      	mov	r1, r0
 800a74e:	428a      	cmp	r2, r1
 800a750:	d100      	bne.n	800a754 <memmove+0x2a>
 800a752:	bd10      	pop	{r4, pc}
 800a754:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a758:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a75c:	e7f7      	b.n	800a74e <memmove+0x24>
	...

0800a760 <_sbrk_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4d06      	ldr	r5, [pc, #24]	; (800a77c <_sbrk_r+0x1c>)
 800a764:	2300      	movs	r3, #0
 800a766:	4604      	mov	r4, r0
 800a768:	4608      	mov	r0, r1
 800a76a:	602b      	str	r3, [r5, #0]
 800a76c:	f7f6 fdc6 	bl	80012fc <_sbrk>
 800a770:	1c43      	adds	r3, r0, #1
 800a772:	d102      	bne.n	800a77a <_sbrk_r+0x1a>
 800a774:	682b      	ldr	r3, [r5, #0]
 800a776:	b103      	cbz	r3, 800a77a <_sbrk_r+0x1a>
 800a778:	6023      	str	r3, [r4, #0]
 800a77a:	bd38      	pop	{r3, r4, r5, pc}
 800a77c:	200007a8 	.word	0x200007a8

0800a780 <_free_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4605      	mov	r5, r0
 800a784:	2900      	cmp	r1, #0
 800a786:	d041      	beq.n	800a80c <_free_r+0x8c>
 800a788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78c:	1f0c      	subs	r4, r1, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfb8      	it	lt
 800a792:	18e4      	addlt	r4, r4, r3
 800a794:	f7ff ff8e 	bl	800a6b4 <__malloc_lock>
 800a798:	4a1d      	ldr	r2, [pc, #116]	; (800a810 <_free_r+0x90>)
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	b933      	cbnz	r3, 800a7ac <_free_r+0x2c>
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	6014      	str	r4, [r2, #0]
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a8:	f7ff bf8a 	b.w	800a6c0 <__malloc_unlock>
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d908      	bls.n	800a7c2 <_free_r+0x42>
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	1821      	adds	r1, r4, r0
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	bf01      	itttt	eq
 800a7b8:	6819      	ldreq	r1, [r3, #0]
 800a7ba:	685b      	ldreq	r3, [r3, #4]
 800a7bc:	1809      	addeq	r1, r1, r0
 800a7be:	6021      	streq	r1, [r4, #0]
 800a7c0:	e7ed      	b.n	800a79e <_free_r+0x1e>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	b10b      	cbz	r3, 800a7cc <_free_r+0x4c>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x42>
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	1850      	adds	r0, r2, r1
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x6c>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	4401      	add	r1, r0
 800a7d8:	1850      	adds	r0, r2, r1
 800a7da:	4283      	cmp	r3, r0
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	d1e0      	bne.n	800a7a2 <_free_r+0x22>
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
 800a7e6:	4408      	add	r0, r1
 800a7e8:	6010      	str	r0, [r2, #0]
 800a7ea:	e7da      	b.n	800a7a2 <_free_r+0x22>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x74>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	e7d6      	b.n	800a7a2 <_free_r+0x22>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	1821      	adds	r1, r4, r0
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1809      	addeq	r1, r1, r0
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	6054      	str	r4, [r2, #4]
 800a80a:	e7ca      	b.n	800a7a2 <_free_r+0x22>
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	bf00      	nop
 800a810:	200007a0 	.word	0x200007a0

0800a814 <_malloc_usable_size_r>:
 800a814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a818:	1f18      	subs	r0, r3, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	bfbc      	itt	lt
 800a81e:	580b      	ldrlt	r3, [r1, r0]
 800a820:	18c0      	addlt	r0, r0, r3
 800a822:	4770      	bx	lr

0800a824 <_init>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr

0800a830 <_fini>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	bf00      	nop
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr
